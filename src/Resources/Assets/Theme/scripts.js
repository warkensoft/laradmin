// modules are defined as an array
// [ module function, map of requires ]
//
// map of requires is short require name -> numeric require
//
// anything defined in a previous bundle is accessed via the
// orig method which is the require for previous bundles

(function (modules, entry, mainEntry, parcelRequireName, globalName) {
  /* eslint-disable no-undef */
  var globalObject =
    typeof globalThis !== 'undefined'
      ? globalThis
      : typeof self !== 'undefined'
      ? self
      : typeof window !== 'undefined'
      ? window
      : typeof global !== 'undefined'
      ? global
      : {};
  /* eslint-enable no-undef */

  // Save the require from previous bundle to this closure if any
  var previousRequire =
    typeof globalObject[parcelRequireName] === 'function' &&
    globalObject[parcelRequireName];

  var cache = previousRequire.cache || {};
  // Do not use `require` to prevent Webpack from trying to bundle this call
  var nodeRequire =
    typeof module !== 'undefined' &&
    typeof module.require === 'function' &&
    module.require.bind(module);

  function newRequire(name, jumped) {
    if (!cache[name]) {
      if (!modules[name]) {
        // if we cannot find the module within our internal map or
        // cache jump to the current global require ie. the last bundle
        // that was added to the page.
        var currentRequire =
          typeof globalObject[parcelRequireName] === 'function' &&
          globalObject[parcelRequireName];
        if (!jumped && currentRequire) {
          return currentRequire(name, true);
        }

        // If there are other bundles on this page the require from the
        // previous one is saved to 'previousRequire'. Repeat this as
        // many times as there are bundles until the module is found or
        // we exhaust the require chain.
        if (previousRequire) {
          return previousRequire(name, true);
        }

        // Try the node require function if it exists.
        if (nodeRequire && typeof name === 'string') {
          return nodeRequire(name);
        }

        var err = new Error("Cannot find module '" + name + "'");
        err.code = 'MODULE_NOT_FOUND';
        throw err;
      }

      localRequire.resolve = resolve;
      localRequire.cache = {};

      var module = (cache[name] = new newRequire.Module(name));

      modules[name][0].call(
        module.exports,
        localRequire,
        module,
        module.exports,
        this
      );
    }

    return cache[name].exports;

    function localRequire(x) {
      var res = localRequire.resolve(x);
      return res === false ? {} : newRequire(res);
    }

    function resolve(x) {
      var id = modules[name][1][x];
      return id != null ? id : x;
    }
  }

  function Module(moduleName) {
    this.id = moduleName;
    this.bundle = newRequire;
    this.exports = {};
  }

  newRequire.isParcelRequire = true;
  newRequire.Module = Module;
  newRequire.modules = modules;
  newRequire.cache = cache;
  newRequire.parent = previousRequire;
  newRequire.register = function (id, exports) {
    modules[id] = [
      function (require, module) {
        module.exports = exports;
      },
      {},
    ];
  };

  Object.defineProperty(newRequire, 'root', {
    get: function () {
      return globalObject[parcelRequireName];
    },
  });

  globalObject[parcelRequireName] = newRequire;

  for (var i = 0; i < entry.length; i++) {
    newRequire(entry[i]);
  }

  if (mainEntry) {
    // Expose entry point to Node, AMD or browser globals
    // Based on https://github.com/ForbesLindesay/umd/blob/master/template.js
    var mainExports = newRequire(mainEntry);

    // CommonJS
    if (typeof exports === 'object' && typeof module !== 'undefined') {
      module.exports = mainExports;

      // RequireJS
    } else if (typeof define === 'function' && define.amd) {
      define(function () {
        return mainExports;
      });

      // <script>
    } else if (globalName) {
      this[globalName] = mainExports;
    }
  }
})({"lO5Qj":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
var _jquery = require("jquery");
var _jqueryDefault = parcelHelpers.interopDefault(_jquery);
var _select2 = require("select2");
var _select2Default = parcelHelpers.interopDefault(_select2);
window.$ = window.jQuery = (0, _jqueryDefault.default);
// import bootstrap from 'bootstrap'
// window.bootstrap = bootstrap;
require("67eae78aa7177040");
require("970005559e5b11df");
require("8e3ad787b1f3f16");
(0, _select2Default.default)();
(function($) {
    "use strict"; // Start of use strict
    // Toggle the side navigation
    $("#sidebarToggle").on("click", function(e) {
        e.preventDefault();
        $("body").toggleClass("sidebar-toggled");
        $(".sidebar").toggleClass("toggled");
    });
    // Prevent the content wrapper from scrolling when the fixed side navigation hovered over
    $("body.fixed-nav .sidebar").on("mousewheel DOMMouseScroll wheel", function(e) {
        if ($(window).width() > 768) {
            var e0 = e.originalEvent, delta = e0.wheelDelta || -e0.detail;
            this.scrollTop += (delta < 0 ? 1 : -1) * 30;
            e.preventDefault();
        }
    });
    // Scroll to top button appear
    $(document).on("scroll", function() {
        var scrollDistance = $(this).scrollTop();
        if (scrollDistance > 100) $(".scroll-to-top").fadeIn();
        else $(".scroll-to-top").fadeOut();
    });
    // Smooth scrolling using jQuery easing
    $(document).on("click", "a.scroll-to-top", function(event) {
        var $anchor = $(this);
        $("html, body").stop().animate({
            scrollTop: $($anchor.attr("href")).offset().top
        }, 1000, "easeInOutExpo");
        event.preventDefault();
    });
})((0, _jqueryDefault.default)); // End of use strict

},{"jquery":"9o0Tu","67eae78aa7177040":"f6YAY","970005559e5b11df":"l8wPY","@parcel/transformer-js/src/esmodule-helpers.js":"j7FRh","select2":"lYl4X","8e3ad787b1f3f16":"gAJqK"}],"9o0Tu":[function(require,module,exports) {
/*!
 * jQuery JavaScript Library v3.3.1
 * https://jquery.com/
 *
 * Includes Sizzle.js
 * https://sizzlejs.com/
 *
 * Copyright JS Foundation and other contributors
 * Released under the MIT license
 * https://jquery.org/license
 *
 * Date: 2018-01-20T17:24Z
 */ (function(global, factory) {
    "use strict";
    if (typeof module.exports === "object") // For CommonJS and CommonJS-like environments where a proper `window`
    // is present, execute the factory and get jQuery.
    // For environments that do not have a `window` with a `document`
    // (such as Node.js), expose a factory as module.exports.
    // This accentuates the need for the creation of a real `window`.
    // e.g. var jQuery = require("jquery")(window);
    // See ticket #14549 for more info.
    module.exports = global.document ? factory(global, true) : function(w) {
        if (!w.document) throw new Error("jQuery requires a window with a document");
        return factory(w);
    };
    else factory(global);
// Pass this if window is not defined yet
})(typeof window !== "undefined" ? window : this, function(window1, noGlobal) {
    // Edge <= 12 - 13+, Firefox <=18 - 45+, IE 10 - 11, Safari 5.1 - 9+, iOS 6 - 9.1
    // throw exceptions when non-strict code (e.g., ASP.NET 4.5) accesses strict mode
    // arguments.callee.caller (trac-13335). But as of jQuery 3.0 (2016), strict mode should be common
    // enough that all such attempts are guarded in a try block.
    "use strict";
    var arr = [];
    var document = window1.document;
    var getProto = Object.getPrototypeOf;
    var slice = arr.slice;
    var concat = arr.concat;
    var push = arr.push;
    var indexOf = arr.indexOf;
    var class2type = {};
    var toString = class2type.toString;
    var hasOwn = class2type.hasOwnProperty;
    var fnToString = hasOwn.toString;
    var ObjectFunctionString = fnToString.call(Object);
    var support = {};
    var isFunction = function isFunction(obj) {
        // Support: Chrome <=57, Firefox <=52
        // In some browsers, typeof returns "function" for HTML <object> elements
        // (i.e., `typeof document.createElement( "object" ) === "function"`).
        // We don't want to classify *any* DOM node as a function.
        return typeof obj === "function" && typeof obj.nodeType !== "number";
    };
    var isWindow = function isWindow(obj) {
        return obj != null && obj === obj.window;
    };
    var preservedScriptAttributes = {
        type: true,
        src: true,
        noModule: true
    };
    function DOMEval(code, doc, node) {
        doc = doc || document;
        var i, script = doc.createElement("script");
        script.text = code;
        if (node) {
            for(i in preservedScriptAttributes)if (node[i]) script[i] = node[i];
        }
        doc.head.appendChild(script).parentNode.removeChild(script);
    }
    function toType(obj) {
        if (obj == null) return obj + "";
        // Support: Android <=2.3 only (functionish RegExp)
        return typeof obj === "object" || typeof obj === "function" ? class2type[toString.call(obj)] || "object" : typeof obj;
    }
    /* global Symbol */ // Defining this global in .eslintrc.json would create a danger of using the global
    // unguarded in another place, it seems safer to define global only for this module
    var version = "3.3.1", // Define a local copy of jQuery
    jQuery = function(selector, context) {
        // The jQuery object is actually just the init constructor 'enhanced'
        // Need init if jQuery is called (just allow error to be thrown if not included)
        return new jQuery.fn.init(selector, context);
    }, // Support: Android <=4.0 only
    // Make sure we trim BOM and NBSP
    rtrim = /^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g;
    jQuery.fn = jQuery.prototype = {
        // The current version of jQuery being used
        jquery: version,
        constructor: jQuery,
        // The default length of a jQuery object is 0
        length: 0,
        toArray: function() {
            return slice.call(this);
        },
        // Get the Nth element in the matched element set OR
        // Get the whole matched element set as a clean array
        get: function(num) {
            // Return all the elements in a clean array
            if (num == null) return slice.call(this);
            // Return just the one element from the set
            return num < 0 ? this[num + this.length] : this[num];
        },
        // Take an array of elements and push it onto the stack
        // (returning the new matched element set)
        pushStack: function(elems) {
            // Build a new jQuery matched element set
            var ret = jQuery.merge(this.constructor(), elems);
            // Add the old object onto the stack (as a reference)
            ret.prevObject = this;
            // Return the newly-formed element set
            return ret;
        },
        // Execute a callback for every element in the matched set.
        each: function(callback) {
            return jQuery.each(this, callback);
        },
        map: function(callback) {
            return this.pushStack(jQuery.map(this, function(elem, i) {
                return callback.call(elem, i, elem);
            }));
        },
        slice: function() {
            return this.pushStack(slice.apply(this, arguments));
        },
        first: function() {
            return this.eq(0);
        },
        last: function() {
            return this.eq(-1);
        },
        eq: function(i) {
            var len = this.length, j = +i + (i < 0 ? len : 0);
            return this.pushStack(j >= 0 && j < len ? [
                this[j]
            ] : []);
        },
        end: function() {
            return this.prevObject || this.constructor();
        },
        // For internal use only.
        // Behaves like an Array's method, not like a jQuery method.
        push: push,
        sort: arr.sort,
        splice: arr.splice
    };
    jQuery.extend = jQuery.fn.extend = function() {
        var options, name, src, copy, copyIsArray, clone, target = arguments[0] || {}, i = 1, length = arguments.length, deep = false;
        // Handle a deep copy situation
        if (typeof target === "boolean") {
            deep = target;
            // Skip the boolean and the target
            target = arguments[i] || {};
            i++;
        }
        // Handle case when target is a string or something (possible in deep copy)
        if (typeof target !== "object" && !isFunction(target)) target = {};
        // Extend jQuery itself if only one argument is passed
        if (i === length) {
            target = this;
            i--;
        }
        for(; i < length; i++){
            // Only deal with non-null/undefined values
            if ((options = arguments[i]) != null) // Extend the base object
            for(name in options){
                src = target[name];
                copy = options[name];
                // Prevent never-ending loop
                if (target === copy) continue;
                // Recurse if we're merging plain objects or arrays
                if (deep && copy && (jQuery.isPlainObject(copy) || (copyIsArray = Array.isArray(copy)))) {
                    if (copyIsArray) {
                        copyIsArray = false;
                        clone = src && Array.isArray(src) ? src : [];
                    } else clone = src && jQuery.isPlainObject(src) ? src : {};
                    // Never move original objects, clone them
                    target[name] = jQuery.extend(deep, clone, copy);
                // Don't bring in undefined values
                } else if (copy !== undefined) target[name] = copy;
            }
        }
        // Return the modified object
        return target;
    };
    jQuery.extend({
        // Unique for each copy of jQuery on the page
        expando: "jQuery" + (version + Math.random()).replace(/\D/g, ""),
        // Assume jQuery is ready without the ready module
        isReady: true,
        error: function(msg) {
            throw new Error(msg);
        },
        noop: function() {},
        isPlainObject: function(obj) {
            var proto, Ctor;
            // Detect obvious negatives
            // Use toString instead of jQuery.type to catch host objects
            if (!obj || toString.call(obj) !== "[object Object]") return false;
            proto = getProto(obj);
            // Objects with no prototype (e.g., `Object.create( null )`) are plain
            if (!proto) return true;
            // Objects with prototype are plain iff they were constructed by a global Object function
            Ctor = hasOwn.call(proto, "constructor") && proto.constructor;
            return typeof Ctor === "function" && fnToString.call(Ctor) === ObjectFunctionString;
        },
        isEmptyObject: function(obj) {
            /* eslint-disable no-unused-vars */ // See https://github.com/eslint/eslint/issues/6125
            var name;
            for(name in obj)return false;
            return true;
        },
        // Evaluates a script in a global context
        globalEval: function(code) {
            DOMEval(code);
        },
        each: function(obj, callback) {
            var length, i = 0;
            if (isArrayLike(obj)) {
                length = obj.length;
                for(; i < length; i++){
                    if (callback.call(obj[i], i, obj[i]) === false) break;
                }
            } else for(i in obj){
                if (callback.call(obj[i], i, obj[i]) === false) break;
            }
            return obj;
        },
        // Support: Android <=4.0 only
        trim: function(text) {
            return text == null ? "" : (text + "").replace(rtrim, "");
        },
        // results is for internal usage only
        makeArray: function(arr, results) {
            var ret = results || [];
            if (arr != null) {
                if (isArrayLike(Object(arr))) jQuery.merge(ret, typeof arr === "string" ? [
                    arr
                ] : arr);
                else push.call(ret, arr);
            }
            return ret;
        },
        inArray: function(elem, arr, i) {
            return arr == null ? -1 : indexOf.call(arr, elem, i);
        },
        // Support: Android <=4.0 only, PhantomJS 1 only
        // push.apply(_, arraylike) throws on ancient WebKit
        merge: function(first, second) {
            var len = +second.length, j = 0, i = first.length;
            for(; j < len; j++)first[i++] = second[j];
            first.length = i;
            return first;
        },
        grep: function(elems, callback, invert) {
            var callbackInverse, matches = [], i = 0, length = elems.length, callbackExpect = !invert;
            // Go through the array, only saving the items
            // that pass the validator function
            for(; i < length; i++){
                callbackInverse = !callback(elems[i], i);
                if (callbackInverse !== callbackExpect) matches.push(elems[i]);
            }
            return matches;
        },
        // arg is for internal usage only
        map: function(elems, callback, arg) {
            var length, value, i = 0, ret = [];
            // Go through the array, translating each of the items to their new values
            if (isArrayLike(elems)) {
                length = elems.length;
                for(; i < length; i++){
                    value = callback(elems[i], i, arg);
                    if (value != null) ret.push(value);
                }
            // Go through every key on the object,
            } else for(i in elems){
                value = callback(elems[i], i, arg);
                if (value != null) ret.push(value);
            }
            // Flatten any nested arrays
            return concat.apply([], ret);
        },
        // A global GUID counter for objects
        guid: 1,
        // jQuery.support is not used in Core but other projects attach their
        // properties to it so it needs to exist.
        support: support
    });
    if (typeof Symbol === "function") jQuery.fn[Symbol.iterator] = arr[Symbol.iterator];
    // Populate the class2type map
    jQuery.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "), function(i, name) {
        class2type["[object " + name + "]"] = name.toLowerCase();
    });
    function isArrayLike(obj) {
        // Support: real iOS 8.2 only (not reproducible in simulator)
        // `in` check used to prevent JIT error (gh-2145)
        // hasOwn isn't used here due to false negatives
        // regarding Nodelist length in IE
        var length = !!obj && "length" in obj && obj.length, type = toType(obj);
        if (isFunction(obj) || isWindow(obj)) return false;
        return type === "array" || length === 0 || typeof length === "number" && length > 0 && length - 1 in obj;
    }
    var Sizzle = /*!
 * Sizzle CSS Selector Engine v2.3.3
 * https://sizzlejs.com/
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license
 * http://jquery.org/license
 *
 * Date: 2016-08-08
 */ function(window1) {
        var i, support, Expr, getText, isXML, tokenize, compile, select, outermostContext, sortInput, hasDuplicate, // Local document vars
        setDocument, document, docElem, documentIsHTML, rbuggyQSA, rbuggyMatches, matches, contains, // Instance-specific data
        expando = "sizzle" + 1 * new Date(), preferredDoc = window1.document, dirruns = 0, done = 0, classCache = createCache(), tokenCache = createCache(), compilerCache = createCache(), sortOrder = function(a, b) {
            if (a === b) hasDuplicate = true;
            return 0;
        }, // Instance methods
        hasOwn = {}.hasOwnProperty, arr = [], pop = arr.pop, push_native = arr.push, push = arr.push, slice = arr.slice, // Use a stripped-down indexOf as it's faster than native
        // https://jsperf.com/thor-indexof-vs-for/5
        indexOf = function(list, elem) {
            var i = 0, len = list.length;
            for(; i < len; i++){
                if (list[i] === elem) return i;
            }
            return -1;
        }, booleans = "checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped", // Regular expressions
        // http://www.w3.org/TR/css3-selectors/#whitespace
        whitespace = "[\\x20\\t\\r\\n\\f]", // http://www.w3.org/TR/CSS21/syndata.html#value-def-identifier
        identifier = "(?:\\\\.|[\\w-]|[^\x00-\\xa0])+", // Attribute selectors: http://www.w3.org/TR/selectors/#attribute-selectors
        attributes = "\\[" + whitespace + "*(" + identifier + ")(?:" + whitespace + // Operator (capture 2)
        "*([*^$|!~]?=)" + whitespace + // "Attribute values must be CSS identifiers [capture 5] or strings [capture 3 or capture 4]"
        "*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|(" + identifier + "))|)" + whitespace + "*\\]", pseudos = ":(" + identifier + ")(?:\\((" + // To reduce the number of selectors needing tokenize in the preFilter, prefer arguments:
        // 1. quoted (capture 3; capture 4 or capture 5)
        "('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|" + // 2. simple (capture 6)
        "((?:\\\\.|[^\\\\()[\\]]|" + attributes + ")*)|" + // 3. anything else (capture 2)
        ".*" + ")\\)|)", // Leading and non-escaped trailing whitespace, capturing some non-whitespace characters preceding the latter
        rwhitespace = new RegExp(whitespace + "+", "g"), rtrim = new RegExp("^" + whitespace + "+|((?:^|[^\\\\])(?:\\\\.)*)" + whitespace + "+$", "g"), rcomma = new RegExp("^" + whitespace + "*," + whitespace + "*"), rcombinators = new RegExp("^" + whitespace + "*([>+~]|" + whitespace + ")" + whitespace + "*"), rattributeQuotes = new RegExp("=" + whitespace + "*([^\\]'\"]*?)" + whitespace + "*\\]", "g"), rpseudo = new RegExp(pseudos), ridentifier = new RegExp("^" + identifier + "$"), matchExpr = {
            "ID": new RegExp("^#(" + identifier + ")"),
            "CLASS": new RegExp("^\\.(" + identifier + ")"),
            "TAG": new RegExp("^(" + identifier + "|[*])"),
            "ATTR": new RegExp("^" + attributes),
            "PSEUDO": new RegExp("^" + pseudos),
            "CHILD": new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\(" + whitespace + "*(even|odd|(([+-]|)(\\d*)n|)" + whitespace + "*(?:([+-]|)" + whitespace + "*(\\d+)|))" + whitespace + "*\\)|)", "i"),
            "bool": new RegExp("^(?:" + booleans + ")$", "i"),
            // For use in libraries implementing .is()
            // We use this for POS matching in `select`
            "needsContext": new RegExp("^" + whitespace + "*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\(" + whitespace + "*((?:-\\d)?\\d*)" + whitespace + "*\\)|)(?=[^-]|$)", "i")
        }, rinputs = /^(?:input|select|textarea|button)$/i, rheader = /^h\d$/i, rnative = /^[^{]+\{\s*\[native \w/, // Easily-parseable/retrievable ID or TAG or CLASS selectors
        rquickExpr = /^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/, rsibling = /[+~]/, // CSS escapes
        // http://www.w3.org/TR/CSS21/syndata.html#escaped-characters
        runescape = new RegExp("\\\\([\\da-f]{1,6}" + whitespace + "?|(" + whitespace + ")|.)", "ig"), funescape = function(_, escaped, escapedWhitespace) {
            var high = "0x" + escaped - 0x10000;
            // NaN means non-codepoint
            // Support: Firefox<24
            // Workaround erroneous numeric interpretation of +"0x"
            return high !== high || escapedWhitespace ? escaped : high < 0 ? // BMP codepoint
            String.fromCharCode(high + 0x10000) : // Supplemental Plane codepoint (surrogate pair)
            String.fromCharCode(high >> 10 | 0xD800, high & 0x3FF | 0xDC00);
        }, // CSS string/identifier serialization
        // https://drafts.csswg.org/cssom/#common-serializing-idioms
        rcssescape = /([\0-\x1f\x7f]|^-?\d)|^-$|[^\0-\x1f\x7f-\uFFFF\w-]/g, fcssescape = function(ch, asCodePoint) {
            if (asCodePoint) {
                // U+0000 NULL becomes U+FFFD REPLACEMENT CHARACTER
                if (ch === "\x00") return "�";
                // Control characters and (dependent upon position) numbers get escaped as code points
                return ch.slice(0, -1) + "\\" + ch.charCodeAt(ch.length - 1).toString(16) + " ";
            }
            // Other potentially-special ASCII characters get backslash-escaped
            return "\\" + ch;
        }, // Used for iframes
        // See setDocument()
        // Removing the function wrapper causes a "Permission Denied"
        // error in IE
        unloadHandler = function() {
            setDocument();
        }, disabledAncestor = addCombinator(function(elem) {
            return elem.disabled === true && ("form" in elem || "label" in elem);
        }, {
            dir: "parentNode",
            next: "legend"
        });
        // Optimize for push.apply( _, NodeList )
        try {
            push.apply(arr = slice.call(preferredDoc.childNodes), preferredDoc.childNodes);
            // Support: Android<4.0
            // Detect silently failing push.apply
            arr[preferredDoc.childNodes.length].nodeType;
        } catch (e) {
            push = {
                apply: arr.length ? // Leverage slice if possible
                function(target, els) {
                    push_native.apply(target, slice.call(els));
                } : // Support: IE<9
                // Otherwise append directly
                function(target, els) {
                    var j = target.length, i = 0;
                    // Can't trust NodeList.length
                    while(target[j++] = els[i++]);
                    target.length = j - 1;
                }
            };
        }
        function Sizzle(selector, context, results, seed) {
            var m, i, elem, nid, match, groups, newSelector, newContext = context && context.ownerDocument, // nodeType defaults to 9, since context defaults to document
            nodeType = context ? context.nodeType : 9;
            results = results || [];
            // Return early from calls with invalid selector or context
            if (typeof selector !== "string" || !selector || nodeType !== 1 && nodeType !== 9 && nodeType !== 11) return results;
            // Try to shortcut find operations (as opposed to filters) in HTML documents
            if (!seed) {
                if ((context ? context.ownerDocument || context : preferredDoc) !== document) setDocument(context);
                context = context || document;
                if (documentIsHTML) {
                    // If the selector is sufficiently simple, try using a "get*By*" DOM method
                    // (excepting DocumentFragment context, where the methods don't exist)
                    if (nodeType !== 11 && (match = rquickExpr.exec(selector))) {
                        // ID selector
                        if (m = match[1]) {
                            // Document context
                            if (nodeType === 9) {
                                if (elem = context.getElementById(m)) // Support: IE, Opera, Webkit
                                // TODO: identify versions
                                // getElementById can match elements by name instead of ID
                                {
                                    if (elem.id === m) {
                                        results.push(elem);
                                        return results;
                                    }
                                } else return results;
                            // Element context
                            } else // Support: IE, Opera, Webkit
                            // TODO: identify versions
                            // getElementById can match elements by name instead of ID
                            if (newContext && (elem = newContext.getElementById(m)) && contains(context, elem) && elem.id === m) {
                                results.push(elem);
                                return results;
                            }
                        // Type selector
                        } else if (match[2]) {
                            push.apply(results, context.getElementsByTagName(selector));
                            return results;
                        // Class selector
                        } else if ((m = match[3]) && support.getElementsByClassName && context.getElementsByClassName) {
                            push.apply(results, context.getElementsByClassName(m));
                            return results;
                        }
                    }
                    // Take advantage of querySelectorAll
                    if (support.qsa && !compilerCache[selector + " "] && (!rbuggyQSA || !rbuggyQSA.test(selector))) {
                        if (nodeType !== 1) {
                            newContext = context;
                            newSelector = selector;
                        // qSA looks outside Element context, which is not what we want
                        // Thanks to Andrew Dupont for this workaround technique
                        // Support: IE <=8
                        // Exclude object elements
                        } else if (context.nodeName.toLowerCase() !== "object") {
                            // Capture the context ID, setting it first if necessary
                            if (nid = context.getAttribute("id")) nid = nid.replace(rcssescape, fcssescape);
                            else context.setAttribute("id", nid = expando);
                            // Prefix every selector in the list
                            groups = tokenize(selector);
                            i = groups.length;
                            while(i--)groups[i] = "#" + nid + " " + toSelector(groups[i]);
                            newSelector = groups.join(",");
                            // Expand context for sibling selectors
                            newContext = rsibling.test(selector) && testContext(context.parentNode) || context;
                        }
                        if (newSelector) try {
                            push.apply(results, newContext.querySelectorAll(newSelector));
                            return results;
                        } catch (qsaError) {} finally{
                            if (nid === expando) context.removeAttribute("id");
                        }
                    }
                }
            }
            // All others
            return select(selector.replace(rtrim, "$1"), context, results, seed);
        }
        /**
 * Create key-value caches of limited size
 * @returns {function(string, object)} Returns the Object data after storing it on itself with
 *	property name the (space-suffixed) string and (if the cache is larger than Expr.cacheLength)
 *	deleting the oldest entry
 */ function createCache() {
            var keys = [];
            function cache(key, value) {
                // Use (key + " ") to avoid collision with native prototype properties (see Issue #157)
                if (keys.push(key + " ") > Expr.cacheLength) // Only keep the most recent entries
                delete cache[keys.shift()];
                return cache[key + " "] = value;
            }
            return cache;
        }
        /**
 * Mark a function for special use by Sizzle
 * @param {Function} fn The function to mark
 */ function markFunction(fn) {
            fn[expando] = true;
            return fn;
        }
        /**
 * Support testing using an element
 * @param {Function} fn Passed the created element and returns a boolean result
 */ function assert(fn) {
            var el = document.createElement("fieldset");
            try {
                return !!fn(el);
            } catch (e) {
                return false;
            } finally{
                // Remove from its parent by default
                if (el.parentNode) el.parentNode.removeChild(el);
                // release memory in IE
                el = null;
            }
        }
        /**
 * Adds the same handler for all of the specified attrs
 * @param {String} attrs Pipe-separated list of attributes
 * @param {Function} handler The method that will be applied
 */ function addHandle(attrs, handler) {
            var arr = attrs.split("|"), i = arr.length;
            while(i--)Expr.attrHandle[arr[i]] = handler;
        }
        /**
 * Checks document order of two siblings
 * @param {Element} a
 * @param {Element} b
 * @returns {Number} Returns less than 0 if a precedes b, greater than 0 if a follows b
 */ function siblingCheck(a, b) {
            var cur = b && a, diff = cur && a.nodeType === 1 && b.nodeType === 1 && a.sourceIndex - b.sourceIndex;
            // Use IE sourceIndex if available on both nodes
            if (diff) return diff;
            // Check if b follows a
            if (cur) while(cur = cur.nextSibling){
                if (cur === b) return -1;
            }
            return a ? 1 : -1;
        }
        /**
 * Returns a function to use in pseudos for input types
 * @param {String} type
 */ function createInputPseudo(type) {
            return function(elem) {
                var name = elem.nodeName.toLowerCase();
                return name === "input" && elem.type === type;
            };
        }
        /**
 * Returns a function to use in pseudos for buttons
 * @param {String} type
 */ function createButtonPseudo(type) {
            return function(elem) {
                var name = elem.nodeName.toLowerCase();
                return (name === "input" || name === "button") && elem.type === type;
            };
        }
        /**
 * Returns a function to use in pseudos for :enabled/:disabled
 * @param {Boolean} disabled true for :disabled; false for :enabled
 */ function createDisabledPseudo(disabled) {
            // Known :disabled false positives: fieldset[disabled] > legend:nth-of-type(n+2) :can-disable
            return function(elem) {
                // Only certain elements can match :enabled or :disabled
                // https://html.spec.whatwg.org/multipage/scripting.html#selector-enabled
                // https://html.spec.whatwg.org/multipage/scripting.html#selector-disabled
                if ("form" in elem) {
                    // Check for inherited disabledness on relevant non-disabled elements:
                    // * listed form-associated elements in a disabled fieldset
                    //   https://html.spec.whatwg.org/multipage/forms.html#category-listed
                    //   https://html.spec.whatwg.org/multipage/forms.html#concept-fe-disabled
                    // * option elements in a disabled optgroup
                    //   https://html.spec.whatwg.org/multipage/forms.html#concept-option-disabled
                    // All such elements have a "form" property.
                    if (elem.parentNode && elem.disabled === false) {
                        // Option elements defer to a parent optgroup if present
                        if ("label" in elem) {
                            if ("label" in elem.parentNode) return elem.parentNode.disabled === disabled;
                            else return elem.disabled === disabled;
                        }
                        // Support: IE 6 - 11
                        // Use the isDisabled shortcut property to check for disabled fieldset ancestors
                        return elem.isDisabled === disabled || // Where there is no isDisabled, check manually
                        /* jshint -W018 */ elem.isDisabled !== !disabled && disabledAncestor(elem) === disabled;
                    }
                    return elem.disabled === disabled;
                // Try to winnow out elements that can't be disabled before trusting the disabled property.
                // Some victims get caught in our net (label, legend, menu, track), but it shouldn't
                // even exist on them, let alone have a boolean value.
                } else if ("label" in elem) return elem.disabled === disabled;
                // Remaining elements are neither :enabled nor :disabled
                return false;
            };
        }
        /**
 * Returns a function to use in pseudos for positionals
 * @param {Function} fn
 */ function createPositionalPseudo(fn) {
            return markFunction(function(argument) {
                argument = +argument;
                return markFunction(function(seed, matches) {
                    var j, matchIndexes = fn([], seed.length, argument), i = matchIndexes.length;
                    // Match elements found at the specified indexes
                    while(i--)if (seed[j = matchIndexes[i]]) seed[j] = !(matches[j] = seed[j]);
                });
            });
        }
        /**
 * Checks a node for validity as a Sizzle context
 * @param {Element|Object=} context
 * @returns {Element|Object|Boolean} The input node if acceptable, otherwise a falsy value
 */ function testContext(context) {
            return context && typeof context.getElementsByTagName !== "undefined" && context;
        }
        // Expose support vars for convenience
        support = Sizzle.support = {};
        /**
 * Detects XML nodes
 * @param {Element|Object} elem An element or a document
 * @returns {Boolean} True iff elem is a non-HTML XML node
 */ isXML = Sizzle.isXML = function(elem) {
            // documentElement is verified for cases where it doesn't yet exist
            // (such as loading iframes in IE - #4833)
            var documentElement = elem && (elem.ownerDocument || elem).documentElement;
            return documentElement ? documentElement.nodeName !== "HTML" : false;
        };
        /**
 * Sets document-related variables once based on the current document
 * @param {Element|Object} [doc] An element or document object to use to set the document
 * @returns {Object} Returns the current document
 */ setDocument = Sizzle.setDocument = function(node) {
            var hasCompare, subWindow, doc = node ? node.ownerDocument || node : preferredDoc;
            // Return early if doc is invalid or already selected
            if (doc === document || doc.nodeType !== 9 || !doc.documentElement) return document;
            // Update global variables
            document = doc;
            docElem = document.documentElement;
            documentIsHTML = !isXML(document);
            // Support: IE 9-11, Edge
            // Accessing iframe documents after unload throws "permission denied" errors (jQuery #13936)
            if (preferredDoc !== document && (subWindow = document.defaultView) && subWindow.top !== subWindow) {
                // Support: IE 11, Edge
                if (subWindow.addEventListener) subWindow.addEventListener("unload", unloadHandler, false);
                else if (subWindow.attachEvent) subWindow.attachEvent("onunload", unloadHandler);
            }
            /* Attributes
	---------------------------------------------------------------------- */ // Support: IE<8
            // Verify that getAttribute really returns attributes and not properties
            // (excepting IE8 booleans)
            support.attributes = assert(function(el) {
                el.className = "i";
                return !el.getAttribute("className");
            });
            /* getElement(s)By*
	---------------------------------------------------------------------- */ // Check if getElementsByTagName("*") returns only elements
            support.getElementsByTagName = assert(function(el) {
                el.appendChild(document.createComment(""));
                return !el.getElementsByTagName("*").length;
            });
            // Support: IE<9
            support.getElementsByClassName = rnative.test(document.getElementsByClassName);
            // Support: IE<10
            // Check if getElementById returns elements by name
            // The broken getElementById methods don't pick up programmatically-set names,
            // so use a roundabout getElementsByName test
            support.getById = assert(function(el) {
                docElem.appendChild(el).id = expando;
                return !document.getElementsByName || !document.getElementsByName(expando).length;
            });
            // ID filter and find
            if (support.getById) {
                Expr.filter["ID"] = function(id) {
                    var attrId = id.replace(runescape, funescape);
                    return function(elem) {
                        return elem.getAttribute("id") === attrId;
                    };
                };
                Expr.find["ID"] = function(id, context) {
                    if (typeof context.getElementById !== "undefined" && documentIsHTML) {
                        var elem = context.getElementById(id);
                        return elem ? [
                            elem
                        ] : [];
                    }
                };
            } else {
                Expr.filter["ID"] = function(id) {
                    var attrId = id.replace(runescape, funescape);
                    return function(elem) {
                        var node = typeof elem.getAttributeNode !== "undefined" && elem.getAttributeNode("id");
                        return node && node.value === attrId;
                    };
                };
                // Support: IE 6 - 7 only
                // getElementById is not reliable as a find shortcut
                Expr.find["ID"] = function(id, context) {
                    if (typeof context.getElementById !== "undefined" && documentIsHTML) {
                        var node, i, elems, elem = context.getElementById(id);
                        if (elem) {
                            // Verify the id attribute
                            node = elem.getAttributeNode("id");
                            if (node && node.value === id) return [
                                elem
                            ];
                            // Fall back on getElementsByName
                            elems = context.getElementsByName(id);
                            i = 0;
                            while(elem = elems[i++]){
                                node = elem.getAttributeNode("id");
                                if (node && node.value === id) return [
                                    elem
                                ];
                            }
                        }
                        return [];
                    }
                };
            }
            // Tag
            Expr.find["TAG"] = support.getElementsByTagName ? function(tag, context) {
                if (typeof context.getElementsByTagName !== "undefined") return context.getElementsByTagName(tag);
                else if (support.qsa) return context.querySelectorAll(tag);
            } : function(tag, context) {
                var elem, tmp = [], i = 0, // By happy coincidence, a (broken) gEBTN appears on DocumentFragment nodes too
                results = context.getElementsByTagName(tag);
                // Filter out possible comments
                if (tag === "*") {
                    while(elem = results[i++])if (elem.nodeType === 1) tmp.push(elem);
                    return tmp;
                }
                return results;
            };
            // Class
            Expr.find["CLASS"] = support.getElementsByClassName && function(className, context) {
                if (typeof context.getElementsByClassName !== "undefined" && documentIsHTML) return context.getElementsByClassName(className);
            };
            /* QSA/matchesSelector
	---------------------------------------------------------------------- */ // QSA and matchesSelector support
            // matchesSelector(:active) reports false when true (IE9/Opera 11.5)
            rbuggyMatches = [];
            // qSa(:focus) reports false when true (Chrome 21)
            // We allow this because of a bug in IE8/9 that throws an error
            // whenever `document.activeElement` is accessed on an iframe
            // So, we allow :focus to pass through QSA all the time to avoid the IE error
            // See https://bugs.jquery.com/ticket/13378
            rbuggyQSA = [];
            if (support.qsa = rnative.test(document.querySelectorAll)) {
                // Build QSA regex
                // Regex strategy adopted from Diego Perini
                assert(function(el) {
                    // Select is set to empty string on purpose
                    // This is to test IE's treatment of not explicitly
                    // setting a boolean content attribute,
                    // since its presence should be enough
                    // https://bugs.jquery.com/ticket/12359
                    docElem.appendChild(el).innerHTML = "<a id='" + expando + "'></a>" + "<select id='" + expando + "-\r\\' msallowcapture=''>" + "<option selected=''></option></select>";
                    // Support: IE8, Opera 11-12.16
                    // Nothing should be selected when empty strings follow ^= or $= or *=
                    // The test attribute must be unknown in Opera but "safe" for WinRT
                    // https://msdn.microsoft.com/en-us/library/ie/hh465388.aspx#attribute_section
                    if (el.querySelectorAll("[msallowcapture^='']").length) rbuggyQSA.push("[*^$]=" + whitespace + "*(?:''|\"\")");
                    // Support: IE8
                    // Boolean attributes and "value" are not treated correctly
                    if (!el.querySelectorAll("[selected]").length) rbuggyQSA.push("\\[" + whitespace + "*(?:value|" + booleans + ")");
                    // Support: Chrome<29, Android<4.4, Safari<7.0+, iOS<7.0+, PhantomJS<1.9.8+
                    if (!el.querySelectorAll("[id~=" + expando + "-]").length) rbuggyQSA.push("~=");
                    // Webkit/Opera - :checked should return selected option elements
                    // http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
                    // IE8 throws error here and will not see later tests
                    if (!el.querySelectorAll(":checked").length) rbuggyQSA.push(":checked");
                    // Support: Safari 8+, iOS 8+
                    // https://bugs.webkit.org/show_bug.cgi?id=136851
                    // In-page `selector#id sibling-combinator selector` fails
                    if (!el.querySelectorAll("a#" + expando + "+*").length) rbuggyQSA.push(".#.+[+~]");
                });
                assert(function(el) {
                    el.innerHTML = "<a href='' disabled='disabled'></a><select disabled='disabled'><option/></select>";
                    // Support: Windows 8 Native Apps
                    // The type and name attributes are restricted during .innerHTML assignment
                    var input = document.createElement("input");
                    input.setAttribute("type", "hidden");
                    el.appendChild(input).setAttribute("name", "D");
                    // Support: IE8
                    // Enforce case-sensitivity of name attribute
                    if (el.querySelectorAll("[name=d]").length) rbuggyQSA.push("name" + whitespace + "*[*^$|!~]?=");
                    // FF 3.5 - :enabled/:disabled and hidden elements (hidden elements are still enabled)
                    // IE8 throws error here and will not see later tests
                    if (el.querySelectorAll(":enabled").length !== 2) rbuggyQSA.push(":enabled", ":disabled");
                    // Support: IE9-11+
                    // IE's :disabled selector does not pick up the children of disabled fieldsets
                    docElem.appendChild(el).disabled = true;
                    if (el.querySelectorAll(":disabled").length !== 2) rbuggyQSA.push(":enabled", ":disabled");
                    // Opera 10-11 does not throw on post-comma invalid pseudos
                    el.querySelectorAll("*,:x");
                    rbuggyQSA.push(",.*:");
                });
            }
            if (support.matchesSelector = rnative.test(matches = docElem.matches || docElem.webkitMatchesSelector || docElem.mozMatchesSelector || docElem.oMatchesSelector || docElem.msMatchesSelector)) assert(function(el) {
                // Check to see if it's possible to do matchesSelector
                // on a disconnected node (IE 9)
                support.disconnectedMatch = matches.call(el, "*");
                // This should fail with an exception
                // Gecko does not error, returns false instead
                matches.call(el, "[s!='']:x");
                rbuggyMatches.push("!=", pseudos);
            });
            rbuggyQSA = rbuggyQSA.length && new RegExp(rbuggyQSA.join("|"));
            rbuggyMatches = rbuggyMatches.length && new RegExp(rbuggyMatches.join("|"));
            /* Contains
	---------------------------------------------------------------------- */ hasCompare = rnative.test(docElem.compareDocumentPosition);
            // Element contains another
            // Purposefully self-exclusive
            // As in, an element does not contain itself
            contains = hasCompare || rnative.test(docElem.contains) ? function(a, b) {
                var adown = a.nodeType === 9 ? a.documentElement : a, bup = b && b.parentNode;
                return a === bup || !!(bup && bup.nodeType === 1 && (adown.contains ? adown.contains(bup) : a.compareDocumentPosition && a.compareDocumentPosition(bup) & 16));
            } : function(a, b) {
                if (b) while(b = b.parentNode){
                    if (b === a) return true;
                }
                return false;
            };
            /* Sorting
	---------------------------------------------------------------------- */ // Document order sorting
            sortOrder = hasCompare ? function(a, b) {
                // Flag for duplicate removal
                if (a === b) {
                    hasDuplicate = true;
                    return 0;
                }
                // Sort on method existence if only one input has compareDocumentPosition
                var compare = !a.compareDocumentPosition - !b.compareDocumentPosition;
                if (compare) return compare;
                // Calculate position if both inputs belong to the same document
                compare = (a.ownerDocument || a) === (b.ownerDocument || b) ? a.compareDocumentPosition(b) : // Otherwise we know they are disconnected
                1;
                // Disconnected nodes
                if (compare & 1 || !support.sortDetached && b.compareDocumentPosition(a) === compare) {
                    // Choose the first element that is related to our preferred document
                    if (a === document || a.ownerDocument === preferredDoc && contains(preferredDoc, a)) return -1;
                    if (b === document || b.ownerDocument === preferredDoc && contains(preferredDoc, b)) return 1;
                    // Maintain original order
                    return sortInput ? indexOf(sortInput, a) - indexOf(sortInput, b) : 0;
                }
                return compare & 4 ? -1 : 1;
            } : function(a, b) {
                // Exit early if the nodes are identical
                if (a === b) {
                    hasDuplicate = true;
                    return 0;
                }
                var cur, i = 0, aup = a.parentNode, bup = b.parentNode, ap = [
                    a
                ], bp = [
                    b
                ];
                // Parentless nodes are either documents or disconnected
                if (!aup || !bup) return a === document ? -1 : b === document ? 1 : aup ? -1 : bup ? 1 : sortInput ? indexOf(sortInput, a) - indexOf(sortInput, b) : 0;
                else if (aup === bup) return siblingCheck(a, b);
                // Otherwise we need full lists of their ancestors for comparison
                cur = a;
                while(cur = cur.parentNode)ap.unshift(cur);
                cur = b;
                while(cur = cur.parentNode)bp.unshift(cur);
                // Walk down the tree looking for a discrepancy
                while(ap[i] === bp[i])i++;
                return i ? // Do a sibling check if the nodes have a common ancestor
                siblingCheck(ap[i], bp[i]) : // Otherwise nodes in our document sort first
                ap[i] === preferredDoc ? -1 : bp[i] === preferredDoc ? 1 : 0;
            };
            return document;
        };
        Sizzle.matches = function(expr, elements) {
            return Sizzle(expr, null, null, elements);
        };
        Sizzle.matchesSelector = function(elem, expr) {
            // Set document vars if needed
            if ((elem.ownerDocument || elem) !== document) setDocument(elem);
            // Make sure that attribute selectors are quoted
            expr = expr.replace(rattributeQuotes, "='$1']");
            if (support.matchesSelector && documentIsHTML && !compilerCache[expr + " "] && (!rbuggyMatches || !rbuggyMatches.test(expr)) && (!rbuggyQSA || !rbuggyQSA.test(expr))) try {
                var ret = matches.call(elem, expr);
                // IE 9's matchesSelector returns false on disconnected nodes
                if (ret || support.disconnectedMatch || // As well, disconnected nodes are said to be in a document
                // fragment in IE 9
                elem.document && elem.document.nodeType !== 11) return ret;
            } catch (e) {}
            return Sizzle(expr, document, null, [
                elem
            ]).length > 0;
        };
        Sizzle.contains = function(context, elem) {
            // Set document vars if needed
            if ((context.ownerDocument || context) !== document) setDocument(context);
            return contains(context, elem);
        };
        Sizzle.attr = function(elem, name) {
            // Set document vars if needed
            if ((elem.ownerDocument || elem) !== document) setDocument(elem);
            var fn = Expr.attrHandle[name.toLowerCase()], // Don't get fooled by Object.prototype properties (jQuery #13807)
            val = fn && hasOwn.call(Expr.attrHandle, name.toLowerCase()) ? fn(elem, name, !documentIsHTML) : undefined;
            return val !== undefined ? val : support.attributes || !documentIsHTML ? elem.getAttribute(name) : (val = elem.getAttributeNode(name)) && val.specified ? val.value : null;
        };
        Sizzle.escape = function(sel) {
            return (sel + "").replace(rcssescape, fcssescape);
        };
        Sizzle.error = function(msg) {
            throw new Error("Syntax error, unrecognized expression: " + msg);
        };
        /**
 * Document sorting and removing duplicates
 * @param {ArrayLike} results
 */ Sizzle.uniqueSort = function(results) {
            var elem, duplicates = [], j = 0, i = 0;
            // Unless we *know* we can detect duplicates, assume their presence
            hasDuplicate = !support.detectDuplicates;
            sortInput = !support.sortStable && results.slice(0);
            results.sort(sortOrder);
            if (hasDuplicate) {
                while(elem = results[i++])if (elem === results[i]) j = duplicates.push(i);
                while(j--)results.splice(duplicates[j], 1);
            }
            // Clear input after sorting to release objects
            // See https://github.com/jquery/sizzle/pull/225
            sortInput = null;
            return results;
        };
        /**
 * Utility function for retrieving the text value of an array of DOM nodes
 * @param {Array|Element} elem
 */ getText = Sizzle.getText = function(elem) {
            var node, ret = "", i = 0, nodeType = elem.nodeType;
            if (!nodeType) // If no nodeType, this is expected to be an array
            while(node = elem[i++])// Do not traverse comment nodes
            ret += getText(node);
            else if (nodeType === 1 || nodeType === 9 || nodeType === 11) {
                // Use textContent for elements
                // innerText usage removed for consistency of new lines (jQuery #11153)
                if (typeof elem.textContent === "string") return elem.textContent;
                else // Traverse its children
                for(elem = elem.firstChild; elem; elem = elem.nextSibling)ret += getText(elem);
            } else if (nodeType === 3 || nodeType === 4) return elem.nodeValue;
            // Do not include comment or processing instruction nodes
            return ret;
        };
        Expr = Sizzle.selectors = {
            // Can be adjusted by the user
            cacheLength: 50,
            createPseudo: markFunction,
            match: matchExpr,
            attrHandle: {},
            find: {},
            relative: {
                ">": {
                    dir: "parentNode",
                    first: true
                },
                " ": {
                    dir: "parentNode"
                },
                "+": {
                    dir: "previousSibling",
                    first: true
                },
                "~": {
                    dir: "previousSibling"
                }
            },
            preFilter: {
                "ATTR": function(match) {
                    match[1] = match[1].replace(runescape, funescape);
                    // Move the given value to match[3] whether quoted or unquoted
                    match[3] = (match[3] || match[4] || match[5] || "").replace(runescape, funescape);
                    if (match[2] === "~=") match[3] = " " + match[3] + " ";
                    return match.slice(0, 4);
                },
                "CHILD": function(match) {
                    /* matches from matchExpr["CHILD"]
				1 type (only|nth|...)
				2 what (child|of-type)
				3 argument (even|odd|\d*|\d*n([+-]\d+)?|...)
				4 xn-component of xn+y argument ([+-]?\d*n|)
				5 sign of xn-component
				6 x of xn-component
				7 sign of y-component
				8 y of y-component
			*/ match[1] = match[1].toLowerCase();
                    if (match[1].slice(0, 3) === "nth") {
                        // nth-* requires argument
                        if (!match[3]) Sizzle.error(match[0]);
                        // numeric x and y parameters for Expr.filter.CHILD
                        // remember that false/true cast respectively to 0/1
                        match[4] = +(match[4] ? match[5] + (match[6] || 1) : 2 * (match[3] === "even" || match[3] === "odd"));
                        match[5] = +(match[7] + match[8] || match[3] === "odd");
                    // other types prohibit arguments
                    } else if (match[3]) Sizzle.error(match[0]);
                    return match;
                },
                "PSEUDO": function(match) {
                    var excess, unquoted = !match[6] && match[2];
                    if (matchExpr["CHILD"].test(match[0])) return null;
                    // Accept quoted arguments as-is
                    if (match[3]) match[2] = match[4] || match[5] || "";
                    else if (unquoted && rpseudo.test(unquoted) && // Get excess from tokenize (recursively)
                    (excess = tokenize(unquoted, true)) && // advance to the next closing parenthesis
                    (excess = unquoted.indexOf(")", unquoted.length - excess) - unquoted.length)) {
                        // excess is a negative index
                        match[0] = match[0].slice(0, excess);
                        match[2] = unquoted.slice(0, excess);
                    }
                    // Return only captures needed by the pseudo filter method (type and argument)
                    return match.slice(0, 3);
                }
            },
            filter: {
                "TAG": function(nodeNameSelector) {
                    var nodeName = nodeNameSelector.replace(runescape, funescape).toLowerCase();
                    return nodeNameSelector === "*" ? function() {
                        return true;
                    } : function(elem) {
                        return elem.nodeName && elem.nodeName.toLowerCase() === nodeName;
                    };
                },
                "CLASS": function(className) {
                    var pattern = classCache[className + " "];
                    return pattern || (pattern = new RegExp("(^|" + whitespace + ")" + className + "(" + whitespace + "|$)"), classCache(className, function(elem) {
                        return pattern.test(typeof elem.className === "string" && elem.className || typeof elem.getAttribute !== "undefined" && elem.getAttribute("class") || "");
                    }));
                },
                "ATTR": function(name, operator, check) {
                    return function(elem) {
                        var result = Sizzle.attr(elem, name);
                        if (result == null) return operator === "!=";
                        if (!operator) return true;
                        result += "";
                        return operator === "=" ? result === check : operator === "!=" ? result !== check : operator === "^=" ? check && result.indexOf(check) === 0 : operator === "*=" ? check && result.indexOf(check) > -1 : operator === "$=" ? check && result.slice(-check.length) === check : operator === "~=" ? (" " + result.replace(rwhitespace, " ") + " ").indexOf(check) > -1 : operator === "|=" ? result === check || result.slice(0, check.length + 1) === check + "-" : false;
                    };
                },
                "CHILD": function(type, what, argument, first, last) {
                    var simple = type.slice(0, 3) !== "nth", forward = type.slice(-4) !== "last", ofType = what === "of-type";
                    return first === 1 && last === 0 ? // Shortcut for :nth-*(n)
                    function(elem) {
                        return !!elem.parentNode;
                    } : function(elem, context, xml) {
                        var cache, uniqueCache, outerCache, node, nodeIndex, start, dir = simple !== forward ? "nextSibling" : "previousSibling", parent = elem.parentNode, name = ofType && elem.nodeName.toLowerCase(), useCache = !xml && !ofType, diff = false;
                        if (parent) {
                            // :(first|last|only)-(child|of-type)
                            if (simple) {
                                while(dir){
                                    node = elem;
                                    while(node = node[dir]){
                                        if (ofType ? node.nodeName.toLowerCase() === name : node.nodeType === 1) return false;
                                    }
                                    // Reverse direction for :only-* (if we haven't yet done so)
                                    start = dir = type === "only" && !start && "nextSibling";
                                }
                                return true;
                            }
                            start = [
                                forward ? parent.firstChild : parent.lastChild
                            ];
                            // non-xml :nth-child(...) stores cache data on `parent`
                            if (forward && useCache) {
                                // Seek `elem` from a previously-cached index
                                // ...in a gzip-friendly way
                                node = parent;
                                outerCache = node[expando] || (node[expando] = {});
                                // Support: IE <9 only
                                // Defend against cloned attroperties (jQuery gh-1709)
                                uniqueCache = outerCache[node.uniqueID] || (outerCache[node.uniqueID] = {});
                                cache = uniqueCache[type] || [];
                                nodeIndex = cache[0] === dirruns && cache[1];
                                diff = nodeIndex && cache[2];
                                node = nodeIndex && parent.childNodes[nodeIndex];
                                while(node = ++nodeIndex && node && node[dir] || // Fallback to seeking `elem` from the start
                                (diff = nodeIndex = 0) || start.pop())// When found, cache indexes on `parent` and break
                                if (node.nodeType === 1 && ++diff && node === elem) {
                                    uniqueCache[type] = [
                                        dirruns,
                                        nodeIndex,
                                        diff
                                    ];
                                    break;
                                }
                            } else {
                                // Use previously-cached element index if available
                                if (useCache) {
                                    // ...in a gzip-friendly way
                                    node = elem;
                                    outerCache = node[expando] || (node[expando] = {});
                                    // Support: IE <9 only
                                    // Defend against cloned attroperties (jQuery gh-1709)
                                    uniqueCache = outerCache[node.uniqueID] || (outerCache[node.uniqueID] = {});
                                    cache = uniqueCache[type] || [];
                                    nodeIndex = cache[0] === dirruns && cache[1];
                                    diff = nodeIndex;
                                }
                                // xml :nth-child(...)
                                // or :nth-last-child(...) or :nth(-last)?-of-type(...)
                                if (diff === false) {
                                    // Use the same loop as above to seek `elem` from the start
                                    while(node = ++nodeIndex && node && node[dir] || (diff = nodeIndex = 0) || start.pop())if ((ofType ? node.nodeName.toLowerCase() === name : node.nodeType === 1) && ++diff) {
                                        // Cache the index of each encountered element
                                        if (useCache) {
                                            outerCache = node[expando] || (node[expando] = {});
                                            // Support: IE <9 only
                                            // Defend against cloned attroperties (jQuery gh-1709)
                                            uniqueCache = outerCache[node.uniqueID] || (outerCache[node.uniqueID] = {});
                                            uniqueCache[type] = [
                                                dirruns,
                                                diff
                                            ];
                                        }
                                        if (node === elem) break;
                                    }
                                }
                            }
                            // Incorporate the offset, then check against cycle size
                            diff -= last;
                            return diff === first || diff % first === 0 && diff / first >= 0;
                        }
                    };
                },
                "PSEUDO": function(pseudo, argument) {
                    // pseudo-class names are case-insensitive
                    // http://www.w3.org/TR/selectors/#pseudo-classes
                    // Prioritize by case sensitivity in case custom pseudos are added with uppercase letters
                    // Remember that setFilters inherits from pseudos
                    var args, fn = Expr.pseudos[pseudo] || Expr.setFilters[pseudo.toLowerCase()] || Sizzle.error("unsupported pseudo: " + pseudo);
                    // The user may use createPseudo to indicate that
                    // arguments are needed to create the filter function
                    // just as Sizzle does
                    if (fn[expando]) return fn(argument);
                    // But maintain support for old signatures
                    if (fn.length > 1) {
                        args = [
                            pseudo,
                            pseudo,
                            "",
                            argument
                        ];
                        return Expr.setFilters.hasOwnProperty(pseudo.toLowerCase()) ? markFunction(function(seed, matches) {
                            var idx, matched = fn(seed, argument), i = matched.length;
                            while(i--){
                                idx = indexOf(seed, matched[i]);
                                seed[idx] = !(matches[idx] = matched[i]);
                            }
                        }) : function(elem) {
                            return fn(elem, 0, args);
                        };
                    }
                    return fn;
                }
            },
            pseudos: {
                // Potentially complex pseudos
                "not": markFunction(function(selector) {
                    // Trim the selector passed to compile
                    // to avoid treating leading and trailing
                    // spaces as combinators
                    var input = [], results = [], matcher = compile(selector.replace(rtrim, "$1"));
                    return matcher[expando] ? markFunction(function(seed, matches, context, xml) {
                        var elem, unmatched = matcher(seed, null, xml, []), i = seed.length;
                        // Match elements unmatched by `matcher`
                        while(i--)if (elem = unmatched[i]) seed[i] = !(matches[i] = elem);
                    }) : function(elem, context, xml) {
                        input[0] = elem;
                        matcher(input, null, xml, results);
                        // Don't keep the element (issue #299)
                        input[0] = null;
                        return !results.pop();
                    };
                }),
                "has": markFunction(function(selector) {
                    return function(elem) {
                        return Sizzle(selector, elem).length > 0;
                    };
                }),
                "contains": markFunction(function(text) {
                    text = text.replace(runescape, funescape);
                    return function(elem) {
                        return (elem.textContent || elem.innerText || getText(elem)).indexOf(text) > -1;
                    };
                }),
                // "Whether an element is represented by a :lang() selector
                // is based solely on the element's language value
                // being equal to the identifier C,
                // or beginning with the identifier C immediately followed by "-".
                // The matching of C against the element's language value is performed case-insensitively.
                // The identifier C does not have to be a valid language name."
                // http://www.w3.org/TR/selectors/#lang-pseudo
                "lang": markFunction(function(lang) {
                    // lang value must be a valid identifier
                    if (!ridentifier.test(lang || "")) Sizzle.error("unsupported lang: " + lang);
                    lang = lang.replace(runescape, funescape).toLowerCase();
                    return function(elem) {
                        var elemLang;
                        do if (elemLang = documentIsHTML ? elem.lang : elem.getAttribute("xml:lang") || elem.getAttribute("lang")) {
                            elemLang = elemLang.toLowerCase();
                            return elemLang === lang || elemLang.indexOf(lang + "-") === 0;
                        }
                        while ((elem = elem.parentNode) && elem.nodeType === 1);
                        return false;
                    };
                }),
                // Miscellaneous
                "target": function(elem) {
                    var hash = window1.location && window1.location.hash;
                    return hash && hash.slice(1) === elem.id;
                },
                "root": function(elem) {
                    return elem === docElem;
                },
                "focus": function(elem) {
                    return elem === document.activeElement && (!document.hasFocus || document.hasFocus()) && !!(elem.type || elem.href || ~elem.tabIndex);
                },
                // Boolean properties
                "enabled": createDisabledPseudo(false),
                "disabled": createDisabledPseudo(true),
                "checked": function(elem) {
                    // In CSS3, :checked should return both checked and selected elements
                    // http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
                    var nodeName = elem.nodeName.toLowerCase();
                    return nodeName === "input" && !!elem.checked || nodeName === "option" && !!elem.selected;
                },
                "selected": function(elem) {
                    // Accessing this property makes selected-by-default
                    // options in Safari work properly
                    if (elem.parentNode) elem.parentNode.selectedIndex;
                    return elem.selected === true;
                },
                // Contents
                "empty": function(elem) {
                    // http://www.w3.org/TR/selectors/#empty-pseudo
                    // :empty is negated by element (1) or content nodes (text: 3; cdata: 4; entity ref: 5),
                    //   but not by others (comment: 8; processing instruction: 7; etc.)
                    // nodeType < 6 works because attributes (2) do not appear as children
                    for(elem = elem.firstChild; elem; elem = elem.nextSibling){
                        if (elem.nodeType < 6) return false;
                    }
                    return true;
                },
                "parent": function(elem) {
                    return !Expr.pseudos["empty"](elem);
                },
                // Element/input types
                "header": function(elem) {
                    return rheader.test(elem.nodeName);
                },
                "input": function(elem) {
                    return rinputs.test(elem.nodeName);
                },
                "button": function(elem) {
                    var name = elem.nodeName.toLowerCase();
                    return name === "input" && elem.type === "button" || name === "button";
                },
                "text": function(elem) {
                    var attr;
                    return elem.nodeName.toLowerCase() === "input" && elem.type === "text" && // Support: IE<8
                    // New HTML5 attribute values (e.g., "search") appear with elem.type === "text"
                    ((attr = elem.getAttribute("type")) == null || attr.toLowerCase() === "text");
                },
                // Position-in-collection
                "first": createPositionalPseudo(function() {
                    return [
                        0
                    ];
                }),
                "last": createPositionalPseudo(function(matchIndexes, length) {
                    return [
                        length - 1
                    ];
                }),
                "eq": createPositionalPseudo(function(matchIndexes, length, argument) {
                    return [
                        argument < 0 ? argument + length : argument
                    ];
                }),
                "even": createPositionalPseudo(function(matchIndexes, length) {
                    var i = 0;
                    for(; i < length; i += 2)matchIndexes.push(i);
                    return matchIndexes;
                }),
                "odd": createPositionalPseudo(function(matchIndexes, length) {
                    var i = 1;
                    for(; i < length; i += 2)matchIndexes.push(i);
                    return matchIndexes;
                }),
                "lt": createPositionalPseudo(function(matchIndexes, length, argument) {
                    var i = argument < 0 ? argument + length : argument;
                    for(; --i >= 0;)matchIndexes.push(i);
                    return matchIndexes;
                }),
                "gt": createPositionalPseudo(function(matchIndexes, length, argument) {
                    var i = argument < 0 ? argument + length : argument;
                    for(; ++i < length;)matchIndexes.push(i);
                    return matchIndexes;
                })
            }
        };
        Expr.pseudos["nth"] = Expr.pseudos["eq"];
        // Add button/input type pseudos
        for(i in {
            radio: true,
            checkbox: true,
            file: true,
            password: true,
            image: true
        })Expr.pseudos[i] = createInputPseudo(i);
        for(i in {
            submit: true,
            reset: true
        })Expr.pseudos[i] = createButtonPseudo(i);
        // Easy API for creating new setFilters
        function setFilters() {}
        setFilters.prototype = Expr.filters = Expr.pseudos;
        Expr.setFilters = new setFilters();
        tokenize = Sizzle.tokenize = function(selector, parseOnly) {
            var matched, match, tokens, type, soFar, groups, preFilters, cached = tokenCache[selector + " "];
            if (cached) return parseOnly ? 0 : cached.slice(0);
            soFar = selector;
            groups = [];
            preFilters = Expr.preFilter;
            while(soFar){
                // Comma and first run
                if (!matched || (match = rcomma.exec(soFar))) {
                    if (match) // Don't consume trailing commas as valid
                    soFar = soFar.slice(match[0].length) || soFar;
                    groups.push(tokens = []);
                }
                matched = false;
                // Combinators
                if (match = rcombinators.exec(soFar)) {
                    matched = match.shift();
                    tokens.push({
                        value: matched,
                        // Cast descendant combinators to space
                        type: match[0].replace(rtrim, " ")
                    });
                    soFar = soFar.slice(matched.length);
                }
                // Filters
                for(type in Expr.filter)if ((match = matchExpr[type].exec(soFar)) && (!preFilters[type] || (match = preFilters[type](match)))) {
                    matched = match.shift();
                    tokens.push({
                        value: matched,
                        type: type,
                        matches: match
                    });
                    soFar = soFar.slice(matched.length);
                }
                if (!matched) break;
            }
            // Return the length of the invalid excess
            // if we're just parsing
            // Otherwise, throw an error or return tokens
            return parseOnly ? soFar.length : soFar ? Sizzle.error(selector) : // Cache the tokens
            tokenCache(selector, groups).slice(0);
        };
        function toSelector(tokens) {
            var i = 0, len = tokens.length, selector = "";
            for(; i < len; i++)selector += tokens[i].value;
            return selector;
        }
        function addCombinator(matcher, combinator, base) {
            var dir = combinator.dir, skip = combinator.next, key = skip || dir, checkNonElements = base && key === "parentNode", doneName = done++;
            return combinator.first ? // Check against closest ancestor/preceding element
            function(elem, context, xml) {
                while(elem = elem[dir]){
                    if (elem.nodeType === 1 || checkNonElements) return matcher(elem, context, xml);
                }
                return false;
            } : // Check against all ancestor/preceding elements
            function(elem, context, xml) {
                var oldCache, uniqueCache, outerCache, newCache = [
                    dirruns,
                    doneName
                ];
                // We can't set arbitrary data on XML nodes, so they don't benefit from combinator caching
                if (xml) {
                    while(elem = elem[dir])if (elem.nodeType === 1 || checkNonElements) {
                        if (matcher(elem, context, xml)) return true;
                    }
                } else {
                    while(elem = elem[dir])if (elem.nodeType === 1 || checkNonElements) {
                        outerCache = elem[expando] || (elem[expando] = {});
                        // Support: IE <9 only
                        // Defend against cloned attroperties (jQuery gh-1709)
                        uniqueCache = outerCache[elem.uniqueID] || (outerCache[elem.uniqueID] = {});
                        if (skip && skip === elem.nodeName.toLowerCase()) elem = elem[dir] || elem;
                        else if ((oldCache = uniqueCache[key]) && oldCache[0] === dirruns && oldCache[1] === doneName) // Assign to newCache so results back-propagate to previous elements
                        return newCache[2] = oldCache[2];
                        else {
                            // Reuse newcache so results back-propagate to previous elements
                            uniqueCache[key] = newCache;
                            // A match means we're done; a fail means we have to keep checking
                            if (newCache[2] = matcher(elem, context, xml)) return true;
                        }
                    }
                }
                return false;
            };
        }
        function elementMatcher(matchers) {
            return matchers.length > 1 ? function(elem, context, xml) {
                var i = matchers.length;
                while(i--){
                    if (!matchers[i](elem, context, xml)) return false;
                }
                return true;
            } : matchers[0];
        }
        function multipleContexts(selector, contexts, results) {
            var i = 0, len = contexts.length;
            for(; i < len; i++)Sizzle(selector, contexts[i], results);
            return results;
        }
        function condense(unmatched, map, filter, context, xml) {
            var elem, newUnmatched = [], i = 0, len = unmatched.length, mapped = map != null;
            for(; i < len; i++){
                if (elem = unmatched[i]) {
                    if (!filter || filter(elem, context, xml)) {
                        newUnmatched.push(elem);
                        if (mapped) map.push(i);
                    }
                }
            }
            return newUnmatched;
        }
        function setMatcher(preFilter, selector, matcher, postFilter, postFinder, postSelector) {
            if (postFilter && !postFilter[expando]) postFilter = setMatcher(postFilter);
            if (postFinder && !postFinder[expando]) postFinder = setMatcher(postFinder, postSelector);
            return markFunction(function(seed, results, context, xml) {
                var temp, i, elem, preMap = [], postMap = [], preexisting = results.length, // Get initial elements from seed or context
                elems = seed || multipleContexts(selector || "*", context.nodeType ? [
                    context
                ] : context, []), // Prefilter to get matcher input, preserving a map for seed-results synchronization
                matcherIn = preFilter && (seed || !selector) ? condense(elems, preMap, preFilter, context, xml) : elems, matcherOut = matcher ? // If we have a postFinder, or filtered seed, or non-seed postFilter or preexisting results,
                postFinder || (seed ? preFilter : preexisting || postFilter) ? // ...intermediate processing is necessary
                [] : // ...otherwise use results directly
                results : matcherIn;
                // Find primary matches
                if (matcher) matcher(matcherIn, matcherOut, context, xml);
                // Apply postFilter
                if (postFilter) {
                    temp = condense(matcherOut, postMap);
                    postFilter(temp, [], context, xml);
                    // Un-match failing elements by moving them back to matcherIn
                    i = temp.length;
                    while(i--)if (elem = temp[i]) matcherOut[postMap[i]] = !(matcherIn[postMap[i]] = elem);
                }
                if (seed) {
                    if (postFinder || preFilter) {
                        if (postFinder) {
                            // Get the final matcherOut by condensing this intermediate into postFinder contexts
                            temp = [];
                            i = matcherOut.length;
                            while(i--)if (elem = matcherOut[i]) // Restore matcherIn since elem is not yet a final match
                            temp.push(matcherIn[i] = elem);
                            postFinder(null, matcherOut = [], temp, xml);
                        }
                        // Move matched elements from seed to results to keep them synchronized
                        i = matcherOut.length;
                        while(i--)if ((elem = matcherOut[i]) && (temp = postFinder ? indexOf(seed, elem) : preMap[i]) > -1) seed[temp] = !(results[temp] = elem);
                    }
                } else {
                    matcherOut = condense(matcherOut === results ? matcherOut.splice(preexisting, matcherOut.length) : matcherOut);
                    if (postFinder) postFinder(null, results, matcherOut, xml);
                    else push.apply(results, matcherOut);
                }
            });
        }
        function matcherFromTokens(tokens) {
            var checkContext, matcher, j, len = tokens.length, leadingRelative = Expr.relative[tokens[0].type], implicitRelative = leadingRelative || Expr.relative[" "], i = leadingRelative ? 1 : 0, // The foundational matcher ensures that elements are reachable from top-level context(s)
            matchContext = addCombinator(function(elem) {
                return elem === checkContext;
            }, implicitRelative, true), matchAnyContext = addCombinator(function(elem) {
                return indexOf(checkContext, elem) > -1;
            }, implicitRelative, true), matchers = [
                function(elem, context, xml) {
                    var ret = !leadingRelative && (xml || context !== outermostContext) || ((checkContext = context).nodeType ? matchContext(elem, context, xml) : matchAnyContext(elem, context, xml));
                    // Avoid hanging onto element (issue #299)
                    checkContext = null;
                    return ret;
                }
            ];
            for(; i < len; i++)if (matcher = Expr.relative[tokens[i].type]) matchers = [
                addCombinator(elementMatcher(matchers), matcher)
            ];
            else {
                matcher = Expr.filter[tokens[i].type].apply(null, tokens[i].matches);
                // Return special upon seeing a positional matcher
                if (matcher[expando]) {
                    // Find the next relative operator (if any) for proper handling
                    j = ++i;
                    for(; j < len; j++){
                        if (Expr.relative[tokens[j].type]) break;
                    }
                    return setMatcher(i > 1 && elementMatcher(matchers), i > 1 && toSelector(// If the preceding token was a descendant combinator, insert an implicit any-element `*`
                    tokens.slice(0, i - 1).concat({
                        value: tokens[i - 2].type === " " ? "*" : ""
                    })).replace(rtrim, "$1"), matcher, i < j && matcherFromTokens(tokens.slice(i, j)), j < len && matcherFromTokens(tokens = tokens.slice(j)), j < len && toSelector(tokens));
                }
                matchers.push(matcher);
            }
            return elementMatcher(matchers);
        }
        function matcherFromGroupMatchers(elementMatchers, setMatchers) {
            var bySet = setMatchers.length > 0, byElement = elementMatchers.length > 0, superMatcher = function(seed, context, xml, results, outermost) {
                var elem, j, matcher, matchedCount = 0, i = "0", unmatched = seed && [], setMatched = [], contextBackup = outermostContext, // We must always have either seed elements or outermost context
                elems = seed || byElement && Expr.find["TAG"]("*", outermost), // Use integer dirruns iff this is the outermost matcher
                dirrunsUnique = dirruns += contextBackup == null ? 1 : Math.random() || 0.1, len = elems.length;
                if (outermost) outermostContext = context === document || context || outermost;
                // Add elements passing elementMatchers directly to results
                // Support: IE<9, Safari
                // Tolerate NodeList properties (IE: "length"; Safari: <number>) matching elements by id
                for(; i !== len && (elem = elems[i]) != null; i++){
                    if (byElement && elem) {
                        j = 0;
                        if (!context && elem.ownerDocument !== document) {
                            setDocument(elem);
                            xml = !documentIsHTML;
                        }
                        while(matcher = elementMatchers[j++])if (matcher(elem, context || document, xml)) {
                            results.push(elem);
                            break;
                        }
                        if (outermost) dirruns = dirrunsUnique;
                    }
                    // Track unmatched elements for set filters
                    if (bySet) {
                        // They will have gone through all possible matchers
                        if (elem = !matcher && elem) matchedCount--;
                        // Lengthen the array for every element, matched or not
                        if (seed) unmatched.push(elem);
                    }
                }
                // `i` is now the count of elements visited above, and adding it to `matchedCount`
                // makes the latter nonnegative.
                matchedCount += i;
                // Apply set filters to unmatched elements
                // NOTE: This can be skipped if there are no unmatched elements (i.e., `matchedCount`
                // equals `i`), unless we didn't visit _any_ elements in the above loop because we have
                // no element matchers and no seed.
                // Incrementing an initially-string "0" `i` allows `i` to remain a string only in that
                // case, which will result in a "00" `matchedCount` that differs from `i` but is also
                // numerically zero.
                if (bySet && i !== matchedCount) {
                    j = 0;
                    while(matcher = setMatchers[j++])matcher(unmatched, setMatched, context, xml);
                    if (seed) {
                        // Reintegrate element matches to eliminate the need for sorting
                        if (matchedCount > 0) {
                            while(i--)if (!(unmatched[i] || setMatched[i])) setMatched[i] = pop.call(results);
                        }
                        // Discard index placeholder values to get only actual matches
                        setMatched = condense(setMatched);
                    }
                    // Add matches to results
                    push.apply(results, setMatched);
                    // Seedless set matches succeeding multiple successful matchers stipulate sorting
                    if (outermost && !seed && setMatched.length > 0 && matchedCount + setMatchers.length > 1) Sizzle.uniqueSort(results);
                }
                // Override manipulation of globals by nested matchers
                if (outermost) {
                    dirruns = dirrunsUnique;
                    outermostContext = contextBackup;
                }
                return unmatched;
            };
            return bySet ? markFunction(superMatcher) : superMatcher;
        }
        compile = Sizzle.compile = function(selector, match /* Internal Use Only */ ) {
            var i, setMatchers = [], elementMatchers = [], cached = compilerCache[selector + " "];
            if (!cached) {
                // Generate a function of recursive functions that can be used to check each element
                if (!match) match = tokenize(selector);
                i = match.length;
                while(i--){
                    cached = matcherFromTokens(match[i]);
                    if (cached[expando]) setMatchers.push(cached);
                    else elementMatchers.push(cached);
                }
                // Cache the compiled function
                cached = compilerCache(selector, matcherFromGroupMatchers(elementMatchers, setMatchers));
                // Save selector and tokenization
                cached.selector = selector;
            }
            return cached;
        };
        /**
 * A low-level selection function that works with Sizzle's compiled
 *  selector functions
 * @param {String|Function} selector A selector or a pre-compiled
 *  selector function built with Sizzle.compile
 * @param {Element} context
 * @param {Array} [results]
 * @param {Array} [seed] A set of elements to match against
 */ select = Sizzle.select = function(selector, context, results, seed) {
            var i, tokens, token, type, find, compiled = typeof selector === "function" && selector, match = !seed && tokenize(selector = compiled.selector || selector);
            results = results || [];
            // Try to minimize operations if there is only one selector in the list and no seed
            // (the latter of which guarantees us context)
            if (match.length === 1) {
                // Reduce context if the leading compound selector is an ID
                tokens = match[0] = match[0].slice(0);
                if (tokens.length > 2 && (token = tokens[0]).type === "ID" && context.nodeType === 9 && documentIsHTML && Expr.relative[tokens[1].type]) {
                    context = (Expr.find["ID"](token.matches[0].replace(runescape, funescape), context) || [])[0];
                    if (!context) return results;
                    else if (compiled) context = context.parentNode;
                    selector = selector.slice(tokens.shift().value.length);
                }
                // Fetch a seed set for right-to-left matching
                i = matchExpr["needsContext"].test(selector) ? 0 : tokens.length;
                while(i--){
                    token = tokens[i];
                    // Abort if we hit a combinator
                    if (Expr.relative[type = token.type]) break;
                    if (find = Expr.find[type]) // Search, expanding context for leading sibling combinators
                    {
                        if (seed = find(token.matches[0].replace(runescape, funescape), rsibling.test(tokens[0].type) && testContext(context.parentNode) || context)) {
                            // If seed is empty or no tokens remain, we can return early
                            tokens.splice(i, 1);
                            selector = seed.length && toSelector(tokens);
                            if (!selector) {
                                push.apply(results, seed);
                                return results;
                            }
                            break;
                        }
                    }
                }
            }
            // Compile and execute a filtering function if one is not provided
            // Provide `match` to avoid retokenization if we modified the selector above
            (compiled || compile(selector, match))(seed, context, !documentIsHTML, results, !context || rsibling.test(selector) && testContext(context.parentNode) || context);
            return results;
        };
        // One-time assignments
        // Sort stability
        support.sortStable = expando.split("").sort(sortOrder).join("") === expando;
        // Support: Chrome 14-35+
        // Always assume duplicates if they aren't passed to the comparison function
        support.detectDuplicates = !!hasDuplicate;
        // Initialize against the default document
        setDocument();
        // Support: Webkit<537.32 - Safari 6.0.3/Chrome 25 (fixed in Chrome 27)
        // Detached nodes confoundingly follow *each other*
        support.sortDetached = assert(function(el) {
            // Should return 1, but returns 4 (following)
            return el.compareDocumentPosition(document.createElement("fieldset")) & 1;
        });
        // Support: IE<8
        // Prevent attribute/property "interpolation"
        // https://msdn.microsoft.com/en-us/library/ms536429%28VS.85%29.aspx
        if (!assert(function(el) {
            el.innerHTML = "<a href='#'></a>";
            return el.firstChild.getAttribute("href") === "#";
        })) addHandle("type|href|height|width", function(elem, name, isXML) {
            if (!isXML) return elem.getAttribute(name, name.toLowerCase() === "type" ? 1 : 2);
        });
        // Support: IE<9
        // Use defaultValue in place of getAttribute("value")
        if (!support.attributes || !assert(function(el) {
            el.innerHTML = "<input/>";
            el.firstChild.setAttribute("value", "");
            return el.firstChild.getAttribute("value") === "";
        })) addHandle("value", function(elem, name, isXML) {
            if (!isXML && elem.nodeName.toLowerCase() === "input") return elem.defaultValue;
        });
        // Support: IE<9
        // Use getAttributeNode to fetch booleans when getAttribute lies
        if (!assert(function(el) {
            return el.getAttribute("disabled") == null;
        })) addHandle(booleans, function(elem, name, isXML) {
            var val;
            if (!isXML) return elem[name] === true ? name.toLowerCase() : (val = elem.getAttributeNode(name)) && val.specified ? val.value : null;
        });
        return Sizzle;
    }(window1);
    jQuery.find = Sizzle;
    jQuery.expr = Sizzle.selectors;
    // Deprecated
    jQuery.expr[":"] = jQuery.expr.pseudos;
    jQuery.uniqueSort = jQuery.unique = Sizzle.uniqueSort;
    jQuery.text = Sizzle.getText;
    jQuery.isXMLDoc = Sizzle.isXML;
    jQuery.contains = Sizzle.contains;
    jQuery.escapeSelector = Sizzle.escape;
    var dir = function(elem, dir, until) {
        var matched = [], truncate = until !== undefined;
        while((elem = elem[dir]) && elem.nodeType !== 9)if (elem.nodeType === 1) {
            if (truncate && jQuery(elem).is(until)) break;
            matched.push(elem);
        }
        return matched;
    };
    var siblings = function(n, elem) {
        var matched = [];
        for(; n; n = n.nextSibling)if (n.nodeType === 1 && n !== elem) matched.push(n);
        return matched;
    };
    var rneedsContext = jQuery.expr.match.needsContext;
    function nodeName(elem, name) {
        return elem.nodeName && elem.nodeName.toLowerCase() === name.toLowerCase();
    }
    var rsingleTag = /^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i;
    // Implement the identical functionality for filter and not
    function winnow(elements, qualifier, not) {
        if (isFunction(qualifier)) return jQuery.grep(elements, function(elem, i) {
            return !!qualifier.call(elem, i, elem) !== not;
        });
        // Single element
        if (qualifier.nodeType) return jQuery.grep(elements, function(elem) {
            return elem === qualifier !== not;
        });
        // Arraylike of elements (jQuery, arguments, Array)
        if (typeof qualifier !== "string") return jQuery.grep(elements, function(elem) {
            return indexOf.call(qualifier, elem) > -1 !== not;
        });
        // Filtered directly for both simple and complex selectors
        return jQuery.filter(qualifier, elements, not);
    }
    jQuery.filter = function(expr, elems, not) {
        var elem = elems[0];
        if (not) expr = ":not(" + expr + ")";
        if (elems.length === 1 && elem.nodeType === 1) return jQuery.find.matchesSelector(elem, expr) ? [
            elem
        ] : [];
        return jQuery.find.matches(expr, jQuery.grep(elems, function(elem) {
            return elem.nodeType === 1;
        }));
    };
    jQuery.fn.extend({
        find: function(selector) {
            var i, ret, len = this.length, self = this;
            if (typeof selector !== "string") return this.pushStack(jQuery(selector).filter(function() {
                for(i = 0; i < len; i++){
                    if (jQuery.contains(self[i], this)) return true;
                }
            }));
            ret = this.pushStack([]);
            for(i = 0; i < len; i++)jQuery.find(selector, self[i], ret);
            return len > 1 ? jQuery.uniqueSort(ret) : ret;
        },
        filter: function(selector) {
            return this.pushStack(winnow(this, selector || [], false));
        },
        not: function(selector) {
            return this.pushStack(winnow(this, selector || [], true));
        },
        is: function(selector) {
            return !!winnow(this, // If this is a positional/relative selector, check membership in the returned set
            // so $("p:first").is("p:last") won't return true for a doc with two "p".
            typeof selector === "string" && rneedsContext.test(selector) ? jQuery(selector) : selector || [], false).length;
        }
    });
    // Initialize a jQuery object
    // A central reference to the root jQuery(document)
    var rootjQuery, // A simple way to check for HTML strings
    // Prioritize #id over <tag> to avoid XSS via location.hash (#9521)
    // Strict HTML recognition (#11290: must start with <)
    // Shortcut simple #id case for speed
    rquickExpr = /^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/, init = jQuery.fn.init = function(selector, context, root) {
        var match, elem;
        // HANDLE: $(""), $(null), $(undefined), $(false)
        if (!selector) return this;
        // Method init() accepts an alternate rootjQuery
        // so migrate can support jQuery.sub (gh-2101)
        root = root || rootjQuery;
        // Handle HTML strings
        if (typeof selector === "string") {
            if (selector[0] === "<" && selector[selector.length - 1] === ">" && selector.length >= 3) // Assume that strings that start and end with <> are HTML and skip the regex check
            match = [
                null,
                selector,
                null
            ];
            else match = rquickExpr.exec(selector);
            // Match html or make sure no context is specified for #id
            if (match && (match[1] || !context)) {
                // HANDLE: $(html) -> $(array)
                if (match[1]) {
                    context = context instanceof jQuery ? context[0] : context;
                    // Option to run scripts is true for back-compat
                    // Intentionally let the error be thrown if parseHTML is not present
                    jQuery.merge(this, jQuery.parseHTML(match[1], context && context.nodeType ? context.ownerDocument || context : document, true));
                    // HANDLE: $(html, props)
                    if (rsingleTag.test(match[1]) && jQuery.isPlainObject(context)) {
                        for(match in context)// Properties of context are called as methods if possible
                        if (isFunction(this[match])) this[match](context[match]);
                        else this.attr(match, context[match]);
                    }
                    return this;
                // HANDLE: $(#id)
                } else {
                    elem = document.getElementById(match[2]);
                    if (elem) {
                        // Inject the element directly into the jQuery object
                        this[0] = elem;
                        this.length = 1;
                    }
                    return this;
                }
            } else if (!context || context.jquery) return (context || root).find(selector);
            else return this.constructor(context).find(selector);
        // HANDLE: $(DOMElement)
        } else if (selector.nodeType) {
            this[0] = selector;
            this.length = 1;
            return this;
        // HANDLE: $(function)
        // Shortcut for document ready
        } else if (isFunction(selector)) return root.ready !== undefined ? root.ready(selector) : // Execute immediately if ready is not present
        selector(jQuery);
        return jQuery.makeArray(selector, this);
    };
    // Give the init function the jQuery prototype for later instantiation
    init.prototype = jQuery.fn;
    // Initialize central reference
    rootjQuery = jQuery(document);
    var rparentsprev = /^(?:parents|prev(?:Until|All))/, // Methods guaranteed to produce a unique set when starting from a unique set
    guaranteedUnique = {
        children: true,
        contents: true,
        next: true,
        prev: true
    };
    jQuery.fn.extend({
        has: function(target) {
            var targets = jQuery(target, this), l = targets.length;
            return this.filter(function() {
                var i = 0;
                for(; i < l; i++){
                    if (jQuery.contains(this, targets[i])) return true;
                }
            });
        },
        closest: function(selectors, context) {
            var cur, i = 0, l = this.length, matched = [], targets = typeof selectors !== "string" && jQuery(selectors);
            // Positional selectors never match, since there's no _selection_ context
            if (!rneedsContext.test(selectors)) for(; i < l; i++){
                for(cur = this[i]; cur && cur !== context; cur = cur.parentNode)// Always skip document fragments
                if (cur.nodeType < 11 && (targets ? targets.index(cur) > -1 : // Don't pass non-elements to Sizzle
                cur.nodeType === 1 && jQuery.find.matchesSelector(cur, selectors))) {
                    matched.push(cur);
                    break;
                }
            }
            return this.pushStack(matched.length > 1 ? jQuery.uniqueSort(matched) : matched);
        },
        // Determine the position of an element within the set
        index: function(elem) {
            // No argument, return index in parent
            if (!elem) return this[0] && this[0].parentNode ? this.first().prevAll().length : -1;
            // Index in selector
            if (typeof elem === "string") return indexOf.call(jQuery(elem), this[0]);
            // Locate the position of the desired element
            return indexOf.call(this, // If it receives a jQuery object, the first element is used
            elem.jquery ? elem[0] : elem);
        },
        add: function(selector, context) {
            return this.pushStack(jQuery.uniqueSort(jQuery.merge(this.get(), jQuery(selector, context))));
        },
        addBack: function(selector) {
            return this.add(selector == null ? this.prevObject : this.prevObject.filter(selector));
        }
    });
    function sibling(cur, dir) {
        while((cur = cur[dir]) && cur.nodeType !== 1);
        return cur;
    }
    jQuery.each({
        parent: function(elem) {
            var parent = elem.parentNode;
            return parent && parent.nodeType !== 11 ? parent : null;
        },
        parents: function(elem) {
            return dir(elem, "parentNode");
        },
        parentsUntil: function(elem, i, until) {
            return dir(elem, "parentNode", until);
        },
        next: function(elem) {
            return sibling(elem, "nextSibling");
        },
        prev: function(elem) {
            return sibling(elem, "previousSibling");
        },
        nextAll: function(elem) {
            return dir(elem, "nextSibling");
        },
        prevAll: function(elem) {
            return dir(elem, "previousSibling");
        },
        nextUntil: function(elem, i, until) {
            return dir(elem, "nextSibling", until);
        },
        prevUntil: function(elem, i, until) {
            return dir(elem, "previousSibling", until);
        },
        siblings: function(elem) {
            return siblings((elem.parentNode || {}).firstChild, elem);
        },
        children: function(elem) {
            return siblings(elem.firstChild);
        },
        contents: function(elem) {
            if (nodeName(elem, "iframe")) return elem.contentDocument;
            // Support: IE 9 - 11 only, iOS 7 only, Android Browser <=4.3 only
            // Treat the template element as a regular one in browsers that
            // don't support it.
            if (nodeName(elem, "template")) elem = elem.content || elem;
            return jQuery.merge([], elem.childNodes);
        }
    }, function(name, fn) {
        jQuery.fn[name] = function(until, selector) {
            var matched = jQuery.map(this, fn, until);
            if (name.slice(-5) !== "Until") selector = until;
            if (selector && typeof selector === "string") matched = jQuery.filter(selector, matched);
            if (this.length > 1) {
                // Remove duplicates
                if (!guaranteedUnique[name]) jQuery.uniqueSort(matched);
                // Reverse order for parents* and prev-derivatives
                if (rparentsprev.test(name)) matched.reverse();
            }
            return this.pushStack(matched);
        };
    });
    var rnothtmlwhite = /[^\x20\t\r\n\f]+/g;
    // Convert String-formatted options into Object-formatted ones
    function createOptions(options) {
        var object = {};
        jQuery.each(options.match(rnothtmlwhite) || [], function(_, flag) {
            object[flag] = true;
        });
        return object;
    }
    /*
 * Create a callback list using the following parameters:
 *
 *	options: an optional list of space-separated options that will change how
 *			the callback list behaves or a more traditional option object
 *
 * By default a callback list will act like an event callback list and can be
 * "fired" multiple times.
 *
 * Possible options:
 *
 *	once:			will ensure the callback list can only be fired once (like a Deferred)
 *
 *	memory:			will keep track of previous values and will call any callback added
 *					after the list has been fired right away with the latest "memorized"
 *					values (like a Deferred)
 *
 *	unique:			will ensure a callback can only be added once (no duplicate in the list)
 *
 *	stopOnFalse:	interrupt callings when a callback returns false
 *
 */ jQuery.Callbacks = function(options) {
        // Convert options from String-formatted to Object-formatted if needed
        // (we check in cache first)
        options = typeof options === "string" ? createOptions(options) : jQuery.extend({}, options);
        var firing, // Last fire value for non-forgettable lists
        memory, // Flag to know if list was already fired
        fired, // Flag to prevent firing
        locked, // Actual callback list
        list = [], // Queue of execution data for repeatable lists
        queue = [], // Index of currently firing callback (modified by add/remove as needed)
        firingIndex = -1, // Fire callbacks
        fire = function() {
            // Enforce single-firing
            locked = locked || options.once;
            // Execute callbacks for all pending executions,
            // respecting firingIndex overrides and runtime changes
            fired = firing = true;
            for(; queue.length; firingIndex = -1){
                memory = queue.shift();
                while(++firingIndex < list.length)// Run callback and check for early termination
                if (list[firingIndex].apply(memory[0], memory[1]) === false && options.stopOnFalse) {
                    // Jump to end and forget the data so .add doesn't re-fire
                    firingIndex = list.length;
                    memory = false;
                }
            }
            // Forget the data if we're done with it
            if (!options.memory) memory = false;
            firing = false;
            // Clean up if we're done firing for good
            if (locked) {
                // Keep an empty list if we have data for future add calls
                if (memory) list = [];
                else list = "";
            }
        }, // Actual Callbacks object
        self = {
            // Add a callback or a collection of callbacks to the list
            add: function() {
                if (list) {
                    // If we have memory from a past run, we should fire after adding
                    if (memory && !firing) {
                        firingIndex = list.length - 1;
                        queue.push(memory);
                    }
                    (function add(args) {
                        jQuery.each(args, function(_, arg) {
                            if (isFunction(arg)) {
                                if (!options.unique || !self.has(arg)) list.push(arg);
                            } else if (arg && arg.length && toType(arg) !== "string") // Inspect recursively
                            add(arg);
                        });
                    })(arguments);
                    if (memory && !firing) fire();
                }
                return this;
            },
            // Remove a callback from the list
            remove: function() {
                jQuery.each(arguments, function(_, arg) {
                    var index;
                    while((index = jQuery.inArray(arg, list, index)) > -1){
                        list.splice(index, 1);
                        // Handle firing indexes
                        if (index <= firingIndex) firingIndex--;
                    }
                });
                return this;
            },
            // Check if a given callback is in the list.
            // If no argument is given, return whether or not list has callbacks attached.
            has: function(fn) {
                return fn ? jQuery.inArray(fn, list) > -1 : list.length > 0;
            },
            // Remove all callbacks from the list
            empty: function() {
                if (list) list = [];
                return this;
            },
            // Disable .fire and .add
            // Abort any current/pending executions
            // Clear all callbacks and values
            disable: function() {
                locked = queue = [];
                list = memory = "";
                return this;
            },
            disabled: function() {
                return !list;
            },
            // Disable .fire
            // Also disable .add unless we have memory (since it would have no effect)
            // Abort any pending executions
            lock: function() {
                locked = queue = [];
                if (!memory && !firing) list = memory = "";
                return this;
            },
            locked: function() {
                return !!locked;
            },
            // Call all callbacks with the given context and arguments
            fireWith: function(context, args) {
                if (!locked) {
                    args = args || [];
                    args = [
                        context,
                        args.slice ? args.slice() : args
                    ];
                    queue.push(args);
                    if (!firing) fire();
                }
                return this;
            },
            // Call all the callbacks with the given arguments
            fire: function() {
                self.fireWith(this, arguments);
                return this;
            },
            // To know if the callbacks have already been called at least once
            fired: function() {
                return !!fired;
            }
        };
        return self;
    };
    function Identity(v) {
        return v;
    }
    function Thrower(ex) {
        throw ex;
    }
    function adoptValue(value, resolve, reject, noValue) {
        var method;
        try {
            // Check for promise aspect first to privilege synchronous behavior
            if (value && isFunction(method = value.promise)) method.call(value).done(resolve).fail(reject);
            else if (value && isFunction(method = value.then)) method.call(value, resolve, reject);
            else // Control `resolve` arguments by letting Array#slice cast boolean `noValue` to integer:
            // * false: [ value ].slice( 0 ) => resolve( value )
            // * true: [ value ].slice( 1 ) => resolve()
            resolve.apply(undefined, [
                value
            ].slice(noValue));
        // For Promises/A+, convert exceptions into rejections
        // Since jQuery.when doesn't unwrap thenables, we can skip the extra checks appearing in
        // Deferred#then to conditionally suppress rejection.
        } catch (value) {
            // Support: Android 4.0 only
            // Strict mode functions invoked without .call/.apply get global-object context
            reject.apply(undefined, [
                value
            ]);
        }
    }
    jQuery.extend({
        Deferred: function(func) {
            var tuples = [
                // action, add listener, callbacks,
                // ... .then handlers, argument index, [final state]
                [
                    "notify",
                    "progress",
                    jQuery.Callbacks("memory"),
                    jQuery.Callbacks("memory"),
                    2
                ],
                [
                    "resolve",
                    "done",
                    jQuery.Callbacks("once memory"),
                    jQuery.Callbacks("once memory"),
                    0,
                    "resolved"
                ],
                [
                    "reject",
                    "fail",
                    jQuery.Callbacks("once memory"),
                    jQuery.Callbacks("once memory"),
                    1,
                    "rejected"
                ]
            ], state = "pending", promise = {
                state: function() {
                    return state;
                },
                always: function() {
                    deferred.done(arguments).fail(arguments);
                    return this;
                },
                "catch": function(fn) {
                    return promise.then(null, fn);
                },
                // Keep pipe for back-compat
                pipe: function() {
                    var fns = arguments;
                    return jQuery.Deferred(function(newDefer) {
                        jQuery.each(tuples, function(i, tuple) {
                            // Map tuples (progress, done, fail) to arguments (done, fail, progress)
                            var fn = isFunction(fns[tuple[4]]) && fns[tuple[4]];
                            // deferred.progress(function() { bind to newDefer or newDefer.notify })
                            // deferred.done(function() { bind to newDefer or newDefer.resolve })
                            // deferred.fail(function() { bind to newDefer or newDefer.reject })
                            deferred[tuple[1]](function() {
                                var returned = fn && fn.apply(this, arguments);
                                if (returned && isFunction(returned.promise)) returned.promise().progress(newDefer.notify).done(newDefer.resolve).fail(newDefer.reject);
                                else newDefer[tuple[0] + "With"](this, fn ? [
                                    returned
                                ] : arguments);
                            });
                        });
                        fns = null;
                    }).promise();
                },
                then: function(onFulfilled, onRejected, onProgress) {
                    var maxDepth = 0;
                    function resolve(depth, deferred, handler, special) {
                        return function() {
                            var that = this, args = arguments, mightThrow = function() {
                                var returned, then;
                                // Support: Promises/A+ section 2.3.3.3.3
                                // https://promisesaplus.com/#point-59
                                // Ignore double-resolution attempts
                                if (depth < maxDepth) return;
                                returned = handler.apply(that, args);
                                // Support: Promises/A+ section 2.3.1
                                // https://promisesaplus.com/#point-48
                                if (returned === deferred.promise()) throw new TypeError("Thenable self-resolution");
                                // Support: Promises/A+ sections 2.3.3.1, 3.5
                                // https://promisesaplus.com/#point-54
                                // https://promisesaplus.com/#point-75
                                // Retrieve `then` only once
                                then = returned && // Support: Promises/A+ section 2.3.4
                                // https://promisesaplus.com/#point-64
                                // Only check objects and functions for thenability
                                (typeof returned === "object" || typeof returned === "function") && returned.then;
                                // Handle a returned thenable
                                if (isFunction(then)) {
                                    // Special processors (notify) just wait for resolution
                                    if (special) then.call(returned, resolve(maxDepth, deferred, Identity, special), resolve(maxDepth, deferred, Thrower, special));
                                    else {
                                        // ...and disregard older resolution values
                                        maxDepth++;
                                        then.call(returned, resolve(maxDepth, deferred, Identity, special), resolve(maxDepth, deferred, Thrower, special), resolve(maxDepth, deferred, Identity, deferred.notifyWith));
                                    }
                                } else {
                                    // Only substitute handlers pass on context
                                    // and multiple values (non-spec behavior)
                                    if (handler !== Identity) {
                                        that = undefined;
                                        args = [
                                            returned
                                        ];
                                    }
                                    // Process the value(s)
                                    // Default process is resolve
                                    (special || deferred.resolveWith)(that, args);
                                }
                            }, // Only normal processors (resolve) catch and reject exceptions
                            process = special ? mightThrow : function() {
                                try {
                                    mightThrow();
                                } catch (e) {
                                    if (jQuery.Deferred.exceptionHook) jQuery.Deferred.exceptionHook(e, process.stackTrace);
                                    // Support: Promises/A+ section 2.3.3.3.4.1
                                    // https://promisesaplus.com/#point-61
                                    // Ignore post-resolution exceptions
                                    if (depth + 1 >= maxDepth) {
                                        // Only substitute handlers pass on context
                                        // and multiple values (non-spec behavior)
                                        if (handler !== Thrower) {
                                            that = undefined;
                                            args = [
                                                e
                                            ];
                                        }
                                        deferred.rejectWith(that, args);
                                    }
                                }
                            };
                            // Support: Promises/A+ section 2.3.3.3.1
                            // https://promisesaplus.com/#point-57
                            // Re-resolve promises immediately to dodge false rejection from
                            // subsequent errors
                            if (depth) process();
                            else {
                                // Call an optional hook to record the stack, in case of exception
                                // since it's otherwise lost when execution goes async
                                if (jQuery.Deferred.getStackHook) process.stackTrace = jQuery.Deferred.getStackHook();
                                window1.setTimeout(process);
                            }
                        };
                    }
                    return jQuery.Deferred(function(newDefer) {
                        // progress_handlers.add( ... )
                        tuples[0][3].add(resolve(0, newDefer, isFunction(onProgress) ? onProgress : Identity, newDefer.notifyWith));
                        // fulfilled_handlers.add( ... )
                        tuples[1][3].add(resolve(0, newDefer, isFunction(onFulfilled) ? onFulfilled : Identity));
                        // rejected_handlers.add( ... )
                        tuples[2][3].add(resolve(0, newDefer, isFunction(onRejected) ? onRejected : Thrower));
                    }).promise();
                },
                // Get a promise for this deferred
                // If obj is provided, the promise aspect is added to the object
                promise: function(obj) {
                    return obj != null ? jQuery.extend(obj, promise) : promise;
                }
            }, deferred = {};
            // Add list-specific methods
            jQuery.each(tuples, function(i, tuple) {
                var list = tuple[2], stateString = tuple[5];
                // promise.progress = list.add
                // promise.done = list.add
                // promise.fail = list.add
                promise[tuple[1]] = list.add;
                // Handle state
                if (stateString) list.add(function() {
                    // state = "resolved" (i.e., fulfilled)
                    // state = "rejected"
                    state = stateString;
                }, // rejected_callbacks.disable
                // fulfilled_callbacks.disable
                tuples[3 - i][2].disable, // rejected_handlers.disable
                // fulfilled_handlers.disable
                tuples[3 - i][3].disable, // progress_callbacks.lock
                tuples[0][2].lock, // progress_handlers.lock
                tuples[0][3].lock);
                // progress_handlers.fire
                // fulfilled_handlers.fire
                // rejected_handlers.fire
                list.add(tuple[3].fire);
                // deferred.notify = function() { deferred.notifyWith(...) }
                // deferred.resolve = function() { deferred.resolveWith(...) }
                // deferred.reject = function() { deferred.rejectWith(...) }
                deferred[tuple[0]] = function() {
                    deferred[tuple[0] + "With"](this === deferred ? undefined : this, arguments);
                    return this;
                };
                // deferred.notifyWith = list.fireWith
                // deferred.resolveWith = list.fireWith
                // deferred.rejectWith = list.fireWith
                deferred[tuple[0] + "With"] = list.fireWith;
            });
            // Make the deferred a promise
            promise.promise(deferred);
            // Call given func if any
            if (func) func.call(deferred, deferred);
            // All done!
            return deferred;
        },
        // Deferred helper
        when: function(singleValue) {
            var // count of uncompleted subordinates
            remaining = arguments.length, // count of unprocessed arguments
            i = remaining, // subordinate fulfillment data
            resolveContexts = Array(i), resolveValues = slice.call(arguments), // the master Deferred
            master = jQuery.Deferred(), // subordinate callback factory
            updateFunc = function(i) {
                return function(value) {
                    resolveContexts[i] = this;
                    resolveValues[i] = arguments.length > 1 ? slice.call(arguments) : value;
                    if (!--remaining) master.resolveWith(resolveContexts, resolveValues);
                };
            };
            // Single- and empty arguments are adopted like Promise.resolve
            if (remaining <= 1) {
                adoptValue(singleValue, master.done(updateFunc(i)).resolve, master.reject, !remaining);
                // Use .then() to unwrap secondary thenables (cf. gh-3000)
                if (master.state() === "pending" || isFunction(resolveValues[i] && resolveValues[i].then)) return master.then();
            }
            // Multiple arguments are aggregated like Promise.all array elements
            while(i--)adoptValue(resolveValues[i], updateFunc(i), master.reject);
            return master.promise();
        }
    });
    // These usually indicate a programmer mistake during development,
    // warn about them ASAP rather than swallowing them by default.
    var rerrorNames = /^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;
    jQuery.Deferred.exceptionHook = function(error, stack) {
        // Support: IE 8 - 9 only
        // Console exists when dev tools are open, which can happen at any time
        if (window1.console && window1.console.warn && error && rerrorNames.test(error.name)) window1.console.warn("jQuery.Deferred exception: " + error.message, error.stack, stack);
    };
    jQuery.readyException = function(error) {
        window1.setTimeout(function() {
            throw error;
        });
    };
    // The deferred used on DOM ready
    var readyList = jQuery.Deferred();
    jQuery.fn.ready = function(fn) {
        readyList.then(fn)// Wrap jQuery.readyException in a function so that the lookup
        // happens at the time of error handling instead of callback
        // registration.
        .catch(function(error) {
            jQuery.readyException(error);
        });
        return this;
    };
    jQuery.extend({
        // Is the DOM ready to be used? Set to true once it occurs.
        isReady: false,
        // A counter to track how many items to wait for before
        // the ready event fires. See #6781
        readyWait: 1,
        // Handle when the DOM is ready
        ready: function(wait) {
            // Abort if there are pending holds or we're already ready
            if (wait === true ? --jQuery.readyWait : jQuery.isReady) return;
            // Remember that the DOM is ready
            jQuery.isReady = true;
            // If a normal DOM Ready event fired, decrement, and wait if need be
            if (wait !== true && --jQuery.readyWait > 0) return;
            // If there are functions bound, to execute
            readyList.resolveWith(document, [
                jQuery
            ]);
        }
    });
    jQuery.ready.then = readyList.then;
    // The ready event handler and self cleanup method
    function completed() {
        document.removeEventListener("DOMContentLoaded", completed);
        window1.removeEventListener("load", completed);
        jQuery.ready();
    }
    // Catch cases where $(document).ready() is called
    // after the browser event has already occurred.
    // Support: IE <=9 - 10 only
    // Older IE sometimes signals "interactive" too soon
    if (document.readyState === "complete" || document.readyState !== "loading" && !document.documentElement.doScroll) // Handle it asynchronously to allow scripts the opportunity to delay ready
    window1.setTimeout(jQuery.ready);
    else {
        // Use the handy event callback
        document.addEventListener("DOMContentLoaded", completed);
        // A fallback to window.onload, that will always work
        window1.addEventListener("load", completed);
    }
    // Multifunctional method to get and set values of a collection
    // The value/s can optionally be executed if it's a function
    var access = function(elems, fn, key, value, chainable, emptyGet, raw) {
        var i = 0, len = elems.length, bulk = key == null;
        // Sets many values
        if (toType(key) === "object") {
            chainable = true;
            for(i in key)access(elems, fn, i, key[i], true, emptyGet, raw);
        // Sets one value
        } else if (value !== undefined) {
            chainable = true;
            if (!isFunction(value)) raw = true;
            if (bulk) {
                // Bulk operations run against the entire set
                if (raw) {
                    fn.call(elems, value);
                    fn = null;
                // ...except when executing function values
                } else {
                    bulk = fn;
                    fn = function(elem, key, value) {
                        return bulk.call(jQuery(elem), value);
                    };
                }
            }
            if (fn) for(; i < len; i++)fn(elems[i], key, raw ? value : value.call(elems[i], i, fn(elems[i], key)));
        }
        if (chainable) return elems;
        // Gets
        if (bulk) return fn.call(elems);
        return len ? fn(elems[0], key) : emptyGet;
    };
    // Matches dashed string for camelizing
    var rmsPrefix = /^-ms-/, rdashAlpha = /-([a-z])/g;
    // Used by camelCase as callback to replace()
    function fcamelCase(all, letter) {
        return letter.toUpperCase();
    }
    // Convert dashed to camelCase; used by the css and data modules
    // Support: IE <=9 - 11, Edge 12 - 15
    // Microsoft forgot to hump their vendor prefix (#9572)
    function camelCase(string) {
        return string.replace(rmsPrefix, "ms-").replace(rdashAlpha, fcamelCase);
    }
    var acceptData = function(owner) {
        // Accepts only:
        //  - Node
        //    - Node.ELEMENT_NODE
        //    - Node.DOCUMENT_NODE
        //  - Object
        //    - Any
        return owner.nodeType === 1 || owner.nodeType === 9 || !+owner.nodeType;
    };
    function Data() {
        this.expando = jQuery.expando + Data.uid++;
    }
    Data.uid = 1;
    Data.prototype = {
        cache: function(owner) {
            // Check if the owner object already has a cache
            var value = owner[this.expando];
            // If not, create one
            if (!value) {
                value = {};
                // We can accept data for non-element nodes in modern browsers,
                // but we should not, see #8335.
                // Always return an empty object.
                if (acceptData(owner)) {
                    // If it is a node unlikely to be stringify-ed or looped over
                    // use plain assignment
                    if (owner.nodeType) owner[this.expando] = value;
                    else Object.defineProperty(owner, this.expando, {
                        value: value,
                        configurable: true
                    });
                }
            }
            return value;
        },
        set: function(owner, data, value) {
            var prop, cache = this.cache(owner);
            // Handle: [ owner, key, value ] args
            // Always use camelCase key (gh-2257)
            if (typeof data === "string") cache[camelCase(data)] = value;
            else // Copy the properties one-by-one to the cache object
            for(prop in data)cache[camelCase(prop)] = data[prop];
            return cache;
        },
        get: function(owner, key) {
            return key === undefined ? this.cache(owner) : // Always use camelCase key (gh-2257)
            owner[this.expando] && owner[this.expando][camelCase(key)];
        },
        access: function(owner, key, value) {
            // In cases where either:
            //
            //   1. No key was specified
            //   2. A string key was specified, but no value provided
            //
            // Take the "read" path and allow the get method to determine
            // which value to return, respectively either:
            //
            //   1. The entire cache object
            //   2. The data stored at the key
            //
            if (key === undefined || key && typeof key === "string" && value === undefined) return this.get(owner, key);
            // When the key is not a string, or both a key and value
            // are specified, set or extend (existing objects) with either:
            //
            //   1. An object of properties
            //   2. A key and value
            //
            this.set(owner, key, value);
            // Since the "set" path can have two possible entry points
            // return the expected data based on which path was taken[*]
            return value !== undefined ? value : key;
        },
        remove: function(owner, key) {
            var i, cache = owner[this.expando];
            if (cache === undefined) return;
            if (key !== undefined) {
                // Support array or space separated string of keys
                if (Array.isArray(key)) // If key is an array of keys...
                // We always set camelCase keys, so remove that.
                key = key.map(camelCase);
                else {
                    key = camelCase(key);
                    // If a key with the spaces exists, use it.
                    // Otherwise, create an array by matching non-whitespace
                    key = key in cache ? [
                        key
                    ] : key.match(rnothtmlwhite) || [];
                }
                i = key.length;
                while(i--)delete cache[key[i]];
            }
            // Remove the expando if there's no more data
            if (key === undefined || jQuery.isEmptyObject(cache)) {
                // Support: Chrome <=35 - 45
                // Webkit & Blink performance suffers when deleting properties
                // from DOM nodes, so set to undefined instead
                // https://bugs.chromium.org/p/chromium/issues/detail?id=378607 (bug restricted)
                if (owner.nodeType) owner[this.expando] = undefined;
                else delete owner[this.expando];
            }
        },
        hasData: function(owner) {
            var cache = owner[this.expando];
            return cache !== undefined && !jQuery.isEmptyObject(cache);
        }
    };
    var dataPriv = new Data();
    var dataUser = new Data();
    //	Implementation Summary
    //
    //	1. Enforce API surface and semantic compatibility with 1.9.x branch
    //	2. Improve the module's maintainability by reducing the storage
    //		paths to a single mechanism.
    //	3. Use the same single mechanism to support "private" and "user" data.
    //	4. _Never_ expose "private" data to user code (TODO: Drop _data, _removeData)
    //	5. Avoid exposing implementation details on user objects (eg. expando properties)
    //	6. Provide a clear path for implementation upgrade to WeakMap in 2014
    var rbrace = /^(?:\{[\w\W]*\}|\[[\w\W]*\])$/, rmultiDash = /[A-Z]/g;
    function getData(data) {
        if (data === "true") return true;
        if (data === "false") return false;
        if (data === "null") return null;
        // Only convert to a number if it doesn't change the string
        if (data === +data + "") return +data;
        if (rbrace.test(data)) return JSON.parse(data);
        return data;
    }
    function dataAttr(elem, key, data) {
        var name;
        // If nothing was found internally, try to fetch any
        // data from the HTML5 data-* attribute
        if (data === undefined && elem.nodeType === 1) {
            name = "data-" + key.replace(rmultiDash, "-$&").toLowerCase();
            data = elem.getAttribute(name);
            if (typeof data === "string") {
                try {
                    data = getData(data);
                } catch (e) {}
                // Make sure we set the data so it isn't changed later
                dataUser.set(elem, key, data);
            } else data = undefined;
        }
        return data;
    }
    jQuery.extend({
        hasData: function(elem) {
            return dataUser.hasData(elem) || dataPriv.hasData(elem);
        },
        data: function(elem, name, data) {
            return dataUser.access(elem, name, data);
        },
        removeData: function(elem, name) {
            dataUser.remove(elem, name);
        },
        // TODO: Now that all calls to _data and _removeData have been replaced
        // with direct calls to dataPriv methods, these can be deprecated.
        _data: function(elem, name, data) {
            return dataPriv.access(elem, name, data);
        },
        _removeData: function(elem, name) {
            dataPriv.remove(elem, name);
        }
    });
    jQuery.fn.extend({
        data: function(key, value) {
            var i, name, data, elem = this[0], attrs = elem && elem.attributes;
            // Gets all values
            if (key === undefined) {
                if (this.length) {
                    data = dataUser.get(elem);
                    if (elem.nodeType === 1 && !dataPriv.get(elem, "hasDataAttrs")) {
                        i = attrs.length;
                        while(i--)// Support: IE 11 only
                        // The attrs elements can be null (#14894)
                        if (attrs[i]) {
                            name = attrs[i].name;
                            if (name.indexOf("data-") === 0) {
                                name = camelCase(name.slice(5));
                                dataAttr(elem, name, data[name]);
                            }
                        }
                        dataPriv.set(elem, "hasDataAttrs", true);
                    }
                }
                return data;
            }
            // Sets multiple values
            if (typeof key === "object") return this.each(function() {
                dataUser.set(this, key);
            });
            return access(this, function(value) {
                var data;
                // The calling jQuery object (element matches) is not empty
                // (and therefore has an element appears at this[ 0 ]) and the
                // `value` parameter was not undefined. An empty jQuery object
                // will result in `undefined` for elem = this[ 0 ] which will
                // throw an exception if an attempt to read a data cache is made.
                if (elem && value === undefined) {
                    // Attempt to get data from the cache
                    // The key will always be camelCased in Data
                    data = dataUser.get(elem, key);
                    if (data !== undefined) return data;
                    // Attempt to "discover" the data in
                    // HTML5 custom data-* attrs
                    data = dataAttr(elem, key);
                    if (data !== undefined) return data;
                    // We tried really hard, but the data doesn't exist.
                    return;
                }
                // Set the data...
                this.each(function() {
                    // We always store the camelCased key
                    dataUser.set(this, key, value);
                });
            }, null, value, arguments.length > 1, null, true);
        },
        removeData: function(key) {
            return this.each(function() {
                dataUser.remove(this, key);
            });
        }
    });
    jQuery.extend({
        queue: function(elem, type, data) {
            var queue;
            if (elem) {
                type = (type || "fx") + "queue";
                queue = dataPriv.get(elem, type);
                // Speed up dequeue by getting out quickly if this is just a lookup
                if (data) {
                    if (!queue || Array.isArray(data)) queue = dataPriv.access(elem, type, jQuery.makeArray(data));
                    else queue.push(data);
                }
                return queue || [];
            }
        },
        dequeue: function(elem, type) {
            type = type || "fx";
            var queue = jQuery.queue(elem, type), startLength = queue.length, fn = queue.shift(), hooks = jQuery._queueHooks(elem, type), next = function() {
                jQuery.dequeue(elem, type);
            };
            // If the fx queue is dequeued, always remove the progress sentinel
            if (fn === "inprogress") {
                fn = queue.shift();
                startLength--;
            }
            if (fn) {
                // Add a progress sentinel to prevent the fx queue from being
                // automatically dequeued
                if (type === "fx") queue.unshift("inprogress");
                // Clear up the last queue stop function
                delete hooks.stop;
                fn.call(elem, next, hooks);
            }
            if (!startLength && hooks) hooks.empty.fire();
        },
        // Not public - generate a queueHooks object, or return the current one
        _queueHooks: function(elem, type) {
            var key = type + "queueHooks";
            return dataPriv.get(elem, key) || dataPriv.access(elem, key, {
                empty: jQuery.Callbacks("once memory").add(function() {
                    dataPriv.remove(elem, [
                        type + "queue",
                        key
                    ]);
                })
            });
        }
    });
    jQuery.fn.extend({
        queue: function(type, data) {
            var setter = 2;
            if (typeof type !== "string") {
                data = type;
                type = "fx";
                setter--;
            }
            if (arguments.length < setter) return jQuery.queue(this[0], type);
            return data === undefined ? this : this.each(function() {
                var queue = jQuery.queue(this, type, data);
                // Ensure a hooks for this queue
                jQuery._queueHooks(this, type);
                if (type === "fx" && queue[0] !== "inprogress") jQuery.dequeue(this, type);
            });
        },
        dequeue: function(type) {
            return this.each(function() {
                jQuery.dequeue(this, type);
            });
        },
        clearQueue: function(type) {
            return this.queue(type || "fx", []);
        },
        // Get a promise resolved when queues of a certain type
        // are emptied (fx is the type by default)
        promise: function(type, obj) {
            var tmp, count = 1, defer = jQuery.Deferred(), elements = this, i = this.length, resolve = function() {
                if (!--count) defer.resolveWith(elements, [
                    elements
                ]);
            };
            if (typeof type !== "string") {
                obj = type;
                type = undefined;
            }
            type = type || "fx";
            while(i--){
                tmp = dataPriv.get(elements[i], type + "queueHooks");
                if (tmp && tmp.empty) {
                    count++;
                    tmp.empty.add(resolve);
                }
            }
            resolve();
            return defer.promise(obj);
        }
    });
    var pnum = /[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source;
    var rcssNum = new RegExp("^(?:([+-])=|)(" + pnum + ")([a-z%]*)$", "i");
    var cssExpand = [
        "Top",
        "Right",
        "Bottom",
        "Left"
    ];
    var isHiddenWithinTree = function(elem, el) {
        // isHiddenWithinTree might be called from jQuery#filter function;
        // in that case, element will be second argument
        elem = el || elem;
        // Inline style trumps all
        return elem.style.display === "none" || elem.style.display === "" && // Otherwise, check computed style
        // Support: Firefox <=43 - 45
        // Disconnected elements can have computed display: none, so first confirm that elem is
        // in the document.
        jQuery.contains(elem.ownerDocument, elem) && jQuery.css(elem, "display") === "none";
    };
    var swap = function(elem, options, callback, args) {
        var ret, name, old = {};
        // Remember the old values, and insert the new ones
        for(name in options){
            old[name] = elem.style[name];
            elem.style[name] = options[name];
        }
        ret = callback.apply(elem, args || []);
        // Revert the old values
        for(name in options)elem.style[name] = old[name];
        return ret;
    };
    function adjustCSS(elem, prop, valueParts, tween) {
        var adjusted, scale, maxIterations = 20, currentValue = tween ? function() {
            return tween.cur();
        } : function() {
            return jQuery.css(elem, prop, "");
        }, initial = currentValue(), unit = valueParts && valueParts[3] || (jQuery.cssNumber[prop] ? "" : "px"), // Starting value computation is required for potential unit mismatches
        initialInUnit = (jQuery.cssNumber[prop] || unit !== "px" && +initial) && rcssNum.exec(jQuery.css(elem, prop));
        if (initialInUnit && initialInUnit[3] !== unit) {
            // Support: Firefox <=54
            // Halve the iteration target value to prevent interference from CSS upper bounds (gh-2144)
            initial = initial / 2;
            // Trust units reported by jQuery.css
            unit = unit || initialInUnit[3];
            // Iteratively approximate from a nonzero starting point
            initialInUnit = +initial || 1;
            while(maxIterations--){
                // Evaluate and update our best guess (doubling guesses that zero out).
                // Finish if the scale equals or crosses 1 (making the old*new product non-positive).
                jQuery.style(elem, prop, initialInUnit + unit);
                if ((1 - scale) * (1 - (scale = currentValue() / initial || 0.5)) <= 0) maxIterations = 0;
                initialInUnit = initialInUnit / scale;
            }
            initialInUnit = initialInUnit * 2;
            jQuery.style(elem, prop, initialInUnit + unit);
            // Make sure we update the tween properties later on
            valueParts = valueParts || [];
        }
        if (valueParts) {
            initialInUnit = +initialInUnit || +initial || 0;
            // Apply relative offset (+=/-=) if specified
            adjusted = valueParts[1] ? initialInUnit + (valueParts[1] + 1) * valueParts[2] : +valueParts[2];
            if (tween) {
                tween.unit = unit;
                tween.start = initialInUnit;
                tween.end = adjusted;
            }
        }
        return adjusted;
    }
    var defaultDisplayMap = {};
    function getDefaultDisplay(elem) {
        var temp, doc = elem.ownerDocument, nodeName = elem.nodeName, display = defaultDisplayMap[nodeName];
        if (display) return display;
        temp = doc.body.appendChild(doc.createElement(nodeName));
        display = jQuery.css(temp, "display");
        temp.parentNode.removeChild(temp);
        if (display === "none") display = "block";
        defaultDisplayMap[nodeName] = display;
        return display;
    }
    function showHide(elements, show) {
        var display, elem, values = [], index = 0, length = elements.length;
        // Determine new display value for elements that need to change
        for(; index < length; index++){
            elem = elements[index];
            if (!elem.style) continue;
            display = elem.style.display;
            if (show) {
                // Since we force visibility upon cascade-hidden elements, an immediate (and slow)
                // check is required in this first loop unless we have a nonempty display value (either
                // inline or about-to-be-restored)
                if (display === "none") {
                    values[index] = dataPriv.get(elem, "display") || null;
                    if (!values[index]) elem.style.display = "";
                }
                if (elem.style.display === "" && isHiddenWithinTree(elem)) values[index] = getDefaultDisplay(elem);
            } else if (display !== "none") {
                values[index] = "none";
                // Remember what we're overwriting
                dataPriv.set(elem, "display", display);
            }
        }
        // Set the display of the elements in a second loop to avoid constant reflow
        for(index = 0; index < length; index++)if (values[index] != null) elements[index].style.display = values[index];
        return elements;
    }
    jQuery.fn.extend({
        show: function() {
            return showHide(this, true);
        },
        hide: function() {
            return showHide(this);
        },
        toggle: function(state) {
            if (typeof state === "boolean") return state ? this.show() : this.hide();
            return this.each(function() {
                if (isHiddenWithinTree(this)) jQuery(this).show();
                else jQuery(this).hide();
            });
        }
    });
    var rcheckableType = /^(?:checkbox|radio)$/i;
    var rtagName = /<([a-z][^\/\0>\x20\t\r\n\f]+)/i;
    var rscriptType = /^$|^module$|\/(?:java|ecma)script/i;
    // We have to close these tags to support XHTML (#13200)
    var wrapMap = {
        // Support: IE <=9 only
        option: [
            1,
            "<select multiple='multiple'>",
            "</select>"
        ],
        // XHTML parsers do not magically insert elements in the
        // same way that tag soup parsers do. So we cannot shorten
        // this by omitting <tbody> or other required elements.
        thead: [
            1,
            "<table>",
            "</table>"
        ],
        col: [
            2,
            "<table><colgroup>",
            "</colgroup></table>"
        ],
        tr: [
            2,
            "<table><tbody>",
            "</tbody></table>"
        ],
        td: [
            3,
            "<table><tbody><tr>",
            "</tr></tbody></table>"
        ],
        _default: [
            0,
            "",
            ""
        ]
    };
    // Support: IE <=9 only
    wrapMap.optgroup = wrapMap.option;
    wrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;
    wrapMap.th = wrapMap.td;
    function getAll(context, tag) {
        // Support: IE <=9 - 11 only
        // Use typeof to avoid zero-argument method invocation on host objects (#15151)
        var ret;
        if (typeof context.getElementsByTagName !== "undefined") ret = context.getElementsByTagName(tag || "*");
        else if (typeof context.querySelectorAll !== "undefined") ret = context.querySelectorAll(tag || "*");
        else ret = [];
        if (tag === undefined || tag && nodeName(context, tag)) return jQuery.merge([
            context
        ], ret);
        return ret;
    }
    // Mark scripts as having already been evaluated
    function setGlobalEval(elems, refElements) {
        var i = 0, l = elems.length;
        for(; i < l; i++)dataPriv.set(elems[i], "globalEval", !refElements || dataPriv.get(refElements[i], "globalEval"));
    }
    var rhtml = /<|&#?\w+;/;
    function buildFragment(elems, context, scripts, selection, ignored) {
        var elem, tmp, tag, wrap, contains, j, fragment = context.createDocumentFragment(), nodes = [], i = 0, l = elems.length;
        for(; i < l; i++){
            elem = elems[i];
            if (elem || elem === 0) {
                // Add nodes directly
                if (toType(elem) === "object") // Support: Android <=4.0 only, PhantomJS 1 only
                // push.apply(_, arraylike) throws on ancient WebKit
                jQuery.merge(nodes, elem.nodeType ? [
                    elem
                ] : elem);
                else if (!rhtml.test(elem)) nodes.push(context.createTextNode(elem));
                else {
                    tmp = tmp || fragment.appendChild(context.createElement("div"));
                    // Deserialize a standard representation
                    tag = (rtagName.exec(elem) || [
                        "",
                        ""
                    ])[1].toLowerCase();
                    wrap = wrapMap[tag] || wrapMap._default;
                    tmp.innerHTML = wrap[1] + jQuery.htmlPrefilter(elem) + wrap[2];
                    // Descend through wrappers to the right content
                    j = wrap[0];
                    while(j--)tmp = tmp.lastChild;
                    // Support: Android <=4.0 only, PhantomJS 1 only
                    // push.apply(_, arraylike) throws on ancient WebKit
                    jQuery.merge(nodes, tmp.childNodes);
                    // Remember the top-level container
                    tmp = fragment.firstChild;
                    // Ensure the created nodes are orphaned (#12392)
                    tmp.textContent = "";
                }
            }
        }
        // Remove wrapper from fragment
        fragment.textContent = "";
        i = 0;
        while(elem = nodes[i++]){
            // Skip elements already in the context collection (trac-4087)
            if (selection && jQuery.inArray(elem, selection) > -1) {
                if (ignored) ignored.push(elem);
                continue;
            }
            contains = jQuery.contains(elem.ownerDocument, elem);
            // Append to fragment
            tmp = getAll(fragment.appendChild(elem), "script");
            // Preserve script evaluation history
            if (contains) setGlobalEval(tmp);
            // Capture executables
            if (scripts) {
                j = 0;
                while(elem = tmp[j++])if (rscriptType.test(elem.type || "")) scripts.push(elem);
            }
        }
        return fragment;
    }
    (function() {
        var fragment = document.createDocumentFragment(), div = fragment.appendChild(document.createElement("div")), input = document.createElement("input");
        // Support: Android 4.0 - 4.3 only
        // Check state lost if the name is set (#11217)
        // Support: Windows Web Apps (WWA)
        // `name` and `type` must use .setAttribute for WWA (#14901)
        input.setAttribute("type", "radio");
        input.setAttribute("checked", "checked");
        input.setAttribute("name", "t");
        div.appendChild(input);
        // Support: Android <=4.1 only
        // Older WebKit doesn't clone checked state correctly in fragments
        support.checkClone = div.cloneNode(true).cloneNode(true).lastChild.checked;
        // Support: IE <=11 only
        // Make sure textarea (and checkbox) defaultValue is properly cloned
        div.innerHTML = "<textarea>x</textarea>";
        support.noCloneChecked = !!div.cloneNode(true).lastChild.defaultValue;
    })();
    var documentElement = document.documentElement;
    var rkeyEvent = /^key/, rmouseEvent = /^(?:mouse|pointer|contextmenu|drag|drop)|click/, rtypenamespace = /^([^.]*)(?:\.(.+)|)/;
    function returnTrue() {
        return true;
    }
    function returnFalse() {
        return false;
    }
    // Support: IE <=9 only
    // See #13393 for more info
    function safeActiveElement() {
        try {
            return document.activeElement;
        } catch (err) {}
    }
    function on(elem, types, selector, data, fn, one) {
        var origFn, type;
        // Types can be a map of types/handlers
        if (typeof types === "object") {
            // ( types-Object, selector, data )
            if (typeof selector !== "string") {
                // ( types-Object, data )
                data = data || selector;
                selector = undefined;
            }
            for(type in types)on(elem, type, selector, data, types[type], one);
            return elem;
        }
        if (data == null && fn == null) {
            // ( types, fn )
            fn = selector;
            data = selector = undefined;
        } else if (fn == null) {
            if (typeof selector === "string") {
                // ( types, selector, fn )
                fn = data;
                data = undefined;
            } else {
                // ( types, data, fn )
                fn = data;
                data = selector;
                selector = undefined;
            }
        }
        if (fn === false) fn = returnFalse;
        else if (!fn) return elem;
        if (one === 1) {
            origFn = fn;
            fn = function(event) {
                // Can use an empty set, since event contains the info
                jQuery().off(event);
                return origFn.apply(this, arguments);
            };
            // Use same guid so caller can remove using origFn
            fn.guid = origFn.guid || (origFn.guid = jQuery.guid++);
        }
        return elem.each(function() {
            jQuery.event.add(this, types, fn, data, selector);
        });
    }
    /*
 * Helper functions for managing events -- not part of the public interface.
 * Props to Dean Edwards' addEvent library for many of the ideas.
 */ jQuery.event = {
        global: {},
        add: function(elem, types, handler, data, selector) {
            var handleObjIn, eventHandle, tmp, events, t, handleObj, special, handlers, type, namespaces, origType, elemData = dataPriv.get(elem);
            // Don't attach events to noData or text/comment nodes (but allow plain objects)
            if (!elemData) return;
            // Caller can pass in an object of custom data in lieu of the handler
            if (handler.handler) {
                handleObjIn = handler;
                handler = handleObjIn.handler;
                selector = handleObjIn.selector;
            }
            // Ensure that invalid selectors throw exceptions at attach time
            // Evaluate against documentElement in case elem is a non-element node (e.g., document)
            if (selector) jQuery.find.matchesSelector(documentElement, selector);
            // Make sure that the handler has a unique ID, used to find/remove it later
            if (!handler.guid) handler.guid = jQuery.guid++;
            // Init the element's event structure and main handler, if this is the first
            if (!(events = elemData.events)) events = elemData.events = {};
            if (!(eventHandle = elemData.handle)) eventHandle = elemData.handle = function(e) {
                // Discard the second event of a jQuery.event.trigger() and
                // when an event is called after a page has unloaded
                return typeof jQuery !== "undefined" && jQuery.event.triggered !== e.type ? jQuery.event.dispatch.apply(elem, arguments) : undefined;
            };
            // Handle multiple events separated by a space
            types = (types || "").match(rnothtmlwhite) || [
                ""
            ];
            t = types.length;
            while(t--){
                tmp = rtypenamespace.exec(types[t]) || [];
                type = origType = tmp[1];
                namespaces = (tmp[2] || "").split(".").sort();
                // There *must* be a type, no attaching namespace-only handlers
                if (!type) continue;
                // If event changes its type, use the special event handlers for the changed type
                special = jQuery.event.special[type] || {};
                // If selector defined, determine special event api type, otherwise given type
                type = (selector ? special.delegateType : special.bindType) || type;
                // Update special based on newly reset type
                special = jQuery.event.special[type] || {};
                // handleObj is passed to all event handlers
                handleObj = jQuery.extend({
                    type: type,
                    origType: origType,
                    data: data,
                    handler: handler,
                    guid: handler.guid,
                    selector: selector,
                    needsContext: selector && jQuery.expr.match.needsContext.test(selector),
                    namespace: namespaces.join(".")
                }, handleObjIn);
                // Init the event handler queue if we're the first
                if (!(handlers = events[type])) {
                    handlers = events[type] = [];
                    handlers.delegateCount = 0;
                    // Only use addEventListener if the special events handler returns false
                    if (!special.setup || special.setup.call(elem, data, namespaces, eventHandle) === false) {
                        if (elem.addEventListener) elem.addEventListener(type, eventHandle);
                    }
                }
                if (special.add) {
                    special.add.call(elem, handleObj);
                    if (!handleObj.handler.guid) handleObj.handler.guid = handler.guid;
                }
                // Add to the element's handler list, delegates in front
                if (selector) handlers.splice(handlers.delegateCount++, 0, handleObj);
                else handlers.push(handleObj);
                // Keep track of which events have ever been used, for event optimization
                jQuery.event.global[type] = true;
            }
        },
        // Detach an event or set of events from an element
        remove: function(elem, types, handler, selector, mappedTypes) {
            var j, origCount, tmp, events, t, handleObj, special, handlers, type, namespaces, origType, elemData = dataPriv.hasData(elem) && dataPriv.get(elem);
            if (!elemData || !(events = elemData.events)) return;
            // Once for each type.namespace in types; type may be omitted
            types = (types || "").match(rnothtmlwhite) || [
                ""
            ];
            t = types.length;
            while(t--){
                tmp = rtypenamespace.exec(types[t]) || [];
                type = origType = tmp[1];
                namespaces = (tmp[2] || "").split(".").sort();
                // Unbind all events (on this namespace, if provided) for the element
                if (!type) {
                    for(type in events)jQuery.event.remove(elem, type + types[t], handler, selector, true);
                    continue;
                }
                special = jQuery.event.special[type] || {};
                type = (selector ? special.delegateType : special.bindType) || type;
                handlers = events[type] || [];
                tmp = tmp[2] && new RegExp("(^|\\.)" + namespaces.join("\\.(?:.*\\.|)") + "(\\.|$)");
                // Remove matching events
                origCount = j = handlers.length;
                while(j--){
                    handleObj = handlers[j];
                    if ((mappedTypes || origType === handleObj.origType) && (!handler || handler.guid === handleObj.guid) && (!tmp || tmp.test(handleObj.namespace)) && (!selector || selector === handleObj.selector || selector === "**" && handleObj.selector)) {
                        handlers.splice(j, 1);
                        if (handleObj.selector) handlers.delegateCount--;
                        if (special.remove) special.remove.call(elem, handleObj);
                    }
                }
                // Remove generic event handler if we removed something and no more handlers exist
                // (avoids potential for endless recursion during removal of special event handlers)
                if (origCount && !handlers.length) {
                    if (!special.teardown || special.teardown.call(elem, namespaces, elemData.handle) === false) jQuery.removeEvent(elem, type, elemData.handle);
                    delete events[type];
                }
            }
            // Remove data and the expando if it's no longer used
            if (jQuery.isEmptyObject(events)) dataPriv.remove(elem, "handle events");
        },
        dispatch: function(nativeEvent) {
            // Make a writable jQuery.Event from the native event object
            var event = jQuery.event.fix(nativeEvent);
            var i, j, ret, matched, handleObj, handlerQueue, args = new Array(arguments.length), handlers = (dataPriv.get(this, "events") || {})[event.type] || [], special = jQuery.event.special[event.type] || {};
            // Use the fix-ed jQuery.Event rather than the (read-only) native event
            args[0] = event;
            for(i = 1; i < arguments.length; i++)args[i] = arguments[i];
            event.delegateTarget = this;
            // Call the preDispatch hook for the mapped type, and let it bail if desired
            if (special.preDispatch && special.preDispatch.call(this, event) === false) return;
            // Determine handlers
            handlerQueue = jQuery.event.handlers.call(this, event, handlers);
            // Run delegates first; they may want to stop propagation beneath us
            i = 0;
            while((matched = handlerQueue[i++]) && !event.isPropagationStopped()){
                event.currentTarget = matched.elem;
                j = 0;
                while((handleObj = matched.handlers[j++]) && !event.isImmediatePropagationStopped())// Triggered event must either 1) have no namespace, or 2) have namespace(s)
                // a subset or equal to those in the bound event (both can have no namespace).
                if (!event.rnamespace || event.rnamespace.test(handleObj.namespace)) {
                    event.handleObj = handleObj;
                    event.data = handleObj.data;
                    ret = ((jQuery.event.special[handleObj.origType] || {}).handle || handleObj.handler).apply(matched.elem, args);
                    if (ret !== undefined) {
                        if ((event.result = ret) === false) {
                            event.preventDefault();
                            event.stopPropagation();
                        }
                    }
                }
            }
            // Call the postDispatch hook for the mapped type
            if (special.postDispatch) special.postDispatch.call(this, event);
            return event.result;
        },
        handlers: function(event, handlers) {
            var i, handleObj, sel, matchedHandlers, matchedSelectors, handlerQueue = [], delegateCount = handlers.delegateCount, cur = event.target;
            // Find delegate handlers
            if (delegateCount && // Support: IE <=9
            // Black-hole SVG <use> instance trees (trac-13180)
            cur.nodeType && // Support: Firefox <=42
            // Suppress spec-violating clicks indicating a non-primary pointer button (trac-3861)
            // https://www.w3.org/TR/DOM-Level-3-Events/#event-type-click
            // Support: IE 11 only
            // ...but not arrow key "clicks" of radio inputs, which can have `button` -1 (gh-2343)
            !(event.type === "click" && event.button >= 1)) {
                for(; cur !== this; cur = cur.parentNode || this)// Don't check non-elements (#13208)
                // Don't process clicks on disabled elements (#6911, #8165, #11382, #11764)
                if (cur.nodeType === 1 && !(event.type === "click" && cur.disabled === true)) {
                    matchedHandlers = [];
                    matchedSelectors = {};
                    for(i = 0; i < delegateCount; i++){
                        handleObj = handlers[i];
                        // Don't conflict with Object.prototype properties (#13203)
                        sel = handleObj.selector + " ";
                        if (matchedSelectors[sel] === undefined) matchedSelectors[sel] = handleObj.needsContext ? jQuery(sel, this).index(cur) > -1 : jQuery.find(sel, this, null, [
                            cur
                        ]).length;
                        if (matchedSelectors[sel]) matchedHandlers.push(handleObj);
                    }
                    if (matchedHandlers.length) handlerQueue.push({
                        elem: cur,
                        handlers: matchedHandlers
                    });
                }
            }
            // Add the remaining (directly-bound) handlers
            cur = this;
            if (delegateCount < handlers.length) handlerQueue.push({
                elem: cur,
                handlers: handlers.slice(delegateCount)
            });
            return handlerQueue;
        },
        addProp: function(name, hook) {
            Object.defineProperty(jQuery.Event.prototype, name, {
                enumerable: true,
                configurable: true,
                get: isFunction(hook) ? function() {
                    if (this.originalEvent) return hook(this.originalEvent);
                } : function() {
                    if (this.originalEvent) return this.originalEvent[name];
                },
                set: function(value) {
                    Object.defineProperty(this, name, {
                        enumerable: true,
                        configurable: true,
                        writable: true,
                        value: value
                    });
                }
            });
        },
        fix: function(originalEvent) {
            return originalEvent[jQuery.expando] ? originalEvent : new jQuery.Event(originalEvent);
        },
        special: {
            load: {
                // Prevent triggered image.load events from bubbling to window.load
                noBubble: true
            },
            focus: {
                // Fire native event if possible so blur/focus sequence is correct
                trigger: function() {
                    if (this !== safeActiveElement() && this.focus) {
                        this.focus();
                        return false;
                    }
                },
                delegateType: "focusin"
            },
            blur: {
                trigger: function() {
                    if (this === safeActiveElement() && this.blur) {
                        this.blur();
                        return false;
                    }
                },
                delegateType: "focusout"
            },
            click: {
                // For checkbox, fire native event so checked state will be right
                trigger: function() {
                    if (this.type === "checkbox" && this.click && nodeName(this, "input")) {
                        this.click();
                        return false;
                    }
                },
                // For cross-browser consistency, don't fire native .click() on links
                _default: function(event) {
                    return nodeName(event.target, "a");
                }
            },
            beforeunload: {
                postDispatch: function(event) {
                    // Support: Firefox 20+
                    // Firefox doesn't alert if the returnValue field is not set.
                    if (event.result !== undefined && event.originalEvent) event.originalEvent.returnValue = event.result;
                }
            }
        }
    };
    jQuery.removeEvent = function(elem, type, handle) {
        // This "if" is needed for plain objects
        if (elem.removeEventListener) elem.removeEventListener(type, handle);
    };
    jQuery.Event = function(src, props) {
        // Allow instantiation without the 'new' keyword
        if (!(this instanceof jQuery.Event)) return new jQuery.Event(src, props);
        // Event object
        if (src && src.type) {
            this.originalEvent = src;
            this.type = src.type;
            // Events bubbling up the document may have been marked as prevented
            // by a handler lower down the tree; reflect the correct value.
            this.isDefaultPrevented = src.defaultPrevented || src.defaultPrevented === undefined && // Support: Android <=2.3 only
            src.returnValue === false ? returnTrue : returnFalse;
            // Create target properties
            // Support: Safari <=6 - 7 only
            // Target should not be a text node (#504, #13143)
            this.target = src.target && src.target.nodeType === 3 ? src.target.parentNode : src.target;
            this.currentTarget = src.currentTarget;
            this.relatedTarget = src.relatedTarget;
        // Event type
        } else this.type = src;
        // Put explicitly provided properties onto the event object
        if (props) jQuery.extend(this, props);
        // Create a timestamp if incoming event doesn't have one
        this.timeStamp = src && src.timeStamp || Date.now();
        // Mark it as fixed
        this[jQuery.expando] = true;
    };
    // jQuery.Event is based on DOM3 Events as specified by the ECMAScript Language Binding
    // https://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/ecma-script-binding.html
    jQuery.Event.prototype = {
        constructor: jQuery.Event,
        isDefaultPrevented: returnFalse,
        isPropagationStopped: returnFalse,
        isImmediatePropagationStopped: returnFalse,
        isSimulated: false,
        preventDefault: function() {
            var e = this.originalEvent;
            this.isDefaultPrevented = returnTrue;
            if (e && !this.isSimulated) e.preventDefault();
        },
        stopPropagation: function() {
            var e = this.originalEvent;
            this.isPropagationStopped = returnTrue;
            if (e && !this.isSimulated) e.stopPropagation();
        },
        stopImmediatePropagation: function() {
            var e = this.originalEvent;
            this.isImmediatePropagationStopped = returnTrue;
            if (e && !this.isSimulated) e.stopImmediatePropagation();
            this.stopPropagation();
        }
    };
    // Includes all common event props including KeyEvent and MouseEvent specific props
    jQuery.each({
        altKey: true,
        bubbles: true,
        cancelable: true,
        changedTouches: true,
        ctrlKey: true,
        detail: true,
        eventPhase: true,
        metaKey: true,
        pageX: true,
        pageY: true,
        shiftKey: true,
        view: true,
        "char": true,
        charCode: true,
        key: true,
        keyCode: true,
        button: true,
        buttons: true,
        clientX: true,
        clientY: true,
        offsetX: true,
        offsetY: true,
        pointerId: true,
        pointerType: true,
        screenX: true,
        screenY: true,
        targetTouches: true,
        toElement: true,
        touches: true,
        which: function(event) {
            var button = event.button;
            // Add which for key events
            if (event.which == null && rkeyEvent.test(event.type)) return event.charCode != null ? event.charCode : event.keyCode;
            // Add which for click: 1 === left; 2 === middle; 3 === right
            if (!event.which && button !== undefined && rmouseEvent.test(event.type)) {
                if (button & 1) return 1;
                if (button & 2) return 3;
                if (button & 4) return 2;
                return 0;
            }
            return event.which;
        }
    }, jQuery.event.addProp);
    // Create mouseenter/leave events using mouseover/out and event-time checks
    // so that event delegation works in jQuery.
    // Do the same for pointerenter/pointerleave and pointerover/pointerout
    //
    // Support: Safari 7 only
    // Safari sends mouseenter too often; see:
    // https://bugs.chromium.org/p/chromium/issues/detail?id=470258
    // for the description of the bug (it existed in older Chrome versions as well).
    jQuery.each({
        mouseenter: "mouseover",
        mouseleave: "mouseout",
        pointerenter: "pointerover",
        pointerleave: "pointerout"
    }, function(orig, fix) {
        jQuery.event.special[orig] = {
            delegateType: fix,
            bindType: fix,
            handle: function(event) {
                var ret, target = this, related = event.relatedTarget, handleObj = event.handleObj;
                // For mouseenter/leave call the handler if related is outside the target.
                // NB: No relatedTarget if the mouse left/entered the browser window
                if (!related || related !== target && !jQuery.contains(target, related)) {
                    event.type = handleObj.origType;
                    ret = handleObj.handler.apply(this, arguments);
                    event.type = fix;
                }
                return ret;
            }
        };
    });
    jQuery.fn.extend({
        on: function(types, selector, data, fn) {
            return on(this, types, selector, data, fn);
        },
        one: function(types, selector, data, fn) {
            return on(this, types, selector, data, fn, 1);
        },
        off: function(types, selector, fn) {
            var handleObj, type;
            if (types && types.preventDefault && types.handleObj) {
                // ( event )  dispatched jQuery.Event
                handleObj = types.handleObj;
                jQuery(types.delegateTarget).off(handleObj.namespace ? handleObj.origType + "." + handleObj.namespace : handleObj.origType, handleObj.selector, handleObj.handler);
                return this;
            }
            if (typeof types === "object") {
                // ( types-object [, selector] )
                for(type in types)this.off(type, selector, types[type]);
                return this;
            }
            if (selector === false || typeof selector === "function") {
                // ( types [, fn] )
                fn = selector;
                selector = undefined;
            }
            if (fn === false) fn = returnFalse;
            return this.each(function() {
                jQuery.event.remove(this, types, fn, selector);
            });
        }
    });
    var /* eslint-disable max-len */ // See https://github.com/eslint/eslint/issues/3229
    rxhtmlTag = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([a-z][^\/\0>\x20\t\r\n\f]*)[^>]*)\/>/gi, /* eslint-enable */ // Support: IE <=10 - 11, Edge 12 - 13 only
    // In IE/Edge using regex groups here causes severe slowdowns.
    // See https://connect.microsoft.com/IE/feedback/details/1736512/
    rnoInnerhtml = /<script|<style|<link/i, // checked="checked" or checked
    rchecked = /checked\s*(?:[^=]|=\s*.checked.)/i, rcleanScript = /^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;
    // Prefer a tbody over its parent table for containing new rows
    function manipulationTarget(elem, content) {
        if (nodeName(elem, "table") && nodeName(content.nodeType !== 11 ? content : content.firstChild, "tr")) return jQuery(elem).children("tbody")[0] || elem;
        return elem;
    }
    // Replace/restore the type attribute of script elements for safe DOM manipulation
    function disableScript(elem) {
        elem.type = (elem.getAttribute("type") !== null) + "/" + elem.type;
        return elem;
    }
    function restoreScript(elem) {
        if ((elem.type || "").slice(0, 5) === "true/") elem.type = elem.type.slice(5);
        else elem.removeAttribute("type");
        return elem;
    }
    function cloneCopyEvent(src, dest) {
        var i, l, type, pdataOld, pdataCur, udataOld, udataCur, events;
        if (dest.nodeType !== 1) return;
        // 1. Copy private data: events, handlers, etc.
        if (dataPriv.hasData(src)) {
            pdataOld = dataPriv.access(src);
            pdataCur = dataPriv.set(dest, pdataOld);
            events = pdataOld.events;
            if (events) {
                delete pdataCur.handle;
                pdataCur.events = {};
                for(type in events)for(i = 0, l = events[type].length; i < l; i++)jQuery.event.add(dest, type, events[type][i]);
            }
        }
        // 2. Copy user data
        if (dataUser.hasData(src)) {
            udataOld = dataUser.access(src);
            udataCur = jQuery.extend({}, udataOld);
            dataUser.set(dest, udataCur);
        }
    }
    // Fix IE bugs, see support tests
    function fixInput(src, dest) {
        var nodeName = dest.nodeName.toLowerCase();
        // Fails to persist the checked state of a cloned checkbox or radio button.
        if (nodeName === "input" && rcheckableType.test(src.type)) dest.checked = src.checked;
        else if (nodeName === "input" || nodeName === "textarea") dest.defaultValue = src.defaultValue;
    }
    function domManip(collection, args, callback, ignored) {
        // Flatten any nested arrays
        args = concat.apply([], args);
        var fragment, first, scripts, hasScripts, node, doc, i = 0, l = collection.length, iNoClone = l - 1, value = args[0], valueIsFunction = isFunction(value);
        // We can't cloneNode fragments that contain checked, in WebKit
        if (valueIsFunction || l > 1 && typeof value === "string" && !support.checkClone && rchecked.test(value)) return collection.each(function(index) {
            var self = collection.eq(index);
            if (valueIsFunction) args[0] = value.call(this, index, self.html());
            domManip(self, args, callback, ignored);
        });
        if (l) {
            fragment = buildFragment(args, collection[0].ownerDocument, false, collection, ignored);
            first = fragment.firstChild;
            if (fragment.childNodes.length === 1) fragment = first;
            // Require either new content or an interest in ignored elements to invoke the callback
            if (first || ignored) {
                scripts = jQuery.map(getAll(fragment, "script"), disableScript);
                hasScripts = scripts.length;
                // Use the original fragment for the last item
                // instead of the first because it can end up
                // being emptied incorrectly in certain situations (#8070).
                for(; i < l; i++){
                    node = fragment;
                    if (i !== iNoClone) {
                        node = jQuery.clone(node, true, true);
                        // Keep references to cloned scripts for later restoration
                        if (hasScripts) // Support: Android <=4.0 only, PhantomJS 1 only
                        // push.apply(_, arraylike) throws on ancient WebKit
                        jQuery.merge(scripts, getAll(node, "script"));
                    }
                    callback.call(collection[i], node, i);
                }
                if (hasScripts) {
                    doc = scripts[scripts.length - 1].ownerDocument;
                    // Reenable scripts
                    jQuery.map(scripts, restoreScript);
                    // Evaluate executable scripts on first document insertion
                    for(i = 0; i < hasScripts; i++){
                        node = scripts[i];
                        if (rscriptType.test(node.type || "") && !dataPriv.access(node, "globalEval") && jQuery.contains(doc, node)) {
                            if (node.src && (node.type || "").toLowerCase() !== "module") // Optional AJAX dependency, but won't run scripts if not present
                            {
                                if (jQuery._evalUrl) jQuery._evalUrl(node.src);
                            } else DOMEval(node.textContent.replace(rcleanScript, ""), doc, node);
                        }
                    }
                }
            }
        }
        return collection;
    }
    function remove(elem, selector, keepData) {
        var node, nodes = selector ? jQuery.filter(selector, elem) : elem, i = 0;
        for(; (node = nodes[i]) != null; i++){
            if (!keepData && node.nodeType === 1) jQuery.cleanData(getAll(node));
            if (node.parentNode) {
                if (keepData && jQuery.contains(node.ownerDocument, node)) setGlobalEval(getAll(node, "script"));
                node.parentNode.removeChild(node);
            }
        }
        return elem;
    }
    jQuery.extend({
        htmlPrefilter: function(html) {
            return html.replace(rxhtmlTag, "<$1></$2>");
        },
        clone: function(elem, dataAndEvents, deepDataAndEvents) {
            var i, l, srcElements, destElements, clone = elem.cloneNode(true), inPage = jQuery.contains(elem.ownerDocument, elem);
            // Fix IE cloning issues
            if (!support.noCloneChecked && (elem.nodeType === 1 || elem.nodeType === 11) && !jQuery.isXMLDoc(elem)) {
                // We eschew Sizzle here for performance reasons: https://jsperf.com/getall-vs-sizzle/2
                destElements = getAll(clone);
                srcElements = getAll(elem);
                for(i = 0, l = srcElements.length; i < l; i++)fixInput(srcElements[i], destElements[i]);
            }
            // Copy the events from the original to the clone
            if (dataAndEvents) {
                if (deepDataAndEvents) {
                    srcElements = srcElements || getAll(elem);
                    destElements = destElements || getAll(clone);
                    for(i = 0, l = srcElements.length; i < l; i++)cloneCopyEvent(srcElements[i], destElements[i]);
                } else cloneCopyEvent(elem, clone);
            }
            // Preserve script evaluation history
            destElements = getAll(clone, "script");
            if (destElements.length > 0) setGlobalEval(destElements, !inPage && getAll(elem, "script"));
            // Return the cloned set
            return clone;
        },
        cleanData: function(elems) {
            var data, elem, type, special = jQuery.event.special, i = 0;
            for(; (elem = elems[i]) !== undefined; i++)if (acceptData(elem)) {
                if (data = elem[dataPriv.expando]) {
                    if (data.events) {
                        for(type in data.events)if (special[type]) jQuery.event.remove(elem, type);
                        else jQuery.removeEvent(elem, type, data.handle);
                    }
                    // Support: Chrome <=35 - 45+
                    // Assign undefined instead of using delete, see Data#remove
                    elem[dataPriv.expando] = undefined;
                }
                if (elem[dataUser.expando]) // Support: Chrome <=35 - 45+
                // Assign undefined instead of using delete, see Data#remove
                elem[dataUser.expando] = undefined;
            }
        }
    });
    jQuery.fn.extend({
        detach: function(selector) {
            return remove(this, selector, true);
        },
        remove: function(selector) {
            return remove(this, selector);
        },
        text: function(value) {
            return access(this, function(value) {
                return value === undefined ? jQuery.text(this) : this.empty().each(function() {
                    if (this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9) this.textContent = value;
                });
            }, null, value, arguments.length);
        },
        append: function() {
            return domManip(this, arguments, function(elem) {
                if (this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9) {
                    var target = manipulationTarget(this, elem);
                    target.appendChild(elem);
                }
            });
        },
        prepend: function() {
            return domManip(this, arguments, function(elem) {
                if (this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9) {
                    var target = manipulationTarget(this, elem);
                    target.insertBefore(elem, target.firstChild);
                }
            });
        },
        before: function() {
            return domManip(this, arguments, function(elem) {
                if (this.parentNode) this.parentNode.insertBefore(elem, this);
            });
        },
        after: function() {
            return domManip(this, arguments, function(elem) {
                if (this.parentNode) this.parentNode.insertBefore(elem, this.nextSibling);
            });
        },
        empty: function() {
            var elem, i = 0;
            for(; (elem = this[i]) != null; i++)if (elem.nodeType === 1) {
                // Prevent memory leaks
                jQuery.cleanData(getAll(elem, false));
                // Remove any remaining nodes
                elem.textContent = "";
            }
            return this;
        },
        clone: function(dataAndEvents, deepDataAndEvents) {
            dataAndEvents = dataAndEvents == null ? false : dataAndEvents;
            deepDataAndEvents = deepDataAndEvents == null ? dataAndEvents : deepDataAndEvents;
            return this.map(function() {
                return jQuery.clone(this, dataAndEvents, deepDataAndEvents);
            });
        },
        html: function(value) {
            return access(this, function(value) {
                var elem = this[0] || {}, i = 0, l = this.length;
                if (value === undefined && elem.nodeType === 1) return elem.innerHTML;
                // See if we can take a shortcut and just use innerHTML
                if (typeof value === "string" && !rnoInnerhtml.test(value) && !wrapMap[(rtagName.exec(value) || [
                    "",
                    ""
                ])[1].toLowerCase()]) {
                    value = jQuery.htmlPrefilter(value);
                    try {
                        for(; i < l; i++){
                            elem = this[i] || {};
                            // Remove element nodes and prevent memory leaks
                            if (elem.nodeType === 1) {
                                jQuery.cleanData(getAll(elem, false));
                                elem.innerHTML = value;
                            }
                        }
                        elem = 0;
                    // If using innerHTML throws an exception, use the fallback method
                    } catch (e) {}
                }
                if (elem) this.empty().append(value);
            }, null, value, arguments.length);
        },
        replaceWith: function() {
            var ignored = [];
            // Make the changes, replacing each non-ignored context element with the new content
            return domManip(this, arguments, function(elem) {
                var parent = this.parentNode;
                if (jQuery.inArray(this, ignored) < 0) {
                    jQuery.cleanData(getAll(this));
                    if (parent) parent.replaceChild(elem, this);
                }
            // Force callback invocation
            }, ignored);
        }
    });
    jQuery.each({
        appendTo: "append",
        prependTo: "prepend",
        insertBefore: "before",
        insertAfter: "after",
        replaceAll: "replaceWith"
    }, function(name, original) {
        jQuery.fn[name] = function(selector) {
            var elems, ret = [], insert = jQuery(selector), last = insert.length - 1, i = 0;
            for(; i <= last; i++){
                elems = i === last ? this : this.clone(true);
                jQuery(insert[i])[original](elems);
                // Support: Android <=4.0 only, PhantomJS 1 only
                // .get() because push.apply(_, arraylike) throws on ancient WebKit
                push.apply(ret, elems.get());
            }
            return this.pushStack(ret);
        };
    });
    var rnumnonpx = new RegExp("^(" + pnum + ")(?!px)[a-z%]+$", "i");
    var getStyles = function(elem) {
        // Support: IE <=11 only, Firefox <=30 (#15098, #14150)
        // IE throws on elements created in popups
        // FF meanwhile throws on frame elements through "defaultView.getComputedStyle"
        var view = elem.ownerDocument.defaultView;
        if (!view || !view.opener) view = window1;
        return view.getComputedStyle(elem);
    };
    var rboxStyle = new RegExp(cssExpand.join("|"), "i");
    (function() {
        // Executing both pixelPosition & boxSizingReliable tests require only one layout
        // so they're executed at the same time to save the second computation.
        function computeStyleTests() {
            // This is a singleton, we need to execute it only once
            if (!div) return;
            container.style.cssText = "position:absolute;left:-11111px;width:60px;margin-top:1px;padding:0;border:0";
            div.style.cssText = "position:relative;display:block;box-sizing:border-box;overflow:scroll;margin:auto;border:1px;padding:1px;width:60%;top:1%";
            documentElement.appendChild(container).appendChild(div);
            var divStyle = window1.getComputedStyle(div);
            pixelPositionVal = divStyle.top !== "1%";
            // Support: Android 4.0 - 4.3 only, Firefox <=3 - 44
            reliableMarginLeftVal = roundPixelMeasures(divStyle.marginLeft) === 12;
            // Support: Android 4.0 - 4.3 only, Safari <=9.1 - 10.1, iOS <=7.0 - 9.3
            // Some styles come back with percentage values, even though they shouldn't
            div.style.right = "60%";
            pixelBoxStylesVal = roundPixelMeasures(divStyle.right) === 36;
            // Support: IE 9 - 11 only
            // Detect misreporting of content dimensions for box-sizing:border-box elements
            boxSizingReliableVal = roundPixelMeasures(divStyle.width) === 36;
            // Support: IE 9 only
            // Detect overflow:scroll screwiness (gh-3699)
            div.style.position = "absolute";
            scrollboxSizeVal = div.offsetWidth === 36 || "absolute";
            documentElement.removeChild(container);
            // Nullify the div so it wouldn't be stored in the memory and
            // it will also be a sign that checks already performed
            div = null;
        }
        function roundPixelMeasures(measure) {
            return Math.round(parseFloat(measure));
        }
        var pixelPositionVal, boxSizingReliableVal, scrollboxSizeVal, pixelBoxStylesVal, reliableMarginLeftVal, container = document.createElement("div"), div = document.createElement("div");
        // Finish early in limited (non-browser) environments
        if (!div.style) return;
        // Support: IE <=9 - 11 only
        // Style of cloned element affects source element cloned (#8908)
        div.style.backgroundClip = "content-box";
        div.cloneNode(true).style.backgroundClip = "";
        support.clearCloneStyle = div.style.backgroundClip === "content-box";
        jQuery.extend(support, {
            boxSizingReliable: function() {
                computeStyleTests();
                return boxSizingReliableVal;
            },
            pixelBoxStyles: function() {
                computeStyleTests();
                return pixelBoxStylesVal;
            },
            pixelPosition: function() {
                computeStyleTests();
                return pixelPositionVal;
            },
            reliableMarginLeft: function() {
                computeStyleTests();
                return reliableMarginLeftVal;
            },
            scrollboxSize: function() {
                computeStyleTests();
                return scrollboxSizeVal;
            }
        });
    })();
    function curCSS(elem, name, computed) {
        var width, minWidth, maxWidth, ret, // Support: Firefox 51+
        // Retrieving style before computed somehow
        // fixes an issue with getting wrong values
        // on detached elements
        style = elem.style;
        computed = computed || getStyles(elem);
        // getPropertyValue is needed for:
        //   .css('filter') (IE 9 only, #12537)
        //   .css('--customProperty) (#3144)
        if (computed) {
            ret = computed.getPropertyValue(name) || computed[name];
            if (ret === "" && !jQuery.contains(elem.ownerDocument, elem)) ret = jQuery.style(elem, name);
            // A tribute to the "awesome hack by Dean Edwards"
            // Android Browser returns percentage for some values,
            // but width seems to be reliably pixels.
            // This is against the CSSOM draft spec:
            // https://drafts.csswg.org/cssom/#resolved-values
            if (!support.pixelBoxStyles() && rnumnonpx.test(ret) && rboxStyle.test(name)) {
                // Remember the original values
                width = style.width;
                minWidth = style.minWidth;
                maxWidth = style.maxWidth;
                // Put in the new values to get a computed value out
                style.minWidth = style.maxWidth = style.width = ret;
                ret = computed.width;
                // Revert the changed values
                style.width = width;
                style.minWidth = minWidth;
                style.maxWidth = maxWidth;
            }
        }
        return ret !== undefined ? // Support: IE <=9 - 11 only
        // IE returns zIndex value as an integer.
        ret + "" : ret;
    }
    function addGetHookIf(conditionFn, hookFn) {
        // Define the hook, we'll check on the first run if it's really needed.
        return {
            get: function() {
                if (conditionFn()) {
                    // Hook not needed (or it's not possible to use it due
                    // to missing dependency), remove it.
                    delete this.get;
                    return;
                }
                // Hook needed; redefine it so that the support test is not executed again.
                return (this.get = hookFn).apply(this, arguments);
            }
        };
    }
    var // Swappable if display is none or starts with table
    // except "table", "table-cell", or "table-caption"
    // See here for display values: https://developer.mozilla.org/en-US/docs/CSS/display
    rdisplayswap = /^(none|table(?!-c[ea]).+)/, rcustomProp = /^--/, cssShow = {
        position: "absolute",
        visibility: "hidden",
        display: "block"
    }, cssNormalTransform = {
        letterSpacing: "0",
        fontWeight: "400"
    }, cssPrefixes = [
        "Webkit",
        "Moz",
        "ms"
    ], emptyStyle = document.createElement("div").style;
    // Return a css property mapped to a potentially vendor prefixed property
    function vendorPropName(name) {
        // Shortcut for names that are not vendor prefixed
        if (name in emptyStyle) return name;
        // Check for vendor prefixed names
        var capName = name[0].toUpperCase() + name.slice(1), i = cssPrefixes.length;
        while(i--){
            name = cssPrefixes[i] + capName;
            if (name in emptyStyle) return name;
        }
    }
    // Return a property mapped along what jQuery.cssProps suggests or to
    // a vendor prefixed property.
    function finalPropName(name) {
        var ret = jQuery.cssProps[name];
        if (!ret) ret = jQuery.cssProps[name] = vendorPropName(name) || name;
        return ret;
    }
    function setPositiveNumber(elem, value, subtract) {
        // Any relative (+/-) values have already been
        // normalized at this point
        var matches = rcssNum.exec(value);
        return matches ? // Guard against undefined "subtract", e.g., when used as in cssHooks
        Math.max(0, matches[2] - (subtract || 0)) + (matches[3] || "px") : value;
    }
    function boxModelAdjustment(elem, dimension, box, isBorderBox, styles, computedVal) {
        var i = dimension === "width" ? 1 : 0, extra = 0, delta = 0;
        // Adjustment may not be necessary
        if (box === (isBorderBox ? "border" : "content")) return 0;
        for(; i < 4; i += 2){
            // Both box models exclude margin
            if (box === "margin") delta += jQuery.css(elem, box + cssExpand[i], true, styles);
            // If we get here with a content-box, we're seeking "padding" or "border" or "margin"
            if (!isBorderBox) {
                // Add padding
                delta += jQuery.css(elem, "padding" + cssExpand[i], true, styles);
                // For "border" or "margin", add border
                if (box !== "padding") delta += jQuery.css(elem, "border" + cssExpand[i] + "Width", true, styles);
                else extra += jQuery.css(elem, "border" + cssExpand[i] + "Width", true, styles);
            // If we get here with a border-box (content + padding + border), we're seeking "content" or
            // "padding" or "margin"
            } else {
                // For "content", subtract padding
                if (box === "content") delta -= jQuery.css(elem, "padding" + cssExpand[i], true, styles);
                // For "content" or "padding", subtract border
                if (box !== "margin") delta -= jQuery.css(elem, "border" + cssExpand[i] + "Width", true, styles);
            }
        }
        // Account for positive content-box scroll gutter when requested by providing computedVal
        if (!isBorderBox && computedVal >= 0) // offsetWidth/offsetHeight is a rounded sum of content, padding, scroll gutter, and border
        // Assuming integer scroll gutter, subtract the rest and round down
        delta += Math.max(0, Math.ceil(elem["offset" + dimension[0].toUpperCase() + dimension.slice(1)] - computedVal - delta - extra - 0.5));
        return delta;
    }
    function getWidthOrHeight(elem, dimension, extra) {
        // Start with computed style
        var styles = getStyles(elem), val = curCSS(elem, dimension, styles), isBorderBox = jQuery.css(elem, "boxSizing", false, styles) === "border-box", valueIsBorderBox = isBorderBox;
        // Support: Firefox <=54
        // Return a confounding non-pixel value or feign ignorance, as appropriate.
        if (rnumnonpx.test(val)) {
            if (!extra) return val;
            val = "auto";
        }
        // Check for style in case a browser which returns unreliable values
        // for getComputedStyle silently falls back to the reliable elem.style
        valueIsBorderBox = valueIsBorderBox && (support.boxSizingReliable() || val === elem.style[dimension]);
        // Fall back to offsetWidth/offsetHeight when value is "auto"
        // This happens for inline elements with no explicit setting (gh-3571)
        // Support: Android <=4.1 - 4.3 only
        // Also use offsetWidth/offsetHeight for misreported inline dimensions (gh-3602)
        if (val === "auto" || !parseFloat(val) && jQuery.css(elem, "display", false, styles) === "inline") {
            val = elem["offset" + dimension[0].toUpperCase() + dimension.slice(1)];
            // offsetWidth/offsetHeight provide border-box values
            valueIsBorderBox = true;
        }
        // Normalize "" and auto
        val = parseFloat(val) || 0;
        // Adjust for the element's box model
        return val + boxModelAdjustment(elem, dimension, extra || (isBorderBox ? "border" : "content"), valueIsBorderBox, styles, // Provide the current computed size to request scroll gutter calculation (gh-3589)
        val) + "px";
    }
    jQuery.extend({
        // Add in style property hooks for overriding the default
        // behavior of getting and setting a style property
        cssHooks: {
            opacity: {
                get: function(elem, computed) {
                    if (computed) {
                        // We should always get a number back from opacity
                        var ret = curCSS(elem, "opacity");
                        return ret === "" ? "1" : ret;
                    }
                }
            }
        },
        // Don't automatically add "px" to these possibly-unitless properties
        cssNumber: {
            "animationIterationCount": true,
            "columnCount": true,
            "fillOpacity": true,
            "flexGrow": true,
            "flexShrink": true,
            "fontWeight": true,
            "lineHeight": true,
            "opacity": true,
            "order": true,
            "orphans": true,
            "widows": true,
            "zIndex": true,
            "zoom": true
        },
        // Add in properties whose names you wish to fix before
        // setting or getting the value
        cssProps: {},
        // Get and set the style property on a DOM Node
        style: function(elem, name, value, extra) {
            // Don't set styles on text and comment nodes
            if (!elem || elem.nodeType === 3 || elem.nodeType === 8 || !elem.style) return;
            // Make sure that we're working with the right name
            var ret, type, hooks, origName = camelCase(name), isCustomProp = rcustomProp.test(name), style = elem.style;
            // Make sure that we're working with the right name. We don't
            // want to query the value if it is a CSS custom property
            // since they are user-defined.
            if (!isCustomProp) name = finalPropName(origName);
            // Gets hook for the prefixed version, then unprefixed version
            hooks = jQuery.cssHooks[name] || jQuery.cssHooks[origName];
            // Check if we're setting a value
            if (value !== undefined) {
                type = typeof value;
                // Convert "+=" or "-=" to relative numbers (#7345)
                if (type === "string" && (ret = rcssNum.exec(value)) && ret[1]) {
                    value = adjustCSS(elem, name, ret);
                    // Fixes bug #9237
                    type = "number";
                }
                // Make sure that null and NaN values aren't set (#7116)
                if (value == null || value !== value) return;
                // If a number was passed in, add the unit (except for certain CSS properties)
                if (type === "number") value += ret && ret[3] || (jQuery.cssNumber[origName] ? "" : "px");
                // background-* props affect original clone's values
                if (!support.clearCloneStyle && value === "" && name.indexOf("background") === 0) style[name] = "inherit";
                // If a hook was provided, use that value, otherwise just set the specified value
                if (!hooks || !("set" in hooks) || (value = hooks.set(elem, value, extra)) !== undefined) {
                    if (isCustomProp) style.setProperty(name, value);
                    else style[name] = value;
                }
            } else {
                // If a hook was provided get the non-computed value from there
                if (hooks && "get" in hooks && (ret = hooks.get(elem, false, extra)) !== undefined) return ret;
                // Otherwise just get the value from the style object
                return style[name];
            }
        },
        css: function(elem, name, extra, styles) {
            var val, num, hooks, origName = camelCase(name), isCustomProp = rcustomProp.test(name);
            // Make sure that we're working with the right name. We don't
            // want to modify the value if it is a CSS custom property
            // since they are user-defined.
            if (!isCustomProp) name = finalPropName(origName);
            // Try prefixed name followed by the unprefixed name
            hooks = jQuery.cssHooks[name] || jQuery.cssHooks[origName];
            // If a hook was provided get the computed value from there
            if (hooks && "get" in hooks) val = hooks.get(elem, true, extra);
            // Otherwise, if a way to get the computed value exists, use that
            if (val === undefined) val = curCSS(elem, name, styles);
            // Convert "normal" to computed value
            if (val === "normal" && name in cssNormalTransform) val = cssNormalTransform[name];
            // Make numeric if forced or a qualifier was provided and val looks numeric
            if (extra === "" || extra) {
                num = parseFloat(val);
                return extra === true || isFinite(num) ? num || 0 : val;
            }
            return val;
        }
    });
    jQuery.each([
        "height",
        "width"
    ], function(i, dimension) {
        jQuery.cssHooks[dimension] = {
            get: function(elem, computed, extra) {
                if (computed) // Certain elements can have dimension info if we invisibly show them
                // but it must have a current display style that would benefit
                return rdisplayswap.test(jQuery.css(elem, "display")) && // Support: Safari 8+
                // Table columns in Safari have non-zero offsetWidth & zero
                // getBoundingClientRect().width unless display is changed.
                // Support: IE <=11 only
                // Running getBoundingClientRect on a disconnected node
                // in IE throws an error.
                (!elem.getClientRects().length || !elem.getBoundingClientRect().width) ? swap(elem, cssShow, function() {
                    return getWidthOrHeight(elem, dimension, extra);
                }) : getWidthOrHeight(elem, dimension, extra);
            },
            set: function(elem, value, extra) {
                var matches, styles = getStyles(elem), isBorderBox = jQuery.css(elem, "boxSizing", false, styles) === "border-box", subtract = extra && boxModelAdjustment(elem, dimension, extra, isBorderBox, styles);
                // Account for unreliable border-box dimensions by comparing offset* to computed and
                // faking a content-box to get border and padding (gh-3699)
                if (isBorderBox && support.scrollboxSize() === styles.position) subtract -= Math.ceil(elem["offset" + dimension[0].toUpperCase() + dimension.slice(1)] - parseFloat(styles[dimension]) - boxModelAdjustment(elem, dimension, "border", false, styles) - 0.5);
                // Convert to pixels if value adjustment is needed
                if (subtract && (matches = rcssNum.exec(value)) && (matches[3] || "px") !== "px") {
                    elem.style[dimension] = value;
                    value = jQuery.css(elem, dimension);
                }
                return setPositiveNumber(elem, value, subtract);
            }
        };
    });
    jQuery.cssHooks.marginLeft = addGetHookIf(support.reliableMarginLeft, function(elem, computed) {
        if (computed) return (parseFloat(curCSS(elem, "marginLeft")) || elem.getBoundingClientRect().left - swap(elem, {
            marginLeft: 0
        }, function() {
            return elem.getBoundingClientRect().left;
        })) + "px";
    });
    // These hooks are used by animate to expand properties
    jQuery.each({
        margin: "",
        padding: "",
        border: "Width"
    }, function(prefix, suffix) {
        jQuery.cssHooks[prefix + suffix] = {
            expand: function(value) {
                var i = 0, expanded = {}, // Assumes a single number if not a string
                parts = typeof value === "string" ? value.split(" ") : [
                    value
                ];
                for(; i < 4; i++)expanded[prefix + cssExpand[i] + suffix] = parts[i] || parts[i - 2] || parts[0];
                return expanded;
            }
        };
        if (prefix !== "margin") jQuery.cssHooks[prefix + suffix].set = setPositiveNumber;
    });
    jQuery.fn.extend({
        css: function(name, value) {
            return access(this, function(elem, name, value) {
                var styles, len, map = {}, i = 0;
                if (Array.isArray(name)) {
                    styles = getStyles(elem);
                    len = name.length;
                    for(; i < len; i++)map[name[i]] = jQuery.css(elem, name[i], false, styles);
                    return map;
                }
                return value !== undefined ? jQuery.style(elem, name, value) : jQuery.css(elem, name);
            }, name, value, arguments.length > 1);
        }
    });
    function Tween(elem, options, prop, end, easing) {
        return new Tween.prototype.init(elem, options, prop, end, easing);
    }
    jQuery.Tween = Tween;
    Tween.prototype = {
        constructor: Tween,
        init: function(elem, options, prop, end, easing, unit) {
            this.elem = elem;
            this.prop = prop;
            this.easing = easing || jQuery.easing._default;
            this.options = options;
            this.start = this.now = this.cur();
            this.end = end;
            this.unit = unit || (jQuery.cssNumber[prop] ? "" : "px");
        },
        cur: function() {
            var hooks = Tween.propHooks[this.prop];
            return hooks && hooks.get ? hooks.get(this) : Tween.propHooks._default.get(this);
        },
        run: function(percent) {
            var eased, hooks = Tween.propHooks[this.prop];
            if (this.options.duration) this.pos = eased = jQuery.easing[this.easing](percent, this.options.duration * percent, 0, 1, this.options.duration);
            else this.pos = eased = percent;
            this.now = (this.end - this.start) * eased + this.start;
            if (this.options.step) this.options.step.call(this.elem, this.now, this);
            if (hooks && hooks.set) hooks.set(this);
            else Tween.propHooks._default.set(this);
            return this;
        }
    };
    Tween.prototype.init.prototype = Tween.prototype;
    Tween.propHooks = {
        _default: {
            get: function(tween) {
                var result;
                // Use a property on the element directly when it is not a DOM element,
                // or when there is no matching style property that exists.
                if (tween.elem.nodeType !== 1 || tween.elem[tween.prop] != null && tween.elem.style[tween.prop] == null) return tween.elem[tween.prop];
                // Passing an empty string as a 3rd parameter to .css will automatically
                // attempt a parseFloat and fallback to a string if the parse fails.
                // Simple values such as "10px" are parsed to Float;
                // complex values such as "rotate(1rad)" are returned as-is.
                result = jQuery.css(tween.elem, tween.prop, "");
                // Empty strings, null, undefined and "auto" are converted to 0.
                return !result || result === "auto" ? 0 : result;
            },
            set: function(tween) {
                // Use step hook for back compat.
                // Use cssHook if its there.
                // Use .style if available and use plain properties where available.
                if (jQuery.fx.step[tween.prop]) jQuery.fx.step[tween.prop](tween);
                else if (tween.elem.nodeType === 1 && (tween.elem.style[jQuery.cssProps[tween.prop]] != null || jQuery.cssHooks[tween.prop])) jQuery.style(tween.elem, tween.prop, tween.now + tween.unit);
                else tween.elem[tween.prop] = tween.now;
            }
        }
    };
    // Support: IE <=9 only
    // Panic based approach to setting things on disconnected nodes
    Tween.propHooks.scrollTop = Tween.propHooks.scrollLeft = {
        set: function(tween) {
            if (tween.elem.nodeType && tween.elem.parentNode) tween.elem[tween.prop] = tween.now;
        }
    };
    jQuery.easing = {
        linear: function(p) {
            return p;
        },
        swing: function(p) {
            return 0.5 - Math.cos(p * Math.PI) / 2;
        },
        _default: "swing"
    };
    jQuery.fx = Tween.prototype.init;
    // Back compat <1.8 extension point
    jQuery.fx.step = {};
    var fxNow, inProgress, rfxtypes = /^(?:toggle|show|hide)$/, rrun = /queueHooks$/;
    function schedule() {
        if (inProgress) {
            if (document.hidden === false && window1.requestAnimationFrame) window1.requestAnimationFrame(schedule);
            else window1.setTimeout(schedule, jQuery.fx.interval);
            jQuery.fx.tick();
        }
    }
    // Animations created synchronously will run synchronously
    function createFxNow() {
        window1.setTimeout(function() {
            fxNow = undefined;
        });
        return fxNow = Date.now();
    }
    // Generate parameters to create a standard animation
    function genFx(type, includeWidth) {
        var which, i = 0, attrs = {
            height: type
        };
        // If we include width, step value is 1 to do all cssExpand values,
        // otherwise step value is 2 to skip over Left and Right
        includeWidth = includeWidth ? 1 : 0;
        for(; i < 4; i += 2 - includeWidth){
            which = cssExpand[i];
            attrs["margin" + which] = attrs["padding" + which] = type;
        }
        if (includeWidth) attrs.opacity = attrs.width = type;
        return attrs;
    }
    function createTween(value, prop, animation) {
        var tween, collection = (Animation.tweeners[prop] || []).concat(Animation.tweeners["*"]), index = 0, length = collection.length;
        for(; index < length; index++){
            if (tween = collection[index].call(animation, prop, value)) // We're done with this property
            return tween;
        }
    }
    function defaultPrefilter(elem, props, opts) {
        var prop, value, toggle, hooks, oldfire, propTween, restoreDisplay, display, isBox = "width" in props || "height" in props, anim = this, orig = {}, style = elem.style, hidden = elem.nodeType && isHiddenWithinTree(elem), dataShow = dataPriv.get(elem, "fxshow");
        // Queue-skipping animations hijack the fx hooks
        if (!opts.queue) {
            hooks = jQuery._queueHooks(elem, "fx");
            if (hooks.unqueued == null) {
                hooks.unqueued = 0;
                oldfire = hooks.empty.fire;
                hooks.empty.fire = function() {
                    if (!hooks.unqueued) oldfire();
                };
            }
            hooks.unqueued++;
            anim.always(function() {
                // Ensure the complete handler is called before this completes
                anim.always(function() {
                    hooks.unqueued--;
                    if (!jQuery.queue(elem, "fx").length) hooks.empty.fire();
                });
            });
        }
        // Detect show/hide animations
        for(prop in props){
            value = props[prop];
            if (rfxtypes.test(value)) {
                delete props[prop];
                toggle = toggle || value === "toggle";
                if (value === (hidden ? "hide" : "show")) {
                    // Pretend to be hidden if this is a "show" and
                    // there is still data from a stopped show/hide
                    if (value === "show" && dataShow && dataShow[prop] !== undefined) hidden = true;
                    else continue;
                }
                orig[prop] = dataShow && dataShow[prop] || jQuery.style(elem, prop);
            }
        }
        // Bail out if this is a no-op like .hide().hide()
        propTween = !jQuery.isEmptyObject(props);
        if (!propTween && jQuery.isEmptyObject(orig)) return;
        // Restrict "overflow" and "display" styles during box animations
        if (isBox && elem.nodeType === 1) {
            // Support: IE <=9 - 11, Edge 12 - 15
            // Record all 3 overflow attributes because IE does not infer the shorthand
            // from identically-valued overflowX and overflowY and Edge just mirrors
            // the overflowX value there.
            opts.overflow = [
                style.overflow,
                style.overflowX,
                style.overflowY
            ];
            // Identify a display type, preferring old show/hide data over the CSS cascade
            restoreDisplay = dataShow && dataShow.display;
            if (restoreDisplay == null) restoreDisplay = dataPriv.get(elem, "display");
            display = jQuery.css(elem, "display");
            if (display === "none") {
                if (restoreDisplay) display = restoreDisplay;
                else {
                    // Get nonempty value(s) by temporarily forcing visibility
                    showHide([
                        elem
                    ], true);
                    restoreDisplay = elem.style.display || restoreDisplay;
                    display = jQuery.css(elem, "display");
                    showHide([
                        elem
                    ]);
                }
            }
            // Animate inline elements as inline-block
            if (display === "inline" || display === "inline-block" && restoreDisplay != null) {
                if (jQuery.css(elem, "float") === "none") {
                    // Restore the original display value at the end of pure show/hide animations
                    if (!propTween) {
                        anim.done(function() {
                            style.display = restoreDisplay;
                        });
                        if (restoreDisplay == null) {
                            display = style.display;
                            restoreDisplay = display === "none" ? "" : display;
                        }
                    }
                    style.display = "inline-block";
                }
            }
        }
        if (opts.overflow) {
            style.overflow = "hidden";
            anim.always(function() {
                style.overflow = opts.overflow[0];
                style.overflowX = opts.overflow[1];
                style.overflowY = opts.overflow[2];
            });
        }
        // Implement show/hide animations
        propTween = false;
        for(prop in orig){
            // General show/hide setup for this element animation
            if (!propTween) {
                if (dataShow) {
                    if ("hidden" in dataShow) hidden = dataShow.hidden;
                } else dataShow = dataPriv.access(elem, "fxshow", {
                    display: restoreDisplay
                });
                // Store hidden/visible for toggle so `.stop().toggle()` "reverses"
                if (toggle) dataShow.hidden = !hidden;
                // Show elements before animating them
                if (hidden) showHide([
                    elem
                ], true);
                /* eslint-disable no-loop-func */ anim.done(function() {
                    /* eslint-enable no-loop-func */ // The final step of a "hide" animation is actually hiding the element
                    if (!hidden) showHide([
                        elem
                    ]);
                    dataPriv.remove(elem, "fxshow");
                    for(prop in orig)jQuery.style(elem, prop, orig[prop]);
                });
            }
            // Per-property setup
            propTween = createTween(hidden ? dataShow[prop] : 0, prop, anim);
            if (!(prop in dataShow)) {
                dataShow[prop] = propTween.start;
                if (hidden) {
                    propTween.end = propTween.start;
                    propTween.start = 0;
                }
            }
        }
    }
    function propFilter(props, specialEasing) {
        var index, name, easing, value, hooks;
        // camelCase, specialEasing and expand cssHook pass
        for(index in props){
            name = camelCase(index);
            easing = specialEasing[name];
            value = props[index];
            if (Array.isArray(value)) {
                easing = value[1];
                value = props[index] = value[0];
            }
            if (index !== name) {
                props[name] = value;
                delete props[index];
            }
            hooks = jQuery.cssHooks[name];
            if (hooks && "expand" in hooks) {
                value = hooks.expand(value);
                delete props[name];
                // Not quite $.extend, this won't overwrite existing keys.
                // Reusing 'index' because we have the correct "name"
                for(index in value)if (!(index in props)) {
                    props[index] = value[index];
                    specialEasing[index] = easing;
                }
            } else specialEasing[name] = easing;
        }
    }
    function Animation(elem, properties, options) {
        var result, stopped, index = 0, length = Animation.prefilters.length, deferred = jQuery.Deferred().always(function() {
            // Don't match elem in the :animated selector
            delete tick.elem;
        }), tick = function() {
            if (stopped) return false;
            var currentTime = fxNow || createFxNow(), remaining = Math.max(0, animation.startTime + animation.duration - currentTime), // Support: Android 2.3 only
            // Archaic crash bug won't allow us to use `1 - ( 0.5 || 0 )` (#12497)
            temp = remaining / animation.duration || 0, percent = 1 - temp, index = 0, length = animation.tweens.length;
            for(; index < length; index++)animation.tweens[index].run(percent);
            deferred.notifyWith(elem, [
                animation,
                percent,
                remaining
            ]);
            // If there's more to do, yield
            if (percent < 1 && length) return remaining;
            // If this was an empty animation, synthesize a final progress notification
            if (!length) deferred.notifyWith(elem, [
                animation,
                1,
                0
            ]);
            // Resolve the animation and report its conclusion
            deferred.resolveWith(elem, [
                animation
            ]);
            return false;
        }, animation = deferred.promise({
            elem: elem,
            props: jQuery.extend({}, properties),
            opts: jQuery.extend(true, {
                specialEasing: {},
                easing: jQuery.easing._default
            }, options),
            originalProperties: properties,
            originalOptions: options,
            startTime: fxNow || createFxNow(),
            duration: options.duration,
            tweens: [],
            createTween: function(prop, end) {
                var tween = jQuery.Tween(elem, animation.opts, prop, end, animation.opts.specialEasing[prop] || animation.opts.easing);
                animation.tweens.push(tween);
                return tween;
            },
            stop: function(gotoEnd) {
                var index = 0, // If we are going to the end, we want to run all the tweens
                // otherwise we skip this part
                length = gotoEnd ? animation.tweens.length : 0;
                if (stopped) return this;
                stopped = true;
                for(; index < length; index++)animation.tweens[index].run(1);
                // Resolve when we played the last frame; otherwise, reject
                if (gotoEnd) {
                    deferred.notifyWith(elem, [
                        animation,
                        1,
                        0
                    ]);
                    deferred.resolveWith(elem, [
                        animation,
                        gotoEnd
                    ]);
                } else deferred.rejectWith(elem, [
                    animation,
                    gotoEnd
                ]);
                return this;
            }
        }), props = animation.props;
        propFilter(props, animation.opts.specialEasing);
        for(; index < length; index++){
            result = Animation.prefilters[index].call(animation, elem, props, animation.opts);
            if (result) {
                if (isFunction(result.stop)) jQuery._queueHooks(animation.elem, animation.opts.queue).stop = result.stop.bind(result);
                return result;
            }
        }
        jQuery.map(props, createTween, animation);
        if (isFunction(animation.opts.start)) animation.opts.start.call(elem, animation);
        // Attach callbacks from options
        animation.progress(animation.opts.progress).done(animation.opts.done, animation.opts.complete).fail(animation.opts.fail).always(animation.opts.always);
        jQuery.fx.timer(jQuery.extend(tick, {
            elem: elem,
            anim: animation,
            queue: animation.opts.queue
        }));
        return animation;
    }
    jQuery.Animation = jQuery.extend(Animation, {
        tweeners: {
            "*": [
                function(prop, value) {
                    var tween = this.createTween(prop, value);
                    adjustCSS(tween.elem, prop, rcssNum.exec(value), tween);
                    return tween;
                }
            ]
        },
        tweener: function(props, callback) {
            if (isFunction(props)) {
                callback = props;
                props = [
                    "*"
                ];
            } else props = props.match(rnothtmlwhite);
            var prop, index = 0, length = props.length;
            for(; index < length; index++){
                prop = props[index];
                Animation.tweeners[prop] = Animation.tweeners[prop] || [];
                Animation.tweeners[prop].unshift(callback);
            }
        },
        prefilters: [
            defaultPrefilter
        ],
        prefilter: function(callback, prepend) {
            if (prepend) Animation.prefilters.unshift(callback);
            else Animation.prefilters.push(callback);
        }
    });
    jQuery.speed = function(speed, easing, fn) {
        var opt = speed && typeof speed === "object" ? jQuery.extend({}, speed) : {
            complete: fn || !fn && easing || isFunction(speed) && speed,
            duration: speed,
            easing: fn && easing || easing && !isFunction(easing) && easing
        };
        // Go to the end state if fx are off
        if (jQuery.fx.off) opt.duration = 0;
        else if (typeof opt.duration !== "number") {
            if (opt.duration in jQuery.fx.speeds) opt.duration = jQuery.fx.speeds[opt.duration];
            else opt.duration = jQuery.fx.speeds._default;
        }
        // Normalize opt.queue - true/undefined/null -> "fx"
        if (opt.queue == null || opt.queue === true) opt.queue = "fx";
        // Queueing
        opt.old = opt.complete;
        opt.complete = function() {
            if (isFunction(opt.old)) opt.old.call(this);
            if (opt.queue) jQuery.dequeue(this, opt.queue);
        };
        return opt;
    };
    jQuery.fn.extend({
        fadeTo: function(speed, to, easing, callback) {
            // Show any hidden elements after setting opacity to 0
            return this.filter(isHiddenWithinTree).css("opacity", 0).show()// Animate to the value specified
            .end().animate({
                opacity: to
            }, speed, easing, callback);
        },
        animate: function(prop, speed, easing, callback) {
            var empty = jQuery.isEmptyObject(prop), optall = jQuery.speed(speed, easing, callback), doAnimation = function() {
                // Operate on a copy of prop so per-property easing won't be lost
                var anim = Animation(this, jQuery.extend({}, prop), optall);
                // Empty animations, or finishing resolves immediately
                if (empty || dataPriv.get(this, "finish")) anim.stop(true);
            };
            doAnimation.finish = doAnimation;
            return empty || optall.queue === false ? this.each(doAnimation) : this.queue(optall.queue, doAnimation);
        },
        stop: function(type, clearQueue, gotoEnd) {
            var stopQueue = function(hooks) {
                var stop = hooks.stop;
                delete hooks.stop;
                stop(gotoEnd);
            };
            if (typeof type !== "string") {
                gotoEnd = clearQueue;
                clearQueue = type;
                type = undefined;
            }
            if (clearQueue && type !== false) this.queue(type || "fx", []);
            return this.each(function() {
                var dequeue = true, index = type != null && type + "queueHooks", timers = jQuery.timers, data = dataPriv.get(this);
                if (index) {
                    if (data[index] && data[index].stop) stopQueue(data[index]);
                } else {
                    for(index in data)if (data[index] && data[index].stop && rrun.test(index)) stopQueue(data[index]);
                }
                for(index = timers.length; index--;)if (timers[index].elem === this && (type == null || timers[index].queue === type)) {
                    timers[index].anim.stop(gotoEnd);
                    dequeue = false;
                    timers.splice(index, 1);
                }
                // Start the next in the queue if the last step wasn't forced.
                // Timers currently will call their complete callbacks, which
                // will dequeue but only if they were gotoEnd.
                if (dequeue || !gotoEnd) jQuery.dequeue(this, type);
            });
        },
        finish: function(type) {
            if (type !== false) type = type || "fx";
            return this.each(function() {
                var index, data = dataPriv.get(this), queue = data[type + "queue"], hooks = data[type + "queueHooks"], timers = jQuery.timers, length = queue ? queue.length : 0;
                // Enable finishing flag on private data
                data.finish = true;
                // Empty the queue first
                jQuery.queue(this, type, []);
                if (hooks && hooks.stop) hooks.stop.call(this, true);
                // Look for any active animations, and finish them
                for(index = timers.length; index--;)if (timers[index].elem === this && timers[index].queue === type) {
                    timers[index].anim.stop(true);
                    timers.splice(index, 1);
                }
                // Look for any animations in the old queue and finish them
                for(index = 0; index < length; index++)if (queue[index] && queue[index].finish) queue[index].finish.call(this);
                // Turn off finishing flag
                delete data.finish;
            });
        }
    });
    jQuery.each([
        "toggle",
        "show",
        "hide"
    ], function(i, name) {
        var cssFn = jQuery.fn[name];
        jQuery.fn[name] = function(speed, easing, callback) {
            return speed == null || typeof speed === "boolean" ? cssFn.apply(this, arguments) : this.animate(genFx(name, true), speed, easing, callback);
        };
    });
    // Generate shortcuts for custom animations
    jQuery.each({
        slideDown: genFx("show"),
        slideUp: genFx("hide"),
        slideToggle: genFx("toggle"),
        fadeIn: {
            opacity: "show"
        },
        fadeOut: {
            opacity: "hide"
        },
        fadeToggle: {
            opacity: "toggle"
        }
    }, function(name, props) {
        jQuery.fn[name] = function(speed, easing, callback) {
            return this.animate(props, speed, easing, callback);
        };
    });
    jQuery.timers = [];
    jQuery.fx.tick = function() {
        var timer, i = 0, timers = jQuery.timers;
        fxNow = Date.now();
        for(; i < timers.length; i++){
            timer = timers[i];
            // Run the timer and safely remove it when done (allowing for external removal)
            if (!timer() && timers[i] === timer) timers.splice(i--, 1);
        }
        if (!timers.length) jQuery.fx.stop();
        fxNow = undefined;
    };
    jQuery.fx.timer = function(timer) {
        jQuery.timers.push(timer);
        jQuery.fx.start();
    };
    jQuery.fx.interval = 13;
    jQuery.fx.start = function() {
        if (inProgress) return;
        inProgress = true;
        schedule();
    };
    jQuery.fx.stop = function() {
        inProgress = null;
    };
    jQuery.fx.speeds = {
        slow: 600,
        fast: 200,
        // Default speed
        _default: 400
    };
    // Based off of the plugin by Clint Helfers, with permission.
    // https://web.archive.org/web/20100324014747/http://blindsignals.com/index.php/2009/07/jquery-delay/
    jQuery.fn.delay = function(time, type) {
        time = jQuery.fx ? jQuery.fx.speeds[time] || time : time;
        type = type || "fx";
        return this.queue(type, function(next, hooks) {
            var timeout = window1.setTimeout(next, time);
            hooks.stop = function() {
                window1.clearTimeout(timeout);
            };
        });
    };
    (function() {
        var input = document.createElement("input"), select = document.createElement("select"), opt = select.appendChild(document.createElement("option"));
        input.type = "checkbox";
        // Support: Android <=4.3 only
        // Default value for a checkbox should be "on"
        support.checkOn = input.value !== "";
        // Support: IE <=11 only
        // Must access selectedIndex to make default options select
        support.optSelected = opt.selected;
        // Support: IE <=11 only
        // An input loses its value after becoming a radio
        input = document.createElement("input");
        input.value = "t";
        input.type = "radio";
        support.radioValue = input.value === "t";
    })();
    var boolHook, attrHandle = jQuery.expr.attrHandle;
    jQuery.fn.extend({
        attr: function(name, value) {
            return access(this, jQuery.attr, name, value, arguments.length > 1);
        },
        removeAttr: function(name) {
            return this.each(function() {
                jQuery.removeAttr(this, name);
            });
        }
    });
    jQuery.extend({
        attr: function(elem, name, value) {
            var ret, hooks, nType = elem.nodeType;
            // Don't get/set attributes on text, comment and attribute nodes
            if (nType === 3 || nType === 8 || nType === 2) return;
            // Fallback to prop when attributes are not supported
            if (typeof elem.getAttribute === "undefined") return jQuery.prop(elem, name, value);
            // Attribute hooks are determined by the lowercase version
            // Grab necessary hook if one is defined
            if (nType !== 1 || !jQuery.isXMLDoc(elem)) hooks = jQuery.attrHooks[name.toLowerCase()] || (jQuery.expr.match.bool.test(name) ? boolHook : undefined);
            if (value !== undefined) {
                if (value === null) {
                    jQuery.removeAttr(elem, name);
                    return;
                }
                if (hooks && "set" in hooks && (ret = hooks.set(elem, value, name)) !== undefined) return ret;
                elem.setAttribute(name, value + "");
                return value;
            }
            if (hooks && "get" in hooks && (ret = hooks.get(elem, name)) !== null) return ret;
            ret = jQuery.find.attr(elem, name);
            // Non-existent attributes return null, we normalize to undefined
            return ret == null ? undefined : ret;
        },
        attrHooks: {
            type: {
                set: function(elem, value) {
                    if (!support.radioValue && value === "radio" && nodeName(elem, "input")) {
                        var val = elem.value;
                        elem.setAttribute("type", value);
                        if (val) elem.value = val;
                        return value;
                    }
                }
            }
        },
        removeAttr: function(elem, value) {
            var name, i = 0, // Attribute names can contain non-HTML whitespace characters
            // https://html.spec.whatwg.org/multipage/syntax.html#attributes-2
            attrNames = value && value.match(rnothtmlwhite);
            if (attrNames && elem.nodeType === 1) while(name = attrNames[i++])elem.removeAttribute(name);
        }
    });
    // Hooks for boolean attributes
    boolHook = {
        set: function(elem, value, name) {
            if (value === false) // Remove boolean attributes when set to false
            jQuery.removeAttr(elem, name);
            else elem.setAttribute(name, name);
            return name;
        }
    };
    jQuery.each(jQuery.expr.match.bool.source.match(/\w+/g), function(i, name) {
        var getter = attrHandle[name] || jQuery.find.attr;
        attrHandle[name] = function(elem, name, isXML) {
            var ret, handle, lowercaseName = name.toLowerCase();
            if (!isXML) {
                // Avoid an infinite loop by temporarily removing this function from the getter
                handle = attrHandle[lowercaseName];
                attrHandle[lowercaseName] = ret;
                ret = getter(elem, name, isXML) != null ? lowercaseName : null;
                attrHandle[lowercaseName] = handle;
            }
            return ret;
        };
    });
    var rfocusable = /^(?:input|select|textarea|button)$/i, rclickable = /^(?:a|area)$/i;
    jQuery.fn.extend({
        prop: function(name, value) {
            return access(this, jQuery.prop, name, value, arguments.length > 1);
        },
        removeProp: function(name) {
            return this.each(function() {
                delete this[jQuery.propFix[name] || name];
            });
        }
    });
    jQuery.extend({
        prop: function(elem, name, value) {
            var ret, hooks, nType = elem.nodeType;
            // Don't get/set properties on text, comment and attribute nodes
            if (nType === 3 || nType === 8 || nType === 2) return;
            if (nType !== 1 || !jQuery.isXMLDoc(elem)) {
                // Fix name and attach hooks
                name = jQuery.propFix[name] || name;
                hooks = jQuery.propHooks[name];
            }
            if (value !== undefined) {
                if (hooks && "set" in hooks && (ret = hooks.set(elem, value, name)) !== undefined) return ret;
                return elem[name] = value;
            }
            if (hooks && "get" in hooks && (ret = hooks.get(elem, name)) !== null) return ret;
            return elem[name];
        },
        propHooks: {
            tabIndex: {
                get: function(elem) {
                    // Support: IE <=9 - 11 only
                    // elem.tabIndex doesn't always return the
                    // correct value when it hasn't been explicitly set
                    // https://web.archive.org/web/20141116233347/http://fluidproject.org/blog/2008/01/09/getting-setting-and-removing-tabindex-values-with-javascript/
                    // Use proper attribute retrieval(#12072)
                    var tabindex = jQuery.find.attr(elem, "tabindex");
                    if (tabindex) return parseInt(tabindex, 10);
                    if (rfocusable.test(elem.nodeName) || rclickable.test(elem.nodeName) && elem.href) return 0;
                    return -1;
                }
            }
        },
        propFix: {
            "for": "htmlFor",
            "class": "className"
        }
    });
    // Support: IE <=11 only
    // Accessing the selectedIndex property
    // forces the browser to respect setting selected
    // on the option
    // The getter ensures a default option is selected
    // when in an optgroup
    // eslint rule "no-unused-expressions" is disabled for this code
    // since it considers such accessions noop
    if (!support.optSelected) jQuery.propHooks.selected = {
        get: function(elem) {
            /* eslint no-unused-expressions: "off" */ var parent = elem.parentNode;
            if (parent && parent.parentNode) parent.parentNode.selectedIndex;
            return null;
        },
        set: function(elem) {
            /* eslint no-unused-expressions: "off" */ var parent = elem.parentNode;
            if (parent) {
                parent.selectedIndex;
                if (parent.parentNode) parent.parentNode.selectedIndex;
            }
        }
    };
    jQuery.each([
        "tabIndex",
        "readOnly",
        "maxLength",
        "cellSpacing",
        "cellPadding",
        "rowSpan",
        "colSpan",
        "useMap",
        "frameBorder",
        "contentEditable"
    ], function() {
        jQuery.propFix[this.toLowerCase()] = this;
    });
    // Strip and collapse whitespace according to HTML spec
    // https://infra.spec.whatwg.org/#strip-and-collapse-ascii-whitespace
    function stripAndCollapse(value) {
        var tokens = value.match(rnothtmlwhite) || [];
        return tokens.join(" ");
    }
    function getClass(elem) {
        return elem.getAttribute && elem.getAttribute("class") || "";
    }
    function classesToArray(value) {
        if (Array.isArray(value)) return value;
        if (typeof value === "string") return value.match(rnothtmlwhite) || [];
        return [];
    }
    jQuery.fn.extend({
        addClass: function(value) {
            var classes, elem, cur, curValue, clazz, j, finalValue, i = 0;
            if (isFunction(value)) return this.each(function(j) {
                jQuery(this).addClass(value.call(this, j, getClass(this)));
            });
            classes = classesToArray(value);
            if (classes.length) while(elem = this[i++]){
                curValue = getClass(elem);
                cur = elem.nodeType === 1 && " " + stripAndCollapse(curValue) + " ";
                if (cur) {
                    j = 0;
                    while(clazz = classes[j++])if (cur.indexOf(" " + clazz + " ") < 0) cur += clazz + " ";
                    // Only assign if different to avoid unneeded rendering.
                    finalValue = stripAndCollapse(cur);
                    if (curValue !== finalValue) elem.setAttribute("class", finalValue);
                }
            }
            return this;
        },
        removeClass: function(value) {
            var classes, elem, cur, curValue, clazz, j, finalValue, i = 0;
            if (isFunction(value)) return this.each(function(j) {
                jQuery(this).removeClass(value.call(this, j, getClass(this)));
            });
            if (!arguments.length) return this.attr("class", "");
            classes = classesToArray(value);
            if (classes.length) while(elem = this[i++]){
                curValue = getClass(elem);
                // This expression is here for better compressibility (see addClass)
                cur = elem.nodeType === 1 && " " + stripAndCollapse(curValue) + " ";
                if (cur) {
                    j = 0;
                    while(clazz = classes[j++])// Remove *all* instances
                    while(cur.indexOf(" " + clazz + " ") > -1)cur = cur.replace(" " + clazz + " ", " ");
                    // Only assign if different to avoid unneeded rendering.
                    finalValue = stripAndCollapse(cur);
                    if (curValue !== finalValue) elem.setAttribute("class", finalValue);
                }
            }
            return this;
        },
        toggleClass: function(value, stateVal) {
            var type = typeof value, isValidValue = type === "string" || Array.isArray(value);
            if (typeof stateVal === "boolean" && isValidValue) return stateVal ? this.addClass(value) : this.removeClass(value);
            if (isFunction(value)) return this.each(function(i) {
                jQuery(this).toggleClass(value.call(this, i, getClass(this), stateVal), stateVal);
            });
            return this.each(function() {
                var className, i, self, classNames;
                if (isValidValue) {
                    // Toggle individual class names
                    i = 0;
                    self = jQuery(this);
                    classNames = classesToArray(value);
                    while(className = classNames[i++])// Check each className given, space separated list
                    if (self.hasClass(className)) self.removeClass(className);
                    else self.addClass(className);
                // Toggle whole class name
                } else if (value === undefined || type === "boolean") {
                    className = getClass(this);
                    if (className) // Store className if set
                    dataPriv.set(this, "__className__", className);
                    // If the element has a class name or if we're passed `false`,
                    // then remove the whole classname (if there was one, the above saved it).
                    // Otherwise bring back whatever was previously saved (if anything),
                    // falling back to the empty string if nothing was stored.
                    if (this.setAttribute) this.setAttribute("class", className || value === false ? "" : dataPriv.get(this, "__className__") || "");
                }
            });
        },
        hasClass: function(selector) {
            var className, elem, i = 0;
            className = " " + selector + " ";
            while(elem = this[i++]){
                if (elem.nodeType === 1 && (" " + stripAndCollapse(getClass(elem)) + " ").indexOf(className) > -1) return true;
            }
            return false;
        }
    });
    var rreturn = /\r/g;
    jQuery.fn.extend({
        val: function(value) {
            var hooks, ret, valueIsFunction, elem = this[0];
            if (!arguments.length) {
                if (elem) {
                    hooks = jQuery.valHooks[elem.type] || jQuery.valHooks[elem.nodeName.toLowerCase()];
                    if (hooks && "get" in hooks && (ret = hooks.get(elem, "value")) !== undefined) return ret;
                    ret = elem.value;
                    // Handle most common string cases
                    if (typeof ret === "string") return ret.replace(rreturn, "");
                    // Handle cases where value is null/undef or number
                    return ret == null ? "" : ret;
                }
                return;
            }
            valueIsFunction = isFunction(value);
            return this.each(function(i) {
                var val;
                if (this.nodeType !== 1) return;
                if (valueIsFunction) val = value.call(this, i, jQuery(this).val());
                else val = value;
                // Treat null/undefined as ""; convert numbers to string
                if (val == null) val = "";
                else if (typeof val === "number") val += "";
                else if (Array.isArray(val)) val = jQuery.map(val, function(value) {
                    return value == null ? "" : value + "";
                });
                hooks = jQuery.valHooks[this.type] || jQuery.valHooks[this.nodeName.toLowerCase()];
                // If set returns undefined, fall back to normal setting
                if (!hooks || !("set" in hooks) || hooks.set(this, val, "value") === undefined) this.value = val;
            });
        }
    });
    jQuery.extend({
        valHooks: {
            option: {
                get: function(elem) {
                    var val = jQuery.find.attr(elem, "value");
                    return val != null ? val : // Support: IE <=10 - 11 only
                    // option.text throws exceptions (#14686, #14858)
                    // Strip and collapse whitespace
                    // https://html.spec.whatwg.org/#strip-and-collapse-whitespace
                    stripAndCollapse(jQuery.text(elem));
                }
            },
            select: {
                get: function(elem) {
                    var value, option, i, options = elem.options, index = elem.selectedIndex, one = elem.type === "select-one", values = one ? null : [], max = one ? index + 1 : options.length;
                    if (index < 0) i = max;
                    else i = one ? index : 0;
                    // Loop through all the selected options
                    for(; i < max; i++){
                        option = options[i];
                        // Support: IE <=9 only
                        // IE8-9 doesn't update selected after form reset (#2551)
                        if ((option.selected || i === index) && // Don't return options that are disabled or in a disabled optgroup
                        !option.disabled && (!option.parentNode.disabled || !nodeName(option.parentNode, "optgroup"))) {
                            // Get the specific value for the option
                            value = jQuery(option).val();
                            // We don't need an array for one selects
                            if (one) return value;
                            // Multi-Selects return an array
                            values.push(value);
                        }
                    }
                    return values;
                },
                set: function(elem, value) {
                    var optionSet, option, options = elem.options, values = jQuery.makeArray(value), i = options.length;
                    while(i--){
                        option = options[i];
                        /* eslint-disable no-cond-assign */ if (option.selected = jQuery.inArray(jQuery.valHooks.option.get(option), values) > -1) optionSet = true;
                    /* eslint-enable no-cond-assign */ }
                    // Force browsers to behave consistently when non-matching value is set
                    if (!optionSet) elem.selectedIndex = -1;
                    return values;
                }
            }
        }
    });
    // Radios and checkboxes getter/setter
    jQuery.each([
        "radio",
        "checkbox"
    ], function() {
        jQuery.valHooks[this] = {
            set: function(elem, value) {
                if (Array.isArray(value)) return elem.checked = jQuery.inArray(jQuery(elem).val(), value) > -1;
            }
        };
        if (!support.checkOn) jQuery.valHooks[this].get = function(elem) {
            return elem.getAttribute("value") === null ? "on" : elem.value;
        };
    });
    // Return jQuery for attributes-only inclusion
    support.focusin = "onfocusin" in window1;
    var rfocusMorph = /^(?:focusinfocus|focusoutblur)$/, stopPropagationCallback = function(e) {
        e.stopPropagation();
    };
    jQuery.extend(jQuery.event, {
        trigger: function(event, data, elem, onlyHandlers) {
            var i, cur, tmp, bubbleType, ontype, handle, special, lastElement, eventPath = [
                elem || document
            ], type = hasOwn.call(event, "type") ? event.type : event, namespaces = hasOwn.call(event, "namespace") ? event.namespace.split(".") : [];
            cur = lastElement = tmp = elem = elem || document;
            // Don't do events on text and comment nodes
            if (elem.nodeType === 3 || elem.nodeType === 8) return;
            // focus/blur morphs to focusin/out; ensure we're not firing them right now
            if (rfocusMorph.test(type + jQuery.event.triggered)) return;
            if (type.indexOf(".") > -1) {
                // Namespaced trigger; create a regexp to match event type in handle()
                namespaces = type.split(".");
                type = namespaces.shift();
                namespaces.sort();
            }
            ontype = type.indexOf(":") < 0 && "on" + type;
            // Caller can pass in a jQuery.Event object, Object, or just an event type string
            event = event[jQuery.expando] ? event : new jQuery.Event(type, typeof event === "object" && event);
            // Trigger bitmask: & 1 for native handlers; & 2 for jQuery (always true)
            event.isTrigger = onlyHandlers ? 2 : 3;
            event.namespace = namespaces.join(".");
            event.rnamespace = event.namespace ? new RegExp("(^|\\.)" + namespaces.join("\\.(?:.*\\.|)") + "(\\.|$)") : null;
            // Clean up the event in case it is being reused
            event.result = undefined;
            if (!event.target) event.target = elem;
            // Clone any incoming data and prepend the event, creating the handler arg list
            data = data == null ? [
                event
            ] : jQuery.makeArray(data, [
                event
            ]);
            // Allow special events to draw outside the lines
            special = jQuery.event.special[type] || {};
            if (!onlyHandlers && special.trigger && special.trigger.apply(elem, data) === false) return;
            // Determine event propagation path in advance, per W3C events spec (#9951)
            // Bubble up to document, then to window; watch for a global ownerDocument var (#9724)
            if (!onlyHandlers && !special.noBubble && !isWindow(elem)) {
                bubbleType = special.delegateType || type;
                if (!rfocusMorph.test(bubbleType + type)) cur = cur.parentNode;
                for(; cur; cur = cur.parentNode){
                    eventPath.push(cur);
                    tmp = cur;
                }
                // Only add window if we got to document (e.g., not plain obj or detached DOM)
                if (tmp === (elem.ownerDocument || document)) eventPath.push(tmp.defaultView || tmp.parentWindow || window1);
            }
            // Fire handlers on the event path
            i = 0;
            while((cur = eventPath[i++]) && !event.isPropagationStopped()){
                lastElement = cur;
                event.type = i > 1 ? bubbleType : special.bindType || type;
                // jQuery handler
                handle = (dataPriv.get(cur, "events") || {})[event.type] && dataPriv.get(cur, "handle");
                if (handle) handle.apply(cur, data);
                // Native handler
                handle = ontype && cur[ontype];
                if (handle && handle.apply && acceptData(cur)) {
                    event.result = handle.apply(cur, data);
                    if (event.result === false) event.preventDefault();
                }
            }
            event.type = type;
            // If nobody prevented the default action, do it now
            if (!onlyHandlers && !event.isDefaultPrevented()) {
                if ((!special._default || special._default.apply(eventPath.pop(), data) === false) && acceptData(elem)) // Call a native DOM method on the target with the same name as the event.
                // Don't do default actions on window, that's where global variables be (#6170)
                {
                    if (ontype && isFunction(elem[type]) && !isWindow(elem)) {
                        // Don't re-trigger an onFOO event when we call its FOO() method
                        tmp = elem[ontype];
                        if (tmp) elem[ontype] = null;
                        // Prevent re-triggering of the same event, since we already bubbled it above
                        jQuery.event.triggered = type;
                        if (event.isPropagationStopped()) lastElement.addEventListener(type, stopPropagationCallback);
                        elem[type]();
                        if (event.isPropagationStopped()) lastElement.removeEventListener(type, stopPropagationCallback);
                        jQuery.event.triggered = undefined;
                        if (tmp) elem[ontype] = tmp;
                    }
                }
            }
            return event.result;
        },
        // Piggyback on a donor event to simulate a different one
        // Used only for `focus(in | out)` events
        simulate: function(type, elem, event) {
            var e = jQuery.extend(new jQuery.Event(), event, {
                type: type,
                isSimulated: true
            });
            jQuery.event.trigger(e, null, elem);
        }
    });
    jQuery.fn.extend({
        trigger: function(type, data) {
            return this.each(function() {
                jQuery.event.trigger(type, data, this);
            });
        },
        triggerHandler: function(type, data) {
            var elem = this[0];
            if (elem) return jQuery.event.trigger(type, data, elem, true);
        }
    });
    // Support: Firefox <=44
    // Firefox doesn't have focus(in | out) events
    // Related ticket - https://bugzilla.mozilla.org/show_bug.cgi?id=687787
    //
    // Support: Chrome <=48 - 49, Safari <=9.0 - 9.1
    // focus(in | out) events fire after focus & blur events,
    // which is spec violation - http://www.w3.org/TR/DOM-Level-3-Events/#events-focusevent-event-order
    // Related ticket - https://bugs.chromium.org/p/chromium/issues/detail?id=449857
    if (!support.focusin) jQuery.each({
        focus: "focusin",
        blur: "focusout"
    }, function(orig, fix) {
        // Attach a single capturing handler on the document while someone wants focusin/focusout
        var handler = function(event) {
            jQuery.event.simulate(fix, event.target, jQuery.event.fix(event));
        };
        jQuery.event.special[fix] = {
            setup: function() {
                var doc = this.ownerDocument || this, attaches = dataPriv.access(doc, fix);
                if (!attaches) doc.addEventListener(orig, handler, true);
                dataPriv.access(doc, fix, (attaches || 0) + 1);
            },
            teardown: function() {
                var doc = this.ownerDocument || this, attaches = dataPriv.access(doc, fix) - 1;
                if (!attaches) {
                    doc.removeEventListener(orig, handler, true);
                    dataPriv.remove(doc, fix);
                } else dataPriv.access(doc, fix, attaches);
            }
        };
    });
    var location = window1.location;
    var nonce = Date.now();
    var rquery = /\?/;
    // Cross-browser xml parsing
    jQuery.parseXML = function(data) {
        var xml;
        if (!data || typeof data !== "string") return null;
        // Support: IE 9 - 11 only
        // IE throws on parseFromString with invalid input.
        try {
            xml = new window1.DOMParser().parseFromString(data, "text/xml");
        } catch (e) {
            xml = undefined;
        }
        if (!xml || xml.getElementsByTagName("parsererror").length) jQuery.error("Invalid XML: " + data);
        return xml;
    };
    var rbracket = /\[\]$/, rCRLF = /\r?\n/g, rsubmitterTypes = /^(?:submit|button|image|reset|file)$/i, rsubmittable = /^(?:input|select|textarea|keygen)/i;
    function buildParams(prefix, obj, traditional, add) {
        var name;
        if (Array.isArray(obj)) // Serialize array item.
        jQuery.each(obj, function(i, v) {
            if (traditional || rbracket.test(prefix)) // Treat each array item as a scalar.
            add(prefix, v);
            else // Item is non-scalar (array or object), encode its numeric index.
            buildParams(prefix + "[" + (typeof v === "object" && v != null ? i : "") + "]", v, traditional, add);
        });
        else if (!traditional && toType(obj) === "object") // Serialize object item.
        for(name in obj)buildParams(prefix + "[" + name + "]", obj[name], traditional, add);
        else // Serialize scalar item.
        add(prefix, obj);
    }
    // Serialize an array of form elements or a set of
    // key/values into a query string
    jQuery.param = function(a, traditional) {
        var prefix, s = [], add = function(key, valueOrFunction) {
            // If value is a function, invoke it and use its return value
            var value = isFunction(valueOrFunction) ? valueOrFunction() : valueOrFunction;
            s[s.length] = encodeURIComponent(key) + "=" + encodeURIComponent(value == null ? "" : value);
        };
        // If an array was passed in, assume that it is an array of form elements.
        if (Array.isArray(a) || a.jquery && !jQuery.isPlainObject(a)) // Serialize the form elements
        jQuery.each(a, function() {
            add(this.name, this.value);
        });
        else // If traditional, encode the "old" way (the way 1.3.2 or older
        // did it), otherwise encode params recursively.
        for(prefix in a)buildParams(prefix, a[prefix], traditional, add);
        // Return the resulting serialization
        return s.join("&");
    };
    jQuery.fn.extend({
        serialize: function() {
            return jQuery.param(this.serializeArray());
        },
        serializeArray: function() {
            return this.map(function() {
                // Can add propHook for "elements" to filter or add form elements
                var elements = jQuery.prop(this, "elements");
                return elements ? jQuery.makeArray(elements) : this;
            }).filter(function() {
                var type = this.type;
                // Use .is( ":disabled" ) so that fieldset[disabled] works
                return this.name && !jQuery(this).is(":disabled") && rsubmittable.test(this.nodeName) && !rsubmitterTypes.test(type) && (this.checked || !rcheckableType.test(type));
            }).map(function(i, elem) {
                var val = jQuery(this).val();
                if (val == null) return null;
                if (Array.isArray(val)) return jQuery.map(val, function(val) {
                    return {
                        name: elem.name,
                        value: val.replace(rCRLF, "\r\n")
                    };
                });
                return {
                    name: elem.name,
                    value: val.replace(rCRLF, "\r\n")
                };
            }).get();
        }
    });
    var r20 = /%20/g, rhash = /#.*$/, rantiCache = /([?&])_=[^&]*/, rheaders = /^(.*?):[ \t]*([^\r\n]*)$/mg, // #7653, #8125, #8152: local protocol detection
    rlocalProtocol = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/, rnoContent = /^(?:GET|HEAD)$/, rprotocol = /^\/\//, /* Prefilters
	 * 1) They are useful to introduce custom dataTypes (see ajax/jsonp.js for an example)
	 * 2) These are called:
	 *    - BEFORE asking for a transport
	 *    - AFTER param serialization (s.data is a string if s.processData is true)
	 * 3) key is the dataType
	 * 4) the catchall symbol "*" can be used
	 * 5) execution will start with transport dataType and THEN continue down to "*" if needed
	 */ prefilters = {}, /* Transports bindings
	 * 1) key is the dataType
	 * 2) the catchall symbol "*" can be used
	 * 3) selection will start with transport dataType and THEN go to "*" if needed
	 */ transports = {}, // Avoid comment-prolog char sequence (#10098); must appease lint and evade compression
    allTypes = "*/".concat("*"), // Anchor tag for parsing the document origin
    originAnchor = document.createElement("a");
    originAnchor.href = location.href;
    // Base "constructor" for jQuery.ajaxPrefilter and jQuery.ajaxTransport
    function addToPrefiltersOrTransports(structure) {
        // dataTypeExpression is optional and defaults to "*"
        return function(dataTypeExpression, func) {
            if (typeof dataTypeExpression !== "string") {
                func = dataTypeExpression;
                dataTypeExpression = "*";
            }
            var dataType, i = 0, dataTypes = dataTypeExpression.toLowerCase().match(rnothtmlwhite) || [];
            if (isFunction(func)) {
                // For each dataType in the dataTypeExpression
                while(dataType = dataTypes[i++])// Prepend if requested
                if (dataType[0] === "+") {
                    dataType = dataType.slice(1) || "*";
                    (structure[dataType] = structure[dataType] || []).unshift(func);
                // Otherwise append
                } else (structure[dataType] = structure[dataType] || []).push(func);
            }
        };
    }
    // Base inspection function for prefilters and transports
    function inspectPrefiltersOrTransports(structure, options, originalOptions, jqXHR) {
        var inspected = {}, seekingTransport = structure === transports;
        function inspect(dataType) {
            var selected;
            inspected[dataType] = true;
            jQuery.each(structure[dataType] || [], function(_, prefilterOrFactory) {
                var dataTypeOrTransport = prefilterOrFactory(options, originalOptions, jqXHR);
                if (typeof dataTypeOrTransport === "string" && !seekingTransport && !inspected[dataTypeOrTransport]) {
                    options.dataTypes.unshift(dataTypeOrTransport);
                    inspect(dataTypeOrTransport);
                    return false;
                } else if (seekingTransport) return !(selected = dataTypeOrTransport);
            });
            return selected;
        }
        return inspect(options.dataTypes[0]) || !inspected["*"] && inspect("*");
    }
    // A special extend for ajax options
    // that takes "flat" options (not to be deep extended)
    // Fixes #9887
    function ajaxExtend(target, src) {
        var key, deep, flatOptions = jQuery.ajaxSettings.flatOptions || {};
        for(key in src)if (src[key] !== undefined) (flatOptions[key] ? target : deep || (deep = {}))[key] = src[key];
        if (deep) jQuery.extend(true, target, deep);
        return target;
    }
    /* Handles responses to an ajax request:
 * - finds the right dataType (mediates between content-type and expected dataType)
 * - returns the corresponding response
 */ function ajaxHandleResponses(s, jqXHR, responses) {
        var ct, type, finalDataType, firstDataType, contents = s.contents, dataTypes = s.dataTypes;
        // Remove auto dataType and get content-type in the process
        while(dataTypes[0] === "*"){
            dataTypes.shift();
            if (ct === undefined) ct = s.mimeType || jqXHR.getResponseHeader("Content-Type");
        }
        // Check if we're dealing with a known content-type
        if (ct) {
            for(type in contents)if (contents[type] && contents[type].test(ct)) {
                dataTypes.unshift(type);
                break;
            }
        }
        // Check to see if we have a response for the expected dataType
        if (dataTypes[0] in responses) finalDataType = dataTypes[0];
        else {
            // Try convertible dataTypes
            for(type in responses){
                if (!dataTypes[0] || s.converters[type + " " + dataTypes[0]]) {
                    finalDataType = type;
                    break;
                }
                if (!firstDataType) firstDataType = type;
            }
            // Or just use first one
            finalDataType = finalDataType || firstDataType;
        }
        // If we found a dataType
        // We add the dataType to the list if needed
        // and return the corresponding response
        if (finalDataType) {
            if (finalDataType !== dataTypes[0]) dataTypes.unshift(finalDataType);
            return responses[finalDataType];
        }
    }
    /* Chain conversions given the request and the original response
 * Also sets the responseXXX fields on the jqXHR instance
 */ function ajaxConvert(s, response, jqXHR, isSuccess) {
        var conv2, current, conv, tmp, prev, converters = {}, // Work with a copy of dataTypes in case we need to modify it for conversion
        dataTypes = s.dataTypes.slice();
        // Create converters map with lowercased keys
        if (dataTypes[1]) for(conv in s.converters)converters[conv.toLowerCase()] = s.converters[conv];
        current = dataTypes.shift();
        // Convert to each sequential dataType
        while(current){
            if (s.responseFields[current]) jqXHR[s.responseFields[current]] = response;
            // Apply the dataFilter if provided
            if (!prev && isSuccess && s.dataFilter) response = s.dataFilter(response, s.dataType);
            prev = current;
            current = dataTypes.shift();
            if (current) {
                // There's only work to do if current dataType is non-auto
                if (current === "*") current = prev;
                else if (prev !== "*" && prev !== current) {
                    // Seek a direct converter
                    conv = converters[prev + " " + current] || converters["* " + current];
                    // If none found, seek a pair
                    if (!conv) for(conv2 in converters){
                        // If conv2 outputs current
                        tmp = conv2.split(" ");
                        if (tmp[1] === current) {
                            // If prev can be converted to accepted input
                            conv = converters[prev + " " + tmp[0]] || converters["* " + tmp[0]];
                            if (conv) {
                                // Condense equivalence converters
                                if (conv === true) conv = converters[conv2];
                                else if (converters[conv2] !== true) {
                                    current = tmp[0];
                                    dataTypes.unshift(tmp[1]);
                                }
                                break;
                            }
                        }
                    }
                    // Apply converter (if not an equivalence)
                    if (conv !== true) {
                        // Unless errors are allowed to bubble, catch and return them
                        if (conv && s.throws) response = conv(response);
                        else try {
                            response = conv(response);
                        } catch (e) {
                            return {
                                state: "parsererror",
                                error: conv ? e : "No conversion from " + prev + " to " + current
                            };
                        }
                    }
                }
            }
        }
        return {
            state: "success",
            data: response
        };
    }
    jQuery.extend({
        // Counter for holding the number of active queries
        active: 0,
        // Last-Modified header cache for next request
        lastModified: {},
        etag: {},
        ajaxSettings: {
            url: location.href,
            type: "GET",
            isLocal: rlocalProtocol.test(location.protocol),
            global: true,
            processData: true,
            async: true,
            contentType: "application/x-www-form-urlencoded; charset=UTF-8",
            /*
		timeout: 0,
		data: null,
		dataType: null,
		username: null,
		password: null,
		cache: null,
		throws: false,
		traditional: false,
		headers: {},
		*/ accepts: {
                "*": allTypes,
                text: "text/plain",
                html: "text/html",
                xml: "application/xml, text/xml",
                json: "application/json, text/javascript"
            },
            contents: {
                xml: /\bxml\b/,
                html: /\bhtml/,
                json: /\bjson\b/
            },
            responseFields: {
                xml: "responseXML",
                text: "responseText",
                json: "responseJSON"
            },
            // Data converters
            // Keys separate source (or catchall "*") and destination types with a single space
            converters: {
                // Convert anything to text
                "* text": String,
                // Text to html (true = no transformation)
                "text html": true,
                // Evaluate text as a json expression
                "text json": JSON.parse,
                // Parse text as xml
                "text xml": jQuery.parseXML
            },
            // For options that shouldn't be deep extended:
            // you can add your own custom options here if
            // and when you create one that shouldn't be
            // deep extended (see ajaxExtend)
            flatOptions: {
                url: true,
                context: true
            }
        },
        // Creates a full fledged settings object into target
        // with both ajaxSettings and settings fields.
        // If target is omitted, writes into ajaxSettings.
        ajaxSetup: function(target, settings) {
            return settings ? // Building a settings object
            ajaxExtend(ajaxExtend(target, jQuery.ajaxSettings), settings) : // Extending ajaxSettings
            ajaxExtend(jQuery.ajaxSettings, target);
        },
        ajaxPrefilter: addToPrefiltersOrTransports(prefilters),
        ajaxTransport: addToPrefiltersOrTransports(transports),
        // Main method
        ajax: function(url, options) {
            // If url is an object, simulate pre-1.5 signature
            if (typeof url === "object") {
                options = url;
                url = undefined;
            }
            // Force options to be an object
            options = options || {};
            var transport, // URL without anti-cache param
            cacheURL, // Response headers
            responseHeadersString, responseHeaders, // timeout handle
            timeoutTimer, // Url cleanup var
            urlAnchor, // Request state (becomes false upon send and true upon completion)
            completed, // To know if global events are to be dispatched
            fireGlobals, // Loop variable
            i, // uncached part of the url
            uncached, // Create the final options object
            s = jQuery.ajaxSetup({}, options), // Callbacks context
            callbackContext = s.context || s, // Context for global events is callbackContext if it is a DOM node or jQuery collection
            globalEventContext = s.context && (callbackContext.nodeType || callbackContext.jquery) ? jQuery(callbackContext) : jQuery.event, // Deferreds
            deferred = jQuery.Deferred(), completeDeferred = jQuery.Callbacks("once memory"), // Status-dependent callbacks
            statusCode = s.statusCode || {}, // Headers (they are sent all at once)
            requestHeaders = {}, requestHeadersNames = {}, // Default abort message
            strAbort = "canceled", // Fake xhr
            jqXHR = {
                readyState: 0,
                // Builds headers hashtable if needed
                getResponseHeader: function(key) {
                    var match;
                    if (completed) {
                        if (!responseHeaders) {
                            responseHeaders = {};
                            while(match = rheaders.exec(responseHeadersString))responseHeaders[match[1].toLowerCase()] = match[2];
                        }
                        match = responseHeaders[key.toLowerCase()];
                    }
                    return match == null ? null : match;
                },
                // Raw string
                getAllResponseHeaders: function() {
                    return completed ? responseHeadersString : null;
                },
                // Caches the header
                setRequestHeader: function(name, value) {
                    if (completed == null) {
                        name = requestHeadersNames[name.toLowerCase()] = requestHeadersNames[name.toLowerCase()] || name;
                        requestHeaders[name] = value;
                    }
                    return this;
                },
                // Overrides response content-type header
                overrideMimeType: function(type) {
                    if (completed == null) s.mimeType = type;
                    return this;
                },
                // Status-dependent callbacks
                statusCode: function(map) {
                    var code;
                    if (map) {
                        if (completed) // Execute the appropriate callbacks
                        jqXHR.always(map[jqXHR.status]);
                        else // Lazy-add the new callbacks in a way that preserves old ones
                        for(code in map)statusCode[code] = [
                            statusCode[code],
                            map[code]
                        ];
                    }
                    return this;
                },
                // Cancel the request
                abort: function(statusText) {
                    var finalText = statusText || strAbort;
                    if (transport) transport.abort(finalText);
                    done(0, finalText);
                    return this;
                }
            };
            // Attach deferreds
            deferred.promise(jqXHR);
            // Add protocol if not provided (prefilters might expect it)
            // Handle falsy url in the settings object (#10093: consistency with old signature)
            // We also use the url parameter if available
            s.url = ((url || s.url || location.href) + "").replace(rprotocol, location.protocol + "//");
            // Alias method option to type as per ticket #12004
            s.type = options.method || options.type || s.method || s.type;
            // Extract dataTypes list
            s.dataTypes = (s.dataType || "*").toLowerCase().match(rnothtmlwhite) || [
                ""
            ];
            // A cross-domain request is in order when the origin doesn't match the current origin.
            if (s.crossDomain == null) {
                urlAnchor = document.createElement("a");
                // Support: IE <=8 - 11, Edge 12 - 15
                // IE throws exception on accessing the href property if url is malformed,
                // e.g. http://example.com:80x/
                try {
                    urlAnchor.href = s.url;
                    // Support: IE <=8 - 11 only
                    // Anchor's host property isn't correctly set when s.url is relative
                    urlAnchor.href = urlAnchor.href;
                    s.crossDomain = originAnchor.protocol + "//" + originAnchor.host !== urlAnchor.protocol + "//" + urlAnchor.host;
                } catch (e) {
                    // If there is an error parsing the URL, assume it is crossDomain,
                    // it can be rejected by the transport if it is invalid
                    s.crossDomain = true;
                }
            }
            // Convert data if not already a string
            if (s.data && s.processData && typeof s.data !== "string") s.data = jQuery.param(s.data, s.traditional);
            // Apply prefilters
            inspectPrefiltersOrTransports(prefilters, s, options, jqXHR);
            // If request was aborted inside a prefilter, stop there
            if (completed) return jqXHR;
            // We can fire global events as of now if asked to
            // Don't fire events if jQuery.event is undefined in an AMD-usage scenario (#15118)
            fireGlobals = jQuery.event && s.global;
            // Watch for a new set of requests
            if (fireGlobals && jQuery.active++ === 0) jQuery.event.trigger("ajaxStart");
            // Uppercase the type
            s.type = s.type.toUpperCase();
            // Determine if request has content
            s.hasContent = !rnoContent.test(s.type);
            // Save the URL in case we're toying with the If-Modified-Since
            // and/or If-None-Match header later on
            // Remove hash to simplify url manipulation
            cacheURL = s.url.replace(rhash, "");
            // More options handling for requests with no content
            if (!s.hasContent) {
                // Remember the hash so we can put it back
                uncached = s.url.slice(cacheURL.length);
                // If data is available and should be processed, append data to url
                if (s.data && (s.processData || typeof s.data === "string")) {
                    cacheURL += (rquery.test(cacheURL) ? "&" : "?") + s.data;
                    // #9682: remove data so that it's not used in an eventual retry
                    delete s.data;
                }
                // Add or update anti-cache param if needed
                if (s.cache === false) {
                    cacheURL = cacheURL.replace(rantiCache, "$1");
                    uncached = (rquery.test(cacheURL) ? "&" : "?") + "_=" + nonce++ + uncached;
                }
                // Put hash and anti-cache on the URL that will be requested (gh-1732)
                s.url = cacheURL + uncached;
            // Change '%20' to '+' if this is encoded form body content (gh-2658)
            } else if (s.data && s.processData && (s.contentType || "").indexOf("application/x-www-form-urlencoded") === 0) s.data = s.data.replace(r20, "+");
            // Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
            if (s.ifModified) {
                if (jQuery.lastModified[cacheURL]) jqXHR.setRequestHeader("If-Modified-Since", jQuery.lastModified[cacheURL]);
                if (jQuery.etag[cacheURL]) jqXHR.setRequestHeader("If-None-Match", jQuery.etag[cacheURL]);
            }
            // Set the correct header, if data is being sent
            if (s.data && s.hasContent && s.contentType !== false || options.contentType) jqXHR.setRequestHeader("Content-Type", s.contentType);
            // Set the Accepts header for the server, depending on the dataType
            jqXHR.setRequestHeader("Accept", s.dataTypes[0] && s.accepts[s.dataTypes[0]] ? s.accepts[s.dataTypes[0]] + (s.dataTypes[0] !== "*" ? ", " + allTypes + "; q=0.01" : "") : s.accepts["*"]);
            // Check for headers option
            for(i in s.headers)jqXHR.setRequestHeader(i, s.headers[i]);
            // Allow custom headers/mimetypes and early abort
            if (s.beforeSend && (s.beforeSend.call(callbackContext, jqXHR, s) === false || completed)) // Abort if not done already and return
            return jqXHR.abort();
            // Aborting is no longer a cancellation
            strAbort = "abort";
            // Install callbacks on deferreds
            completeDeferred.add(s.complete);
            jqXHR.done(s.success);
            jqXHR.fail(s.error);
            // Get transport
            transport = inspectPrefiltersOrTransports(transports, s, options, jqXHR);
            // If no transport, we auto-abort
            if (!transport) done(-1, "No Transport");
            else {
                jqXHR.readyState = 1;
                // Send global event
                if (fireGlobals) globalEventContext.trigger("ajaxSend", [
                    jqXHR,
                    s
                ]);
                // If request was aborted inside ajaxSend, stop there
                if (completed) return jqXHR;
                // Timeout
                if (s.async && s.timeout > 0) timeoutTimer = window1.setTimeout(function() {
                    jqXHR.abort("timeout");
                }, s.timeout);
                try {
                    completed = false;
                    transport.send(requestHeaders, done);
                } catch (e) {
                    // Rethrow post-completion exceptions
                    if (completed) throw e;
                    // Propagate others as results
                    done(-1, e);
                }
            }
            // Callback for when everything is done
            function done(status, nativeStatusText, responses, headers) {
                var isSuccess, success, error, response, modified, statusText = nativeStatusText;
                // Ignore repeat invocations
                if (completed) return;
                completed = true;
                // Clear timeout if it exists
                if (timeoutTimer) window1.clearTimeout(timeoutTimer);
                // Dereference transport for early garbage collection
                // (no matter how long the jqXHR object will be used)
                transport = undefined;
                // Cache response headers
                responseHeadersString = headers || "";
                // Set readyState
                jqXHR.readyState = status > 0 ? 4 : 0;
                // Determine if successful
                isSuccess = status >= 200 && status < 300 || status === 304;
                // Get response data
                if (responses) response = ajaxHandleResponses(s, jqXHR, responses);
                // Convert no matter what (that way responseXXX fields are always set)
                response = ajaxConvert(s, response, jqXHR, isSuccess);
                // If successful, handle type chaining
                if (isSuccess) {
                    // Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
                    if (s.ifModified) {
                        modified = jqXHR.getResponseHeader("Last-Modified");
                        if (modified) jQuery.lastModified[cacheURL] = modified;
                        modified = jqXHR.getResponseHeader("etag");
                        if (modified) jQuery.etag[cacheURL] = modified;
                    }
                    // if no content
                    if (status === 204 || s.type === "HEAD") statusText = "nocontent";
                    else if (status === 304) statusText = "notmodified";
                    else {
                        statusText = response.state;
                        success = response.data;
                        error = response.error;
                        isSuccess = !error;
                    }
                } else {
                    // Extract error from statusText and normalize for non-aborts
                    error = statusText;
                    if (status || !statusText) {
                        statusText = "error";
                        if (status < 0) status = 0;
                    }
                }
                // Set data for the fake xhr object
                jqXHR.status = status;
                jqXHR.statusText = (nativeStatusText || statusText) + "";
                // Success/Error
                if (isSuccess) deferred.resolveWith(callbackContext, [
                    success,
                    statusText,
                    jqXHR
                ]);
                else deferred.rejectWith(callbackContext, [
                    jqXHR,
                    statusText,
                    error
                ]);
                // Status-dependent callbacks
                jqXHR.statusCode(statusCode);
                statusCode = undefined;
                if (fireGlobals) globalEventContext.trigger(isSuccess ? "ajaxSuccess" : "ajaxError", [
                    jqXHR,
                    s,
                    isSuccess ? success : error
                ]);
                // Complete
                completeDeferred.fireWith(callbackContext, [
                    jqXHR,
                    statusText
                ]);
                if (fireGlobals) {
                    globalEventContext.trigger("ajaxComplete", [
                        jqXHR,
                        s
                    ]);
                    // Handle the global AJAX counter
                    if (!--jQuery.active) jQuery.event.trigger("ajaxStop");
                }
            }
            return jqXHR;
        },
        getJSON: function(url, data, callback) {
            return jQuery.get(url, data, callback, "json");
        },
        getScript: function(url, callback) {
            return jQuery.get(url, undefined, callback, "script");
        }
    });
    jQuery.each([
        "get",
        "post"
    ], function(i, method) {
        jQuery[method] = function(url, data, callback, type) {
            // Shift arguments if data argument was omitted
            if (isFunction(data)) {
                type = type || callback;
                callback = data;
                data = undefined;
            }
            // The url can be an options object (which then must have .url)
            return jQuery.ajax(jQuery.extend({
                url: url,
                type: method,
                dataType: type,
                data: data,
                success: callback
            }, jQuery.isPlainObject(url) && url));
        };
    });
    jQuery._evalUrl = function(url) {
        return jQuery.ajax({
            url: url,
            // Make this explicit, since user can override this through ajaxSetup (#11264)
            type: "GET",
            dataType: "script",
            cache: true,
            async: false,
            global: false,
            "throws": true
        });
    };
    jQuery.fn.extend({
        wrapAll: function(html) {
            var wrap;
            if (this[0]) {
                if (isFunction(html)) html = html.call(this[0]);
                // The elements to wrap the target around
                wrap = jQuery(html, this[0].ownerDocument).eq(0).clone(true);
                if (this[0].parentNode) wrap.insertBefore(this[0]);
                wrap.map(function() {
                    var elem = this;
                    while(elem.firstElementChild)elem = elem.firstElementChild;
                    return elem;
                }).append(this);
            }
            return this;
        },
        wrapInner: function(html) {
            if (isFunction(html)) return this.each(function(i) {
                jQuery(this).wrapInner(html.call(this, i));
            });
            return this.each(function() {
                var self = jQuery(this), contents = self.contents();
                if (contents.length) contents.wrapAll(html);
                else self.append(html);
            });
        },
        wrap: function(html) {
            var htmlIsFunction = isFunction(html);
            return this.each(function(i) {
                jQuery(this).wrapAll(htmlIsFunction ? html.call(this, i) : html);
            });
        },
        unwrap: function(selector) {
            this.parent(selector).not("body").each(function() {
                jQuery(this).replaceWith(this.childNodes);
            });
            return this;
        }
    });
    jQuery.expr.pseudos.hidden = function(elem) {
        return !jQuery.expr.pseudos.visible(elem);
    };
    jQuery.expr.pseudos.visible = function(elem) {
        return !!(elem.offsetWidth || elem.offsetHeight || elem.getClientRects().length);
    };
    jQuery.ajaxSettings.xhr = function() {
        try {
            return new window1.XMLHttpRequest();
        } catch (e) {}
    };
    var xhrSuccessStatus = {
        // File protocol always yields status code 0, assume 200
        0: 200,
        // Support: IE <=9 only
        // #1450: sometimes IE returns 1223 when it should be 204
        1223: 204
    }, xhrSupported = jQuery.ajaxSettings.xhr();
    support.cors = !!xhrSupported && "withCredentials" in xhrSupported;
    support.ajax = xhrSupported = !!xhrSupported;
    jQuery.ajaxTransport(function(options) {
        var callback, errorCallback;
        // Cross domain only allowed if supported through XMLHttpRequest
        if (support.cors || xhrSupported && !options.crossDomain) return {
            send: function(headers, complete) {
                var i, xhr = options.xhr();
                xhr.open(options.type, options.url, options.async, options.username, options.password);
                // Apply custom fields if provided
                if (options.xhrFields) for(i in options.xhrFields)xhr[i] = options.xhrFields[i];
                // Override mime type if needed
                if (options.mimeType && xhr.overrideMimeType) xhr.overrideMimeType(options.mimeType);
                // X-Requested-With header
                // For cross-domain requests, seeing as conditions for a preflight are
                // akin to a jigsaw puzzle, we simply never set it to be sure.
                // (it can always be set on a per-request basis or even using ajaxSetup)
                // For same-domain requests, won't change header if already provided.
                if (!options.crossDomain && !headers["X-Requested-With"]) headers["X-Requested-With"] = "XMLHttpRequest";
                // Set headers
                for(i in headers)xhr.setRequestHeader(i, headers[i]);
                // Callback
                callback = function(type) {
                    return function() {
                        if (callback) {
                            callback = errorCallback = xhr.onload = xhr.onerror = xhr.onabort = xhr.ontimeout = xhr.onreadystatechange = null;
                            if (type === "abort") xhr.abort();
                            else if (type === "error") {
                                // Support: IE <=9 only
                                // On a manual native abort, IE9 throws
                                // errors on any property access that is not readyState
                                if (typeof xhr.status !== "number") complete(0, "error");
                                else complete(// File: protocol always yields status 0; see #8605, #14207
                                xhr.status, xhr.statusText);
                            } else complete(xhrSuccessStatus[xhr.status] || xhr.status, xhr.statusText, // Support: IE <=9 only
                            // IE9 has no XHR2 but throws on binary (trac-11426)
                            // For XHR2 non-text, let the caller handle it (gh-2498)
                            (xhr.responseType || "text") !== "text" || typeof xhr.responseText !== "string" ? {
                                binary: xhr.response
                            } : {
                                text: xhr.responseText
                            }, xhr.getAllResponseHeaders());
                        }
                    };
                };
                // Listen to events
                xhr.onload = callback();
                errorCallback = xhr.onerror = xhr.ontimeout = callback("error");
                // Support: IE 9 only
                // Use onreadystatechange to replace onabort
                // to handle uncaught aborts
                if (xhr.onabort !== undefined) xhr.onabort = errorCallback;
                else xhr.onreadystatechange = function() {
                    // Check readyState before timeout as it changes
                    if (xhr.readyState === 4) // Allow onerror to be called first,
                    // but that will not handle a native abort
                    // Also, save errorCallback to a variable
                    // as xhr.onerror cannot be accessed
                    window1.setTimeout(function() {
                        if (callback) errorCallback();
                    });
                };
                // Create the abort callback
                callback = callback("abort");
                try {
                    // Do send the request (this may raise an exception)
                    xhr.send(options.hasContent && options.data || null);
                } catch (e) {
                    // #14683: Only rethrow if this hasn't been notified as an error yet
                    if (callback) throw e;
                }
            },
            abort: function() {
                if (callback) callback();
            }
        };
    });
    // Prevent auto-execution of scripts when no explicit dataType was provided (See gh-2432)
    jQuery.ajaxPrefilter(function(s) {
        if (s.crossDomain) s.contents.script = false;
    });
    // Install script dataType
    jQuery.ajaxSetup({
        accepts: {
            script: "text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"
        },
        contents: {
            script: /\b(?:java|ecma)script\b/
        },
        converters: {
            "text script": function(text) {
                jQuery.globalEval(text);
                return text;
            }
        }
    });
    // Handle cache's special case and crossDomain
    jQuery.ajaxPrefilter("script", function(s) {
        if (s.cache === undefined) s.cache = false;
        if (s.crossDomain) s.type = "GET";
    });
    // Bind script tag hack transport
    jQuery.ajaxTransport("script", function(s) {
        // This transport only deals with cross domain requests
        if (s.crossDomain) {
            var script, callback;
            return {
                send: function(_, complete) {
                    script = jQuery("<script>").prop({
                        charset: s.scriptCharset,
                        src: s.url
                    }).on("load error", callback = function(evt) {
                        script.remove();
                        callback = null;
                        if (evt) complete(evt.type === "error" ? 404 : 200, evt.type);
                    });
                    // Use native DOM manipulation to avoid our domManip AJAX trickery
                    document.head.appendChild(script[0]);
                },
                abort: function() {
                    if (callback) callback();
                }
            };
        }
    });
    var oldCallbacks = [], rjsonp = /(=)\?(?=&|$)|\?\?/;
    // Default jsonp settings
    jQuery.ajaxSetup({
        jsonp: "callback",
        jsonpCallback: function() {
            var callback = oldCallbacks.pop() || jQuery.expando + "_" + nonce++;
            this[callback] = true;
            return callback;
        }
    });
    // Detect, normalize options and install callbacks for jsonp requests
    jQuery.ajaxPrefilter("json jsonp", function(s, originalSettings, jqXHR) {
        var callbackName, overwritten, responseContainer, jsonProp = s.jsonp !== false && (rjsonp.test(s.url) ? "url" : typeof s.data === "string" && (s.contentType || "").indexOf("application/x-www-form-urlencoded") === 0 && rjsonp.test(s.data) && "data");
        // Handle iff the expected data type is "jsonp" or we have a parameter to set
        if (jsonProp || s.dataTypes[0] === "jsonp") {
            // Get callback name, remembering preexisting value associated with it
            callbackName = s.jsonpCallback = isFunction(s.jsonpCallback) ? s.jsonpCallback() : s.jsonpCallback;
            // Insert callback into url or form data
            if (jsonProp) s[jsonProp] = s[jsonProp].replace(rjsonp, "$1" + callbackName);
            else if (s.jsonp !== false) s.url += (rquery.test(s.url) ? "&" : "?") + s.jsonp + "=" + callbackName;
            // Use data converter to retrieve json after script execution
            s.converters["script json"] = function() {
                if (!responseContainer) jQuery.error(callbackName + " was not called");
                return responseContainer[0];
            };
            // Force json dataType
            s.dataTypes[0] = "json";
            // Install callback
            overwritten = window1[callbackName];
            window1[callbackName] = function() {
                responseContainer = arguments;
            };
            // Clean-up function (fires after converters)
            jqXHR.always(function() {
                // If previous value didn't exist - remove it
                if (overwritten === undefined) jQuery(window1).removeProp(callbackName);
                else window1[callbackName] = overwritten;
                // Save back as free
                if (s[callbackName]) {
                    // Make sure that re-using the options doesn't screw things around
                    s.jsonpCallback = originalSettings.jsonpCallback;
                    // Save the callback name for future use
                    oldCallbacks.push(callbackName);
                }
                // Call if it was a function and we have a response
                if (responseContainer && isFunction(overwritten)) overwritten(responseContainer[0]);
                responseContainer = overwritten = undefined;
            });
            // Delegate to script
            return "script";
        }
    });
    // Support: Safari 8 only
    // In Safari 8 documents created via document.implementation.createHTMLDocument
    // collapse sibling forms: the second one becomes a child of the first one.
    // Because of that, this security measure has to be disabled in Safari 8.
    // https://bugs.webkit.org/show_bug.cgi?id=137337
    support.createHTMLDocument = function() {
        var body = document.implementation.createHTMLDocument("").body;
        body.innerHTML = "<form></form><form></form>";
        return body.childNodes.length === 2;
    }();
    // Argument "data" should be string of html
    // context (optional): If specified, the fragment will be created in this context,
    // defaults to document
    // keepScripts (optional): If true, will include scripts passed in the html string
    jQuery.parseHTML = function(data, context, keepScripts) {
        if (typeof data !== "string") return [];
        if (typeof context === "boolean") {
            keepScripts = context;
            context = false;
        }
        var base, parsed, scripts;
        if (!context) {
            // Stop scripts or inline event handlers from being executed immediately
            // by using document.implementation
            if (support.createHTMLDocument) {
                context = document.implementation.createHTMLDocument("");
                // Set the base href for the created document
                // so any parsed elements with URLs
                // are based on the document's URL (gh-2965)
                base = context.createElement("base");
                base.href = document.location.href;
                context.head.appendChild(base);
            } else context = document;
        }
        parsed = rsingleTag.exec(data);
        scripts = !keepScripts && [];
        // Single tag
        if (parsed) return [
            context.createElement(parsed[1])
        ];
        parsed = buildFragment([
            data
        ], context, scripts);
        if (scripts && scripts.length) jQuery(scripts).remove();
        return jQuery.merge([], parsed.childNodes);
    };
    /**
 * Load a url into a page
 */ jQuery.fn.load = function(url, params, callback) {
        var selector, type, response, self = this, off = url.indexOf(" ");
        if (off > -1) {
            selector = stripAndCollapse(url.slice(off));
            url = url.slice(0, off);
        }
        // If it's a function
        if (isFunction(params)) {
            // We assume that it's the callback
            callback = params;
            params = undefined;
        // Otherwise, build a param string
        } else if (params && typeof params === "object") type = "POST";
        // If we have elements to modify, make the request
        if (self.length > 0) jQuery.ajax({
            url: url,
            // If "type" variable is undefined, then "GET" method will be used.
            // Make value of this field explicit since
            // user can override it through ajaxSetup method
            type: type || "GET",
            dataType: "html",
            data: params
        }).done(function(responseText) {
            // Save response for use in complete callback
            response = arguments;
            self.html(selector ? // If a selector was specified, locate the right elements in a dummy div
            // Exclude scripts to avoid IE 'Permission Denied' errors
            jQuery("<div>").append(jQuery.parseHTML(responseText)).find(selector) : // Otherwise use the full result
            responseText);
        // If the request succeeds, this function gets "data", "status", "jqXHR"
        // but they are ignored because response was set above.
        // If it fails, this function gets "jqXHR", "status", "error"
        }).always(callback && function(jqXHR, status) {
            self.each(function() {
                callback.apply(this, response || [
                    jqXHR.responseText,
                    status,
                    jqXHR
                ]);
            });
        });
        return this;
    };
    // Attach a bunch of functions for handling common AJAX events
    jQuery.each([
        "ajaxStart",
        "ajaxStop",
        "ajaxComplete",
        "ajaxError",
        "ajaxSuccess",
        "ajaxSend"
    ], function(i, type) {
        jQuery.fn[type] = function(fn) {
            return this.on(type, fn);
        };
    });
    jQuery.expr.pseudos.animated = function(elem) {
        return jQuery.grep(jQuery.timers, function(fn) {
            return elem === fn.elem;
        }).length;
    };
    jQuery.offset = {
        setOffset: function(elem, options, i) {
            var curPosition, curLeft, curCSSTop, curTop, curOffset, curCSSLeft, calculatePosition, position = jQuery.css(elem, "position"), curElem = jQuery(elem), props = {};
            // Set position first, in-case top/left are set even on static elem
            if (position === "static") elem.style.position = "relative";
            curOffset = curElem.offset();
            curCSSTop = jQuery.css(elem, "top");
            curCSSLeft = jQuery.css(elem, "left");
            calculatePosition = (position === "absolute" || position === "fixed") && (curCSSTop + curCSSLeft).indexOf("auto") > -1;
            // Need to be able to calculate position if either
            // top or left is auto and position is either absolute or fixed
            if (calculatePosition) {
                curPosition = curElem.position();
                curTop = curPosition.top;
                curLeft = curPosition.left;
            } else {
                curTop = parseFloat(curCSSTop) || 0;
                curLeft = parseFloat(curCSSLeft) || 0;
            }
            if (isFunction(options)) // Use jQuery.extend here to allow modification of coordinates argument (gh-1848)
            options = options.call(elem, i, jQuery.extend({}, curOffset));
            if (options.top != null) props.top = options.top - curOffset.top + curTop;
            if (options.left != null) props.left = options.left - curOffset.left + curLeft;
            if ("using" in options) options.using.call(elem, props);
            else curElem.css(props);
        }
    };
    jQuery.fn.extend({
        // offset() relates an element's border box to the document origin
        offset: function(options) {
            // Preserve chaining for setter
            if (arguments.length) return options === undefined ? this : this.each(function(i) {
                jQuery.offset.setOffset(this, options, i);
            });
            var rect, win, elem = this[0];
            if (!elem) return;
            // Return zeros for disconnected and hidden (display: none) elements (gh-2310)
            // Support: IE <=11 only
            // Running getBoundingClientRect on a
            // disconnected node in IE throws an error
            if (!elem.getClientRects().length) return {
                top: 0,
                left: 0
            };
            // Get document-relative position by adding viewport scroll to viewport-relative gBCR
            rect = elem.getBoundingClientRect();
            win = elem.ownerDocument.defaultView;
            return {
                top: rect.top + win.pageYOffset,
                left: rect.left + win.pageXOffset
            };
        },
        // position() relates an element's margin box to its offset parent's padding box
        // This corresponds to the behavior of CSS absolute positioning
        position: function() {
            if (!this[0]) return;
            var offsetParent, offset, doc, elem = this[0], parentOffset = {
                top: 0,
                left: 0
            };
            // position:fixed elements are offset from the viewport, which itself always has zero offset
            if (jQuery.css(elem, "position") === "fixed") // Assume position:fixed implies availability of getBoundingClientRect
            offset = elem.getBoundingClientRect();
            else {
                offset = this.offset();
                // Account for the *real* offset parent, which can be the document or its root element
                // when a statically positioned element is identified
                doc = elem.ownerDocument;
                offsetParent = elem.offsetParent || doc.documentElement;
                while(offsetParent && (offsetParent === doc.body || offsetParent === doc.documentElement) && jQuery.css(offsetParent, "position") === "static")offsetParent = offsetParent.parentNode;
                if (offsetParent && offsetParent !== elem && offsetParent.nodeType === 1) {
                    // Incorporate borders into its offset, since they are outside its content origin
                    parentOffset = jQuery(offsetParent).offset();
                    parentOffset.top += jQuery.css(offsetParent, "borderTopWidth", true);
                    parentOffset.left += jQuery.css(offsetParent, "borderLeftWidth", true);
                }
            }
            // Subtract parent offsets and element margins
            return {
                top: offset.top - parentOffset.top - jQuery.css(elem, "marginTop", true),
                left: offset.left - parentOffset.left - jQuery.css(elem, "marginLeft", true)
            };
        },
        // This method will return documentElement in the following cases:
        // 1) For the element inside the iframe without offsetParent, this method will return
        //    documentElement of the parent window
        // 2) For the hidden or detached element
        // 3) For body or html element, i.e. in case of the html node - it will return itself
        //
        // but those exceptions were never presented as a real life use-cases
        // and might be considered as more preferable results.
        //
        // This logic, however, is not guaranteed and can change at any point in the future
        offsetParent: function() {
            return this.map(function() {
                var offsetParent = this.offsetParent;
                while(offsetParent && jQuery.css(offsetParent, "position") === "static")offsetParent = offsetParent.offsetParent;
                return offsetParent || documentElement;
            });
        }
    });
    // Create scrollLeft and scrollTop methods
    jQuery.each({
        scrollLeft: "pageXOffset",
        scrollTop: "pageYOffset"
    }, function(method, prop) {
        var top = "pageYOffset" === prop;
        jQuery.fn[method] = function(val) {
            return access(this, function(elem, method, val) {
                // Coalesce documents and windows
                var win;
                if (isWindow(elem)) win = elem;
                else if (elem.nodeType === 9) win = elem.defaultView;
                if (val === undefined) return win ? win[prop] : elem[method];
                if (win) win.scrollTo(!top ? val : win.pageXOffset, top ? val : win.pageYOffset);
                else elem[method] = val;
            }, method, val, arguments.length);
        };
    });
    // Support: Safari <=7 - 9.1, Chrome <=37 - 49
    // Add the top/left cssHooks using jQuery.fn.position
    // Webkit bug: https://bugs.webkit.org/show_bug.cgi?id=29084
    // Blink bug: https://bugs.chromium.org/p/chromium/issues/detail?id=589347
    // getComputedStyle returns percent when specified for top/left/bottom/right;
    // rather than make the css module depend on the offset module, just check for it here
    jQuery.each([
        "top",
        "left"
    ], function(i, prop) {
        jQuery.cssHooks[prop] = addGetHookIf(support.pixelPosition, function(elem, computed) {
            if (computed) {
                computed = curCSS(elem, prop);
                // If curCSS returns percentage, fallback to offset
                return rnumnonpx.test(computed) ? jQuery(elem).position()[prop] + "px" : computed;
            }
        });
    });
    // Create innerHeight, innerWidth, height, width, outerHeight and outerWidth methods
    jQuery.each({
        Height: "height",
        Width: "width"
    }, function(name, type) {
        jQuery.each({
            padding: "inner" + name,
            content: type,
            "": "outer" + name
        }, function(defaultExtra, funcName) {
            // Margin is only for outerHeight, outerWidth
            jQuery.fn[funcName] = function(margin, value) {
                var chainable = arguments.length && (defaultExtra || typeof margin !== "boolean"), extra = defaultExtra || (margin === true || value === true ? "margin" : "border");
                return access(this, function(elem, type, value) {
                    var doc;
                    if (isWindow(elem)) // $( window ).outerWidth/Height return w/h including scrollbars (gh-1729)
                    return funcName.indexOf("outer") === 0 ? elem["inner" + name] : elem.document.documentElement["client" + name];
                    // Get document width or height
                    if (elem.nodeType === 9) {
                        doc = elem.documentElement;
                        // Either scroll[Width/Height] or offset[Width/Height] or client[Width/Height],
                        // whichever is greatest
                        return Math.max(elem.body["scroll" + name], doc["scroll" + name], elem.body["offset" + name], doc["offset" + name], doc["client" + name]);
                    }
                    return value === undefined ? // Get width or height on the element, requesting but not forcing parseFloat
                    jQuery.css(elem, type, extra) : // Set width or height on the element
                    jQuery.style(elem, type, value, extra);
                }, type, chainable ? margin : undefined, chainable);
            };
        });
    });
    jQuery.each("blur focus focusin focusout resize scroll click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup contextmenu".split(" "), function(i, name) {
        // Handle event binding
        jQuery.fn[name] = function(data, fn) {
            return arguments.length > 0 ? this.on(name, null, data, fn) : this.trigger(name);
        };
    });
    jQuery.fn.extend({
        hover: function(fnOver, fnOut) {
            return this.mouseenter(fnOver).mouseleave(fnOut || fnOver);
        }
    });
    jQuery.fn.extend({
        bind: function(types, data, fn) {
            return this.on(types, null, data, fn);
        },
        unbind: function(types, fn) {
            return this.off(types, null, fn);
        },
        delegate: function(selector, types, data, fn) {
            return this.on(types, selector, data, fn);
        },
        undelegate: function(selector, types, fn) {
            // ( namespace ) or ( selector, types [, fn] )
            return arguments.length === 1 ? this.off(selector, "**") : this.off(types, selector || "**", fn);
        }
    });
    // Bind a function to a context, optionally partially applying any
    // arguments.
    // jQuery.proxy is deprecated to promote standards (specifically Function#bind)
    // However, it is not slated for removal any time soon
    jQuery.proxy = function(fn, context) {
        var tmp, args, proxy;
        if (typeof context === "string") {
            tmp = fn[context];
            context = fn;
            fn = tmp;
        }
        // Quick check to determine if target is callable, in the spec
        // this throws a TypeError, but we will just return undefined.
        if (!isFunction(fn)) return undefined;
        // Simulated bind
        args = slice.call(arguments, 2);
        proxy = function() {
            return fn.apply(context || this, args.concat(slice.call(arguments)));
        };
        // Set the guid of unique handler to the same of original handler, so it can be removed
        proxy.guid = fn.guid = fn.guid || jQuery.guid++;
        return proxy;
    };
    jQuery.holdReady = function(hold) {
        if (hold) jQuery.readyWait++;
        else jQuery.ready(true);
    };
    jQuery.isArray = Array.isArray;
    jQuery.parseJSON = JSON.parse;
    jQuery.nodeName = nodeName;
    jQuery.isFunction = isFunction;
    jQuery.isWindow = isWindow;
    jQuery.camelCase = camelCase;
    jQuery.type = toType;
    jQuery.now = Date.now;
    jQuery.isNumeric = function(obj) {
        // As of jQuery 3.0, isNumeric is limited to
        // strings and numbers (primitives or objects)
        // that can be coerced to finite numbers (gh-2662)
        var type = jQuery.type(obj);
        return (type === "number" || type === "string") && // parseFloat NaNs numeric-cast false positives ("")
        // ...but misinterprets leading-number strings, particularly hex literals ("0x...")
        // subtraction forces infinities to NaN
        !isNaN(obj - parseFloat(obj));
    };
    // Register as a named AMD module, since jQuery can be concatenated with other
    // files that may use define, but not via a proper concatenation script that
    // understands anonymous AMD modules. A named AMD is safest and most robust
    // way to register. Lowercase jquery is used because AMD module names are
    // derived from file names, and jQuery is normally delivered in a lowercase
    // file name. Do this after creating the global so that if an AMD module wants
    // to call noConflict to hide this version of jQuery, it will work.
    // Note that for maximum portability, libraries that are not jQuery should
    // declare themselves as anonymous modules, and avoid setting a global if an
    // AMD loader is present. jQuery is a special case. For more information, see
    // https://github.com/jrburke/requirejs/wiki/Updating-existing-libraries#wiki-anon
    if (typeof define === "function" && define.amd) define("jquery", [], function() {
        return jQuery;
    });
    var // Map over jQuery in case of overwrite
    _jQuery = window1.jQuery, // Map over the $ in case of overwrite
    _$ = window1.$;
    jQuery.noConflict = function(deep) {
        if (window1.$ === jQuery) window1.$ = _$;
        if (deep && window1.jQuery === jQuery) window1.jQuery = _jQuery;
        return jQuery;
    };
    // Expose jQuery and $ identifiers, even in AMD
    // (#7102#comment:10, https://github.com/jquery/jquery/pull/557)
    // and CommonJS for browser emulators (#13566)
    if (!noGlobal) window1.jQuery = window1.$ = jQuery;
    return jQuery;
});

},{}],"f6YAY":[function(require,module,exports) {
(function(root, factory) {
    if (typeof define === "function" && define.amd) // AMD. Register as an anonymous module unless amdModuleId is set
    define([
        "jquery"
    ], function(a0) {
        return root["jQuery"] = factory(a0);
    });
    else // Node. Does not work with strict CommonJS, but
    // only CommonJS-like environments that support module.exports,
    // like Node.
    module.exports = factory(require("25ffae784e4c9ccd"));
})(this, function(jQuery) {
    /*
 * jQuery Easing v1.3 - http://gsgd.co.uk/sandbox/jquery/easing/
 *
 * Uses the built in easing capabilities added In jQuery 1.1
 * to offer multiple easing options
 *
 * TERMS OF USE - jQuery Easing
 * 
 * Open source under the BSD License. 
 * 
 * Copyright © 2008 George McGinley Smith
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without modification, 
 * are permitted provided that the following conditions are met:
 * 
 * Redistributions of source code must retain the above copyright notice, this list of 
 * conditions and the following disclaimer.
 * Redistributions in binary form must reproduce the above copyright notice, this list 
 * of conditions and the following disclaimer in the documentation and/or other materials 
 * provided with the distribution.
 * 
 * Neither the name of the author nor the names of contributors may be used to endorse 
 * or promote products derived from this software without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY 
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
 *  COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 *  EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE
 *  GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED 
 * AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 *  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED 
 * OF THE POSSIBILITY OF SUCH DAMAGE. 
 *
*/ // t: current time, b: begInnIng value, c: change In value, d: duration
    jQuery.easing["jswing"] = jQuery.easing["swing"];
    jQuery.extend(jQuery.easing, {
        def: "easeOutQuad",
        swing: function(x, t, b, c, d) {
            //alert(jQuery.easing.default);
            return jQuery.easing[jQuery.easing.def](x, t, b, c, d);
        },
        easeInQuad: function(x, t, b, c, d) {
            return c * (t /= d) * t + b;
        },
        easeOutQuad: function(x, t, b, c, d) {
            return -c * (t /= d) * (t - 2) + b;
        },
        easeInOutQuad: function(x, t, b, c, d) {
            if ((t /= d / 2) < 1) return c / 2 * t * t + b;
            return -c / 2 * (--t * (t - 2) - 1) + b;
        },
        easeInCubic: function(x, t, b, c, d) {
            return c * (t /= d) * t * t + b;
        },
        easeOutCubic: function(x, t, b, c, d) {
            return c * ((t = t / d - 1) * t * t + 1) + b;
        },
        easeInOutCubic: function(x, t, b, c, d) {
            if ((t /= d / 2) < 1) return c / 2 * t * t * t + b;
            return c / 2 * ((t -= 2) * t * t + 2) + b;
        },
        easeInQuart: function(x, t, b, c, d) {
            return c * (t /= d) * t * t * t + b;
        },
        easeOutQuart: function(x, t, b, c, d) {
            return -c * ((t = t / d - 1) * t * t * t - 1) + b;
        },
        easeInOutQuart: function(x, t, b, c, d) {
            if ((t /= d / 2) < 1) return c / 2 * t * t * t * t + b;
            return -c / 2 * ((t -= 2) * t * t * t - 2) + b;
        },
        easeInQuint: function(x, t, b, c, d) {
            return c * (t /= d) * t * t * t * t + b;
        },
        easeOutQuint: function(x, t, b, c, d) {
            return c * ((t = t / d - 1) * t * t * t * t + 1) + b;
        },
        easeInOutQuint: function(x, t, b, c, d) {
            if ((t /= d / 2) < 1) return c / 2 * t * t * t * t * t + b;
            return c / 2 * ((t -= 2) * t * t * t * t + 2) + b;
        },
        easeInSine: function(x, t, b, c, d) {
            return -c * Math.cos(t / d * (Math.PI / 2)) + c + b;
        },
        easeOutSine: function(x, t, b, c, d) {
            return c * Math.sin(t / d * (Math.PI / 2)) + b;
        },
        easeInOutSine: function(x, t, b, c, d) {
            return -c / 2 * (Math.cos(Math.PI * t / d) - 1) + b;
        },
        easeInExpo: function(x, t, b, c, d) {
            return t == 0 ? b : c * Math.pow(2, 10 * (t / d - 1)) + b;
        },
        easeOutExpo: function(x, t, b, c, d) {
            return t == d ? b + c : c * (-Math.pow(2, -10 * t / d) + 1) + b;
        },
        easeInOutExpo: function(x, t, b, c, d) {
            if (t == 0) return b;
            if (t == d) return b + c;
            if ((t /= d / 2) < 1) return c / 2 * Math.pow(2, 10 * (t - 1)) + b;
            return c / 2 * (-Math.pow(2, -10 * --t) + 2) + b;
        },
        easeInCirc: function(x, t, b, c, d) {
            return -c * (Math.sqrt(1 - (t /= d) * t) - 1) + b;
        },
        easeOutCirc: function(x, t, b, c, d) {
            return c * Math.sqrt(1 - (t = t / d - 1) * t) + b;
        },
        easeInOutCirc: function(x, t, b, c, d) {
            if ((t /= d / 2) < 1) return -c / 2 * (Math.sqrt(1 - t * t) - 1) + b;
            return c / 2 * (Math.sqrt(1 - (t -= 2) * t) + 1) + b;
        },
        easeInElastic: function(x, t, b, c, d) {
            var s = 1.70158;
            var p = 0;
            var a = c;
            if (t == 0) return b;
            if ((t /= d) == 1) return b + c;
            if (!p) p = d * .3;
            if (a < Math.abs(c)) {
                a = c;
                var s = p / 4;
            } else var s = p / (2 * Math.PI) * Math.asin(c / a);
            return -(a * Math.pow(2, 10 * (t -= 1)) * Math.sin((t * d - s) * (2 * Math.PI) / p)) + b;
        },
        easeOutElastic: function(x, t, b, c, d) {
            var s = 1.70158;
            var p = 0;
            var a = c;
            if (t == 0) return b;
            if ((t /= d) == 1) return b + c;
            if (!p) p = d * .3;
            if (a < Math.abs(c)) {
                a = c;
                var s = p / 4;
            } else var s = p / (2 * Math.PI) * Math.asin(c / a);
            return a * Math.pow(2, -10 * t) * Math.sin((t * d - s) * (2 * Math.PI) / p) + c + b;
        },
        easeInOutElastic: function(x, t, b, c, d) {
            var s = 1.70158;
            var p = 0;
            var a = c;
            if (t == 0) return b;
            if ((t /= d / 2) == 2) return b + c;
            if (!p) p = d * (.3 * 1.5);
            if (a < Math.abs(c)) {
                a = c;
                var s = p / 4;
            } else var s = p / (2 * Math.PI) * Math.asin(c / a);
            if (t < 1) return -0.5 * (a * Math.pow(2, 10 * (t -= 1)) * Math.sin((t * d - s) * (2 * Math.PI) / p)) + b;
            return a * Math.pow(2, -10 * (t -= 1)) * Math.sin((t * d - s) * (2 * Math.PI) / p) * .5 + c + b;
        },
        easeInBack: function(x, t, b, c, d, s) {
            if (s == undefined) s = 1.70158;
            return c * (t /= d) * t * ((s + 1) * t - s) + b;
        },
        easeOutBack: function(x, t, b, c, d, s) {
            if (s == undefined) s = 1.70158;
            return c * ((t = t / d - 1) * t * ((s + 1) * t + s) + 1) + b;
        },
        easeInOutBack: function(x, t, b, c, d, s) {
            if (s == undefined) s = 1.70158;
            if ((t /= d / 2) < 1) return c / 2 * (t * t * (((s *= 1.525) + 1) * t - s)) + b;
            return c / 2 * ((t -= 2) * t * (((s *= 1.525) + 1) * t + s) + 2) + b;
        },
        easeInBounce: function(x, t, b, c, d) {
            return c - jQuery.easing.easeOutBounce(x, d - t, 0, c, d) + b;
        },
        easeOutBounce: function(x, t, b, c, d) {
            if ((t /= d) < 1 / 2.75) return c * (7.5625 * t * t) + b;
            else if (t < 2 / 2.75) return c * (7.5625 * (t -= 1.5 / 2.75) * t + .75) + b;
            else if (t < 2.5 / 2.75) return c * (7.5625 * (t -= 2.25 / 2.75) * t + .9375) + b;
            else return c * (7.5625 * (t -= 2.625 / 2.75) * t + .984375) + b;
        },
        easeInOutBounce: function(x, t, b, c, d) {
            if (t < d / 2) return jQuery.easing.easeInBounce(x, t * 2, 0, c, d) * .5 + b;
            return jQuery.easing.easeOutBounce(x, t * 2 - d, 0, c, d) * .5 + c * .5 + b;
        }
    });
    /*
 *
 * TERMS OF USE - EASING EQUATIONS
 * 
 * Open source under the BSD License. 
 * 
 * Copyright © 2001 Robert Penner
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without modification, 
 * are permitted provided that the following conditions are met:
 * 
 * Redistributions of source code must retain the above copyright notice, this list of 
 * conditions and the following disclaimer.
 * Redistributions in binary form must reproduce the above copyright notice, this list 
 * of conditions and the following disclaimer in the documentation and/or other materials 
 * provided with the distribution.
 * 
 * Neither the name of the author nor the names of contributors may be used to endorse 
 * or promote products derived from this software without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY 
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
 *  COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 *  EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE
 *  GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED 
 * AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 *  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED 
 * OF THE POSSIBILITY OF SUCH DAMAGE. 
 *
 */ return jQuery;
});

},{"25ffae784e4c9ccd":"9o0Tu"}],"l8wPY":[function(require,module,exports) {
var DateFormatter;
!function() {
    "use strict";
    var D, s, r, a, n;
    D = function(e, t) {
        return "string" == typeof e && "string" == typeof t && e.toLowerCase() === t.toLowerCase();
    }, s = function(e, t, a) {
        var n = a || "0", r = e.toString();
        return r.length < t ? s(n + r, t) : r;
    }, r = function(e) {
        var t, a;
        for(e = e || {}, t = 1; t < arguments.length; t++)if (a = arguments[t]) for(var n in a)a.hasOwnProperty(n) && ("object" == typeof a[n] ? r(e[n], a[n]) : e[n] = a[n]);
        return e;
    }, a = function(e, t) {
        for(var a = 0; a < t.length; a++)if (t[a].toLowerCase() === e.toLowerCase()) return a;
        return -1;
    }, n = {
        dateSettings: {
            days: [
                "Sunday",
                "Monday",
                "Tuesday",
                "Wednesday",
                "Thursday",
                "Friday",
                "Saturday"
            ],
            daysShort: [
                "Sun",
                "Mon",
                "Tue",
                "Wed",
                "Thu",
                "Fri",
                "Sat"
            ],
            months: [
                "January",
                "February",
                "March",
                "April",
                "May",
                "June",
                "July",
                "August",
                "September",
                "October",
                "November",
                "December"
            ],
            monthsShort: [
                "Jan",
                "Feb",
                "Mar",
                "Apr",
                "May",
                "Jun",
                "Jul",
                "Aug",
                "Sep",
                "Oct",
                "Nov",
                "Dec"
            ],
            meridiem: [
                "AM",
                "PM"
            ],
            ordinal: function(e) {
                var t = e % 10, a = {
                    1: "st",
                    2: "nd",
                    3: "rd"
                };
                return 1 !== Math.floor(e % 100 / 10) && a[t] ? a[t] : "th";
            }
        },
        separators: /[ \-+\/\.T:@]/g,
        validParts: /[dDjlNSwzWFmMntLoYyaABgGhHisueTIOPZcrU]/g,
        intParts: /[djwNzmnyYhHgGis]/g,
        tzParts: /\b(?:[PMCEA][SDP]T|(?:Pacific|Mountain|Central|Eastern|Atlantic) (?:Standard|Daylight|Prevailing) Time|(?:GMT|UTC)(?:[-+]\d{4})?)\b/g,
        tzClip: /[^-+\dA-Z]/g
    }, (DateFormatter = function(e) {
        var t = this, a = r(n, e);
        t.dateSettings = a.dateSettings, t.separators = a.separators, t.validParts = a.validParts, t.intParts = a.intParts, t.tzParts = a.tzParts, t.tzClip = a.tzClip;
    }).prototype = {
        constructor: DateFormatter,
        getMonth: function(e) {
            var t;
            return 0 === (t = a(e, this.dateSettings.monthsShort) + 1) && (t = a(e, this.dateSettings.months) + 1), t;
        },
        parseDate: function(e, t) {
            var a, n, r, o, i, s, d, u, l, f, c = this, m = !1, h = !1, g = c.dateSettings, p = {
                date: null,
                year: null,
                month: null,
                day: null,
                hour: 0,
                min: 0,
                sec: 0
            };
            if (!e) return null;
            if (e instanceof Date) return e;
            if ("U" === t) return (r = parseInt(e)) ? new Date(1e3 * r) : e;
            switch(typeof e){
                case "number":
                    return new Date(e);
                case "string":
                    break;
                default:
                    return null;
            }
            if (!(a = t.match(c.validParts)) || 0 === a.length) throw new Error("Invalid date format definition.");
            for(n = e.replace(c.separators, "\x00").split("\x00"), r = 0; r < n.length; r++)switch(o = n[r], i = parseInt(o), a[r]){
                case "y":
                case "Y":
                    if (!i) return null;
                    l = o.length, p.year = 2 === l ? parseInt((i < 70 ? "20" : "19") + o) : i, m = !0;
                    break;
                case "m":
                case "n":
                case "M":
                case "F":
                    if (isNaN(i)) {
                        if (!(0 < (s = c.getMonth(o)))) return null;
                        p.month = s;
                    } else {
                        if (!(1 <= i && i <= 12)) return null;
                        p.month = i;
                    }
                    m = !0;
                    break;
                case "d":
                case "j":
                    if (!(1 <= i && i <= 31)) return null;
                    p.day = i, m = !0;
                    break;
                case "g":
                case "h":
                    if (f = n[d = -1 < a.indexOf("a") ? a.indexOf("a") : -1 < a.indexOf("A") ? a.indexOf("A") : -1], -1 < d) u = D(f, g.meridiem[0]) ? 0 : D(f, g.meridiem[1]) ? 12 : -1, 1 <= i && i <= 12 && -1 < u ? p.hour = i + u - 1 : 0 <= i && i <= 23 && (p.hour = i);
                    else {
                        if (!(0 <= i && i <= 23)) return null;
                        p.hour = i;
                    }
                    h = !0;
                    break;
                case "G":
                case "H":
                    if (!(0 <= i && i <= 23)) return null;
                    p.hour = i, h = !0;
                    break;
                case "i":
                    if (!(0 <= i && i <= 59)) return null;
                    p.min = i, h = !0;
                    break;
                case "s":
                    if (!(0 <= i && i <= 59)) return null;
                    p.sec = i, h = !0;
            }
            if (!0 === m && p.year && p.month && p.day) p.date = new Date(p.year, p.month - 1, p.day, p.hour, p.min, p.sec, 0);
            else {
                if (!0 !== h) return null;
                p.date = new Date(0, 0, 0, p.hour, p.min, p.sec, 0);
            }
            return p.date;
        },
        guessDate: function(e, t) {
            if ("string" != typeof e) return e;
            var a, n, r, o, i, s, d = e.replace(this.separators, "\x00").split("\x00"), u = t.match(this.validParts), l = new Date, f = 0;
            if (!/^[djmn]/g.test(u[0])) return e;
            for(r = 0; r < d.length; r++){
                if (f = 2, i = d[r], s = parseInt(i.substr(0, 2)), isNaN(s)) return null;
                switch(r){
                    case 0:
                        "m" === u[0] || "n" === u[0] ? l.setMonth(s - 1) : l.setDate(s);
                        break;
                    case 1:
                        "m" === u[0] || "n" === u[0] ? l.setDate(s) : l.setMonth(s - 1);
                        break;
                    case 2:
                        if (n = l.getFullYear(), f = (a = i.length) < 4 ? a : 4, !(n = parseInt(a < 4 ? n.toString().substr(0, 4 - a) + i : i.substr(0, 4)))) return null;
                        l.setFullYear(n);
                        break;
                    case 3:
                        l.setHours(s);
                        break;
                    case 4:
                        l.setMinutes(s);
                        break;
                    case 5:
                        l.setSeconds(s);
                }
                0 < (o = i.substr(f)).length && d.splice(r + 1, 0, o);
            }
            return l;
        },
        parseFormat: function(e, n) {
            var a, t = this, r = t.dateSettings, o = /\\?(.?)/gi, i = function(e, t) {
                return a[e] ? a[e]() : t;
            };
            return a = {
                d: function() {
                    return s(a.j(), 2);
                },
                D: function() {
                    return r.daysShort[a.w()];
                },
                j: function() {
                    return n.getDate();
                },
                l: function() {
                    return r.days[a.w()];
                },
                N: function() {
                    return a.w() || 7;
                },
                w: function() {
                    return n.getDay();
                },
                z: function() {
                    var e = new Date(a.Y(), a.n() - 1, a.j()), t = new Date(a.Y(), 0, 1);
                    return Math.round((e - t) / 864e5);
                },
                W: function() {
                    var e = new Date(a.Y(), a.n() - 1, a.j() - a.N() + 3), t = new Date(e.getFullYear(), 0, 4);
                    return s(1 + Math.round((e - t) / 864e5 / 7), 2);
                },
                F: function() {
                    return r.months[n.getMonth()];
                },
                m: function() {
                    return s(a.n(), 2);
                },
                M: function() {
                    return r.monthsShort[n.getMonth()];
                },
                n: function() {
                    return n.getMonth() + 1;
                },
                t: function() {
                    return new Date(a.Y(), a.n(), 0).getDate();
                },
                L: function() {
                    var e = a.Y();
                    return e % 4 == 0 && e % 100 != 0 || e % 400 == 0 ? 1 : 0;
                },
                o: function() {
                    var e = a.n(), t = a.W();
                    return a.Y() + (12 === e && t < 9 ? 1 : 1 === e && 9 < t ? -1 : 0);
                },
                Y: function() {
                    return n.getFullYear();
                },
                y: function() {
                    return a.Y().toString().slice(-2);
                },
                a: function() {
                    return a.A().toLowerCase();
                },
                A: function() {
                    var e = a.G() < 12 ? 0 : 1;
                    return r.meridiem[e];
                },
                B: function() {
                    var e = 3600 * n.getUTCHours(), t = 60 * n.getUTCMinutes(), a = n.getUTCSeconds();
                    return s(Math.floor((e + t + a + 3600) / 86.4) % 1e3, 3);
                },
                g: function() {
                    return a.G() % 12 || 12;
                },
                G: function() {
                    return n.getHours();
                },
                h: function() {
                    return s(a.g(), 2);
                },
                H: function() {
                    return s(a.G(), 2);
                },
                i: function() {
                    return s(n.getMinutes(), 2);
                },
                s: function() {
                    return s(n.getSeconds(), 2);
                },
                u: function() {
                    return s(1e3 * n.getMilliseconds(), 6);
                },
                e: function() {
                    return /\((.*)\)/.exec(String(n))[1] || "Coordinated Universal Time";
                },
                I: function() {
                    return new Date(a.Y(), 0) - Date.UTC(a.Y(), 0) != new Date(a.Y(), 6) - Date.UTC(a.Y(), 6) ? 1 : 0;
                },
                O: function() {
                    var e = n.getTimezoneOffset(), t = Math.abs(e);
                    return (0 < e ? "-" : "+") + s(100 * Math.floor(t / 60) + t % 60, 4);
                },
                P: function() {
                    var e = a.O();
                    return e.substr(0, 3) + ":" + e.substr(3, 2);
                },
                T: function() {
                    return (String(n).match(t.tzParts) || [
                        ""
                    ]).pop().replace(t.tzClip, "") || "UTC";
                },
                Z: function() {
                    return 60 * -n.getTimezoneOffset();
                },
                c: function() {
                    return "Y-m-d\\TH:i:sP".replace(o, i);
                },
                r: function() {
                    return "D, d M Y H:i:s O".replace(o, i);
                },
                U: function() {
                    return n.getTime() / 1e3 || 0;
                }
            }, i(e, e);
        },
        formatDate: function(e, t) {
            var a, n, r, o, i, s = "";
            if ("string" == typeof e && !(e = this.parseDate(e, t))) return null;
            if (e instanceof Date) {
                for(r = t.length, a = 0; a < r; a++)"S" !== (i = t.charAt(a)) && "\\" !== i && (0 < a && "\\" === t.charAt(a - 1) ? s += i : (o = this.parseFormat(i, e), a !== r - 1 && this.intParts.test(i) && "S" === t.charAt(a + 1) && (n = parseInt(o) || 0, o += this.dateSettings.ordinal(n)), s += o));
                return s;
            }
            return "";
        }
    };
}();
var datetimepickerFactory = function(L) {
    "use strict";
    var s = {
        i18n: {
            ar: {
                months: [
                    "كانون الثاني",
                    "شباط",
                    "آذار",
                    "نيسان",
                    "مايو",
                    "حزيران",
                    "تموز",
                    "آب",
                    "أيلول",
                    "تشرين الأول",
                    "تشرين الثاني",
                    "كانون الأول"
                ],
                dayOfWeekShort: [
                    "ن",
                    "ث",
                    "ع",
                    "خ",
                    "ج",
                    "س",
                    "ح"
                ],
                dayOfWeek: [
                    "الأحد",
                    "الاثنين",
                    "الثلاثاء",
                    "الأربعاء",
                    "الخميس",
                    "الجمعة",
                    "السبت",
                    "الأحد"
                ]
            },
            ro: {
                months: [
                    "Ianuarie",
                    "Februarie",
                    "Martie",
                    "Aprilie",
                    "Mai",
                    "Iunie",
                    "Iulie",
                    "August",
                    "Septembrie",
                    "Octombrie",
                    "Noiembrie",
                    "Decembrie"
                ],
                dayOfWeekShort: [
                    "Du",
                    "Lu",
                    "Ma",
                    "Mi",
                    "Jo",
                    "Vi",
                    "S\xe2"
                ],
                dayOfWeek: [
                    "Duminică",
                    "Luni",
                    "Marţi",
                    "Miercuri",
                    "Joi",
                    "Vineri",
                    "S\xe2mbătă"
                ]
            },
            id: {
                months: [
                    "Januari",
                    "Februari",
                    "Maret",
                    "April",
                    "Mei",
                    "Juni",
                    "Juli",
                    "Agustus",
                    "September",
                    "Oktober",
                    "November",
                    "Desember"
                ],
                dayOfWeekShort: [
                    "Min",
                    "Sen",
                    "Sel",
                    "Rab",
                    "Kam",
                    "Jum",
                    "Sab"
                ],
                dayOfWeek: [
                    "Minggu",
                    "Senin",
                    "Selasa",
                    "Rabu",
                    "Kamis",
                    "Jumat",
                    "Sabtu"
                ]
            },
            is: {
                months: [
                    "Jan\xfaar",
                    "Febr\xfaar",
                    "Mars",
                    "Apr\xedl",
                    "Ma\xed",
                    "J\xfan\xed",
                    "J\xfal\xed",
                    "\xc1g\xfast",
                    "September",
                    "Okt\xf3ber",
                    "N\xf3vember",
                    "Desember"
                ],
                dayOfWeekShort: [
                    "Sun",
                    "M\xe1n",
                    "\xderi\xf0",
                    "Mi\xf0",
                    "Fim",
                    "F\xf6s",
                    "Lau"
                ],
                dayOfWeek: [
                    "Sunnudagur",
                    "M\xe1nudagur",
                    "\xderi\xf0judagur",
                    "Mi\xf0vikudagur",
                    "Fimmtudagur",
                    "F\xf6studagur",
                    "Laugardagur"
                ]
            },
            bg: {
                months: [
                    "Януари",
                    "Февруари",
                    "Март",
                    "Април",
                    "Май",
                    "Юни",
                    "Юли",
                    "Август",
                    "Септември",
                    "Октомври",
                    "Ноември",
                    "Декември"
                ],
                dayOfWeekShort: [
                    "Нд",
                    "Пн",
                    "Вт",
                    "Ср",
                    "Чт",
                    "Пт",
                    "Сб"
                ],
                dayOfWeek: [
                    "Неделя",
                    "Понеделник",
                    "Вторник",
                    "Сряда",
                    "Четвъртък",
                    "Петък",
                    "Събота"
                ]
            },
            fa: {
                months: [
                    "فروردین",
                    "اردیبهشت",
                    "خرداد",
                    "تیر",
                    "مرداد",
                    "شهریور",
                    "مهر",
                    "آبان",
                    "آذر",
                    "دی",
                    "بهمن",
                    "اسفند"
                ],
                dayOfWeekShort: [
                    "یکشنبه",
                    "دوشنبه",
                    "سه شنبه",
                    "چهارشنبه",
                    "پنجشنبه",
                    "جمعه",
                    "شنبه"
                ],
                dayOfWeek: [
                    "یک‌شنبه",
                    "دوشنبه",
                    "سه‌شنبه",
                    "چهارشنبه",
                    "پنج‌شنبه",
                    "جمعه",
                    "شنبه",
                    "یک‌شنبه"
                ]
            },
            ru: {
                months: [
                    "Январь",
                    "Февраль",
                    "Март",
                    "Апрель",
                    "Май",
                    "Июнь",
                    "Июль",
                    "Август",
                    "Сентябрь",
                    "Октябрь",
                    "Ноябрь",
                    "Декабрь"
                ],
                dayOfWeekShort: [
                    "Вс",
                    "Пн",
                    "Вт",
                    "Ср",
                    "Чт",
                    "Пт",
                    "Сб"
                ],
                dayOfWeek: [
                    "Воскресенье",
                    "Понедельник",
                    "Вторник",
                    "Среда",
                    "Четверг",
                    "Пятница",
                    "Суббота"
                ]
            },
            uk: {
                months: [
                    "Січень",
                    "Лютий",
                    "Березень",
                    "Квітень",
                    "Травень",
                    "Червень",
                    "Липень",
                    "Серпень",
                    "Вересень",
                    "Жовтень",
                    "Листопад",
                    "Грудень"
                ],
                dayOfWeekShort: [
                    "Ндл",
                    "Пнд",
                    "Втр",
                    "Срд",
                    "Чтв",
                    "Птн",
                    "Сбт"
                ],
                dayOfWeek: [
                    "Неділя",
                    "Понеділок",
                    "Вівторок",
                    "Середа",
                    "Четвер",
                    "П'ятниця",
                    "Субота"
                ]
            },
            en: {
                months: [
                    "January",
                    "February",
                    "March",
                    "April",
                    "May",
                    "June",
                    "July",
                    "August",
                    "September",
                    "October",
                    "November",
                    "December"
                ],
                dayOfWeekShort: [
                    "Sun",
                    "Mon",
                    "Tue",
                    "Wed",
                    "Thu",
                    "Fri",
                    "Sat"
                ],
                dayOfWeek: [
                    "Sunday",
                    "Monday",
                    "Tuesday",
                    "Wednesday",
                    "Thursday",
                    "Friday",
                    "Saturday"
                ]
            },
            el: {
                months: [
                    "Ιανουάριος",
                    "Φεβρουάριος",
                    "Μάρτιος",
                    "Απρίλιος",
                    "Μάιος",
                    "Ιούνιος",
                    "Ιούλιος",
                    "Αύγουστος",
                    "Σεπτέμβριος",
                    "Οκτώβριος",
                    "Νοέμβριος",
                    "Δεκέμβριος"
                ],
                dayOfWeekShort: [
                    "Κυρ",
                    "Δευ",
                    "Τρι",
                    "Τετ",
                    "Πεμ",
                    "Παρ",
                    "Σαβ"
                ],
                dayOfWeek: [
                    "Κυριακή",
                    "Δευτέρα",
                    "Τρίτη",
                    "Τετάρτη",
                    "Πέμπτη",
                    "Παρασκευή",
                    "Σάββατο"
                ]
            },
            de: {
                months: [
                    "Januar",
                    "Februar",
                    "M\xe4rz",
                    "April",
                    "Mai",
                    "Juni",
                    "Juli",
                    "August",
                    "September",
                    "Oktober",
                    "November",
                    "Dezember"
                ],
                dayOfWeekShort: [
                    "So",
                    "Mo",
                    "Di",
                    "Mi",
                    "Do",
                    "Fr",
                    "Sa"
                ],
                dayOfWeek: [
                    "Sonntag",
                    "Montag",
                    "Dienstag",
                    "Mittwoch",
                    "Donnerstag",
                    "Freitag",
                    "Samstag"
                ]
            },
            nl: {
                months: [
                    "januari",
                    "februari",
                    "maart",
                    "april",
                    "mei",
                    "juni",
                    "juli",
                    "augustus",
                    "september",
                    "oktober",
                    "november",
                    "december"
                ],
                dayOfWeekShort: [
                    "zo",
                    "ma",
                    "di",
                    "wo",
                    "do",
                    "vr",
                    "za"
                ],
                dayOfWeek: [
                    "zondag",
                    "maandag",
                    "dinsdag",
                    "woensdag",
                    "donderdag",
                    "vrijdag",
                    "zaterdag"
                ]
            },
            tr: {
                months: [
                    "Ocak",
                    "Şubat",
                    "Mart",
                    "Nisan",
                    "Mayıs",
                    "Haziran",
                    "Temmuz",
                    "Ağustos",
                    "Eyl\xfcl",
                    "Ekim",
                    "Kasım",
                    "Aralık"
                ],
                dayOfWeekShort: [
                    "Paz",
                    "Pts",
                    "Sal",
                    "\xc7ar",
                    "Per",
                    "Cum",
                    "Cts"
                ],
                dayOfWeek: [
                    "Pazar",
                    "Pazartesi",
                    "Salı",
                    "\xc7arşamba",
                    "Perşembe",
                    "Cuma",
                    "Cumartesi"
                ]
            },
            fr: {
                months: [
                    "Janvier",
                    "F\xe9vrier",
                    "Mars",
                    "Avril",
                    "Mai",
                    "Juin",
                    "Juillet",
                    "Ao\xfbt",
                    "Septembre",
                    "Octobre",
                    "Novembre",
                    "D\xe9cembre"
                ],
                dayOfWeekShort: [
                    "Dim",
                    "Lun",
                    "Mar",
                    "Mer",
                    "Jeu",
                    "Ven",
                    "Sam"
                ],
                dayOfWeek: [
                    "dimanche",
                    "lundi",
                    "mardi",
                    "mercredi",
                    "jeudi",
                    "vendredi",
                    "samedi"
                ]
            },
            es: {
                months: [
                    "Enero",
                    "Febrero",
                    "Marzo",
                    "Abril",
                    "Mayo",
                    "Junio",
                    "Julio",
                    "Agosto",
                    "Septiembre",
                    "Octubre",
                    "Noviembre",
                    "Diciembre"
                ],
                dayOfWeekShort: [
                    "Dom",
                    "Lun",
                    "Mar",
                    "Mi\xe9",
                    "Jue",
                    "Vie",
                    "S\xe1b"
                ],
                dayOfWeek: [
                    "Domingo",
                    "Lunes",
                    "Martes",
                    "Mi\xe9rcoles",
                    "Jueves",
                    "Viernes",
                    "S\xe1bado"
                ]
            },
            th: {
                months: [
                    "มกราคม",
                    "กุมภาพันธ์",
                    "มีนาคม",
                    "เมษายน",
                    "พฤษภาคม",
                    "มิถุนายน",
                    "กรกฎาคม",
                    "สิงหาคม",
                    "กันยายน",
                    "ตุลาคม",
                    "พฤศจิกายน",
                    "ธันวาคม"
                ],
                dayOfWeekShort: [
                    "อา.",
                    "จ.",
                    "อ.",
                    "พ.",
                    "พฤ.",
                    "ศ.",
                    "ส."
                ],
                dayOfWeek: [
                    "อาทิตย์",
                    "จันทร์",
                    "อังคาร",
                    "พุธ",
                    "พฤหัส",
                    "ศุกร์",
                    "เสาร์",
                    "อาทิตย์"
                ]
            },
            pl: {
                months: [
                    "styczeń",
                    "luty",
                    "marzec",
                    "kwiecień",
                    "maj",
                    "czerwiec",
                    "lipiec",
                    "sierpień",
                    "wrzesień",
                    "październik",
                    "listopad",
                    "grudzień"
                ],
                dayOfWeekShort: [
                    "nd",
                    "pn",
                    "wt",
                    "śr",
                    "cz",
                    "pt",
                    "sb"
                ],
                dayOfWeek: [
                    "niedziela",
                    "poniedziałek",
                    "wtorek",
                    "środa",
                    "czwartek",
                    "piątek",
                    "sobota"
                ]
            },
            pt: {
                months: [
                    "Janeiro",
                    "Fevereiro",
                    "Mar\xe7o",
                    "Abril",
                    "Maio",
                    "Junho",
                    "Julho",
                    "Agosto",
                    "Setembro",
                    "Outubro",
                    "Novembro",
                    "Dezembro"
                ],
                dayOfWeekShort: [
                    "Dom",
                    "Seg",
                    "Ter",
                    "Qua",
                    "Qui",
                    "Sex",
                    "Sab"
                ],
                dayOfWeek: [
                    "Domingo",
                    "Segunda",
                    "Ter\xe7a",
                    "Quarta",
                    "Quinta",
                    "Sexta",
                    "S\xe1bado"
                ]
            },
            ch: {
                months: [
                    "一月",
                    "二月",
                    "三月",
                    "四月",
                    "五月",
                    "六月",
                    "七月",
                    "八月",
                    "九月",
                    "十月",
                    "十一月",
                    "十二月"
                ],
                dayOfWeekShort: [
                    "日",
                    "一",
                    "二",
                    "三",
                    "四",
                    "五",
                    "六"
                ]
            },
            se: {
                months: [
                    "Januari",
                    "Februari",
                    "Mars",
                    "April",
                    "Maj",
                    "Juni",
                    "Juli",
                    "Augusti",
                    "September",
                    "Oktober",
                    "November",
                    "December"
                ],
                dayOfWeekShort: [
                    "S\xf6n",
                    "M\xe5n",
                    "Tis",
                    "Ons",
                    "Tor",
                    "Fre",
                    "L\xf6r"
                ]
            },
            km: {
                months: [
                    "មករា​",
                    "កុម្ភៈ",
                    "មិនា​",
                    "មេសា​",
                    "ឧសភា​",
                    "មិថុនា​",
                    "កក្កដា​",
                    "សីហា​",
                    "កញ្ញា​",
                    "តុលា​",
                    "វិច្ឆិកា",
                    "ធ្នូ​"
                ],
                dayOfWeekShort: [
                    "អាទិ​",
                    "ច័ន្ទ​",
                    "អង្គារ​",
                    "ពុធ​",
                    "ព្រហ​​",
                    "សុក្រ​",
                    "សៅរ៍"
                ],
                dayOfWeek: [
                    "អាទិត្យ​",
                    "ច័ន្ទ​",
                    "អង្គារ​",
                    "ពុធ​",
                    "ព្រហស្បតិ៍​",
                    "សុក្រ​",
                    "សៅរ៍"
                ]
            },
            kr: {
                months: [
                    "1월",
                    "2월",
                    "3월",
                    "4월",
                    "5월",
                    "6월",
                    "7월",
                    "8월",
                    "9월",
                    "10월",
                    "11월",
                    "12월"
                ],
                dayOfWeekShort: [
                    "일",
                    "월",
                    "화",
                    "수",
                    "목",
                    "금",
                    "토"
                ],
                dayOfWeek: [
                    "일요일",
                    "월요일",
                    "화요일",
                    "수요일",
                    "목요일",
                    "금요일",
                    "토요일"
                ]
            },
            it: {
                months: [
                    "Gennaio",
                    "Febbraio",
                    "Marzo",
                    "Aprile",
                    "Maggio",
                    "Giugno",
                    "Luglio",
                    "Agosto",
                    "Settembre",
                    "Ottobre",
                    "Novembre",
                    "Dicembre"
                ],
                dayOfWeekShort: [
                    "Dom",
                    "Lun",
                    "Mar",
                    "Mer",
                    "Gio",
                    "Ven",
                    "Sab"
                ],
                dayOfWeek: [
                    "Domenica",
                    "Luned\xec",
                    "Marted\xec",
                    "Mercoled\xec",
                    "Gioved\xec",
                    "Venerd\xec",
                    "Sabato"
                ]
            },
            da: {
                months: [
                    "Januar",
                    "Februar",
                    "Marts",
                    "April",
                    "Maj",
                    "Juni",
                    "Juli",
                    "August",
                    "September",
                    "Oktober",
                    "November",
                    "December"
                ],
                dayOfWeekShort: [
                    "S\xf8n",
                    "Man",
                    "Tir",
                    "Ons",
                    "Tor",
                    "Fre",
                    "L\xf8r"
                ],
                dayOfWeek: [
                    "s\xf8ndag",
                    "mandag",
                    "tirsdag",
                    "onsdag",
                    "torsdag",
                    "fredag",
                    "l\xf8rdag"
                ]
            },
            no: {
                months: [
                    "Januar",
                    "Februar",
                    "Mars",
                    "April",
                    "Mai",
                    "Juni",
                    "Juli",
                    "August",
                    "September",
                    "Oktober",
                    "November",
                    "Desember"
                ],
                dayOfWeekShort: [
                    "S\xf8n",
                    "Man",
                    "Tir",
                    "Ons",
                    "Tor",
                    "Fre",
                    "L\xf8r"
                ],
                dayOfWeek: [
                    "S\xf8ndag",
                    "Mandag",
                    "Tirsdag",
                    "Onsdag",
                    "Torsdag",
                    "Fredag",
                    "L\xf8rdag"
                ]
            },
            ja: {
                months: [
                    "1月",
                    "2月",
                    "3月",
                    "4月",
                    "5月",
                    "6月",
                    "7月",
                    "8月",
                    "9月",
                    "10月",
                    "11月",
                    "12月"
                ],
                dayOfWeekShort: [
                    "日",
                    "月",
                    "火",
                    "水",
                    "木",
                    "金",
                    "土"
                ],
                dayOfWeek: [
                    "日曜",
                    "月曜",
                    "火曜",
                    "水曜",
                    "木曜",
                    "金曜",
                    "土曜"
                ]
            },
            vi: {
                months: [
                    "Th\xe1ng 1",
                    "Th\xe1ng 2",
                    "Th\xe1ng 3",
                    "Th\xe1ng 4",
                    "Th\xe1ng 5",
                    "Th\xe1ng 6",
                    "Th\xe1ng 7",
                    "Th\xe1ng 8",
                    "Th\xe1ng 9",
                    "Th\xe1ng 10",
                    "Th\xe1ng 11",
                    "Th\xe1ng 12"
                ],
                dayOfWeekShort: [
                    "CN",
                    "T2",
                    "T3",
                    "T4",
                    "T5",
                    "T6",
                    "T7"
                ],
                dayOfWeek: [
                    "Chủ nhật",
                    "Thứ hai",
                    "Thứ ba",
                    "Thứ tư",
                    "Thứ năm",
                    "Thứ s\xe1u",
                    "Thứ bảy"
                ]
            },
            sl: {
                months: [
                    "Januar",
                    "Februar",
                    "Marec",
                    "April",
                    "Maj",
                    "Junij",
                    "Julij",
                    "Avgust",
                    "September",
                    "Oktober",
                    "November",
                    "December"
                ],
                dayOfWeekShort: [
                    "Ned",
                    "Pon",
                    "Tor",
                    "Sre",
                    "Čet",
                    "Pet",
                    "Sob"
                ],
                dayOfWeek: [
                    "Nedelja",
                    "Ponedeljek",
                    "Torek",
                    "Sreda",
                    "Četrtek",
                    "Petek",
                    "Sobota"
                ]
            },
            cs: {
                months: [
                    "Leden",
                    "\xdanor",
                    "Březen",
                    "Duben",
                    "Květen",
                    "Červen",
                    "Červenec",
                    "Srpen",
                    "Z\xe1ř\xed",
                    "Ř\xedjen",
                    "Listopad",
                    "Prosinec"
                ],
                dayOfWeekShort: [
                    "Ne",
                    "Po",
                    "\xdat",
                    "St",
                    "Čt",
                    "P\xe1",
                    "So"
                ]
            },
            hu: {
                months: [
                    "Janu\xe1r",
                    "Febru\xe1r",
                    "M\xe1rcius",
                    "\xc1prilis",
                    "M\xe1jus",
                    "J\xfanius",
                    "J\xfalius",
                    "Augusztus",
                    "Szeptember",
                    "Okt\xf3ber",
                    "November",
                    "December"
                ],
                dayOfWeekShort: [
                    "Va",
                    "H\xe9",
                    "Ke",
                    "Sze",
                    "Cs",
                    "P\xe9",
                    "Szo"
                ],
                dayOfWeek: [
                    "vas\xe1rnap",
                    "h\xe9tfő",
                    "kedd",
                    "szerda",
                    "cs\xfct\xf6rt\xf6k",
                    "p\xe9ntek",
                    "szombat"
                ]
            },
            az: {
                months: [
                    "Yanvar",
                    "Fevral",
                    "Mart",
                    "Aprel",
                    "May",
                    "Iyun",
                    "Iyul",
                    "Avqust",
                    "Sentyabr",
                    "Oktyabr",
                    "Noyabr",
                    "Dekabr"
                ],
                dayOfWeekShort: [
                    "B",
                    "Be",
                    "\xc7a",
                    "\xc7",
                    "Ca",
                    "C",
                    "Ş"
                ],
                dayOfWeek: [
                    "Bazar",
                    "Bazar ertəsi",
                    "\xc7ərşənbə axşamı",
                    "\xc7ərşənbə",
                    "C\xfcmə axşamı",
                    "C\xfcmə",
                    "Şənbə"
                ]
            },
            bs: {
                months: [
                    "Januar",
                    "Februar",
                    "Mart",
                    "April",
                    "Maj",
                    "Jun",
                    "Jul",
                    "Avgust",
                    "Septembar",
                    "Oktobar",
                    "Novembar",
                    "Decembar"
                ],
                dayOfWeekShort: [
                    "Ned",
                    "Pon",
                    "Uto",
                    "Sri",
                    "Čet",
                    "Pet",
                    "Sub"
                ],
                dayOfWeek: [
                    "Nedjelja",
                    "Ponedjeljak",
                    "Utorak",
                    "Srijeda",
                    "Četvrtak",
                    "Petak",
                    "Subota"
                ]
            },
            ca: {
                months: [
                    "Gener",
                    "Febrer",
                    "Mar\xe7",
                    "Abril",
                    "Maig",
                    "Juny",
                    "Juliol",
                    "Agost",
                    "Setembre",
                    "Octubre",
                    "Novembre",
                    "Desembre"
                ],
                dayOfWeekShort: [
                    "Dg",
                    "Dl",
                    "Dt",
                    "Dc",
                    "Dj",
                    "Dv",
                    "Ds"
                ],
                dayOfWeek: [
                    "Diumenge",
                    "Dilluns",
                    "Dimarts",
                    "Dimecres",
                    "Dijous",
                    "Divendres",
                    "Dissabte"
                ]
            },
            "en-GB": {
                months: [
                    "January",
                    "February",
                    "March",
                    "April",
                    "May",
                    "June",
                    "July",
                    "August",
                    "September",
                    "October",
                    "November",
                    "December"
                ],
                dayOfWeekShort: [
                    "Sun",
                    "Mon",
                    "Tue",
                    "Wed",
                    "Thu",
                    "Fri",
                    "Sat"
                ],
                dayOfWeek: [
                    "Sunday",
                    "Monday",
                    "Tuesday",
                    "Wednesday",
                    "Thursday",
                    "Friday",
                    "Saturday"
                ]
            },
            et: {
                months: [
                    "Jaanuar",
                    "Veebruar",
                    "M\xe4rts",
                    "Aprill",
                    "Mai",
                    "Juuni",
                    "Juuli",
                    "August",
                    "September",
                    "Oktoober",
                    "November",
                    "Detsember"
                ],
                dayOfWeekShort: [
                    "P",
                    "E",
                    "T",
                    "K",
                    "N",
                    "R",
                    "L"
                ],
                dayOfWeek: [
                    "P\xfchap\xe4ev",
                    "Esmasp\xe4ev",
                    "Teisip\xe4ev",
                    "Kolmap\xe4ev",
                    "Neljap\xe4ev",
                    "Reede",
                    "Laup\xe4ev"
                ]
            },
            eu: {
                months: [
                    "Urtarrila",
                    "Otsaila",
                    "Martxoa",
                    "Apirila",
                    "Maiatza",
                    "Ekaina",
                    "Uztaila",
                    "Abuztua",
                    "Iraila",
                    "Urria",
                    "Azaroa",
                    "Abendua"
                ],
                dayOfWeekShort: [
                    "Ig.",
                    "Al.",
                    "Ar.",
                    "Az.",
                    "Og.",
                    "Or.",
                    "La."
                ],
                dayOfWeek: [
                    "Igandea",
                    "Astelehena",
                    "Asteartea",
                    "Asteazkena",
                    "Osteguna",
                    "Ostirala",
                    "Larunbata"
                ]
            },
            fi: {
                months: [
                    "Tammikuu",
                    "Helmikuu",
                    "Maaliskuu",
                    "Huhtikuu",
                    "Toukokuu",
                    "Kes\xe4kuu",
                    "Hein\xe4kuu",
                    "Elokuu",
                    "Syyskuu",
                    "Lokakuu",
                    "Marraskuu",
                    "Joulukuu"
                ],
                dayOfWeekShort: [
                    "Su",
                    "Ma",
                    "Ti",
                    "Ke",
                    "To",
                    "Pe",
                    "La"
                ],
                dayOfWeek: [
                    "sunnuntai",
                    "maanantai",
                    "tiistai",
                    "keskiviikko",
                    "torstai",
                    "perjantai",
                    "lauantai"
                ]
            },
            gl: {
                months: [
                    "Xan",
                    "Feb",
                    "Maz",
                    "Abr",
                    "Mai",
                    "Xun",
                    "Xul",
                    "Ago",
                    "Set",
                    "Out",
                    "Nov",
                    "Dec"
                ],
                dayOfWeekShort: [
                    "Dom",
                    "Lun",
                    "Mar",
                    "Mer",
                    "Xov",
                    "Ven",
                    "Sab"
                ],
                dayOfWeek: [
                    "Domingo",
                    "Luns",
                    "Martes",
                    "M\xe9rcores",
                    "Xoves",
                    "Venres",
                    "S\xe1bado"
                ]
            },
            hr: {
                months: [
                    "Siječanj",
                    "Veljača",
                    "Ožujak",
                    "Travanj",
                    "Svibanj",
                    "Lipanj",
                    "Srpanj",
                    "Kolovoz",
                    "Rujan",
                    "Listopad",
                    "Studeni",
                    "Prosinac"
                ],
                dayOfWeekShort: [
                    "Ned",
                    "Pon",
                    "Uto",
                    "Sri",
                    "Čet",
                    "Pet",
                    "Sub"
                ],
                dayOfWeek: [
                    "Nedjelja",
                    "Ponedjeljak",
                    "Utorak",
                    "Srijeda",
                    "Četvrtak",
                    "Petak",
                    "Subota"
                ]
            },
            ko: {
                months: [
                    "1월",
                    "2월",
                    "3월",
                    "4월",
                    "5월",
                    "6월",
                    "7월",
                    "8월",
                    "9월",
                    "10월",
                    "11월",
                    "12월"
                ],
                dayOfWeekShort: [
                    "일",
                    "월",
                    "화",
                    "수",
                    "목",
                    "금",
                    "토"
                ],
                dayOfWeek: [
                    "일요일",
                    "월요일",
                    "화요일",
                    "수요일",
                    "목요일",
                    "금요일",
                    "토요일"
                ]
            },
            lt: {
                months: [
                    "Sausio",
                    "Vasario",
                    "Kovo",
                    "Balandžio",
                    "Gegužės",
                    "Birželio",
                    "Liepos",
                    "Rugpjūčio",
                    "Rugsėjo",
                    "Spalio",
                    "Lapkričio",
                    "Gruodžio"
                ],
                dayOfWeekShort: [
                    "Sek",
                    "Pir",
                    "Ant",
                    "Tre",
                    "Ket",
                    "Pen",
                    "Šeš"
                ],
                dayOfWeek: [
                    "Sekmadienis",
                    "Pirmadienis",
                    "Antradienis",
                    "Trečiadienis",
                    "Ketvirtadienis",
                    "Penktadienis",
                    "Šeštadienis"
                ]
            },
            lv: {
                months: [
                    "Janvāris",
                    "Februāris",
                    "Marts",
                    "Aprīlis ",
                    "Maijs",
                    "Jūnijs",
                    "Jūlijs",
                    "Augusts",
                    "Septembris",
                    "Oktobris",
                    "Novembris",
                    "Decembris"
                ],
                dayOfWeekShort: [
                    "Sv",
                    "Pr",
                    "Ot",
                    "Tr",
                    "Ct",
                    "Pk",
                    "St"
                ],
                dayOfWeek: [
                    "Svētdiena",
                    "Pirmdiena",
                    "Otrdiena",
                    "Trešdiena",
                    "Ceturtdiena",
                    "Piektdiena",
                    "Sestdiena"
                ]
            },
            mk: {
                months: [
                    "јануари",
                    "февруари",
                    "март",
                    "април",
                    "мај",
                    "јуни",
                    "јули",
                    "август",
                    "септември",
                    "октомври",
                    "ноември",
                    "декември"
                ],
                dayOfWeekShort: [
                    "нед",
                    "пон",
                    "вто",
                    "сре",
                    "чет",
                    "пет",
                    "саб"
                ],
                dayOfWeek: [
                    "Недела",
                    "Понеделник",
                    "Вторник",
                    "Среда",
                    "Четврток",
                    "Петок",
                    "Сабота"
                ]
            },
            mn: {
                months: [
                    "1-р сар",
                    "2-р сар",
                    "3-р сар",
                    "4-р сар",
                    "5-р сар",
                    "6-р сар",
                    "7-р сар",
                    "8-р сар",
                    "9-р сар",
                    "10-р сар",
                    "11-р сар",
                    "12-р сар"
                ],
                dayOfWeekShort: [
                    "Дав",
                    "Мяг",
                    "Лха",
                    "Пүр",
                    "Бсн",
                    "Бям",
                    "Ням"
                ],
                dayOfWeek: [
                    "Даваа",
                    "Мягмар",
                    "Лхагва",
                    "Пүрэв",
                    "Баасан",
                    "Бямба",
                    "Ням"
                ]
            },
            "pt-BR": {
                months: [
                    "Janeiro",
                    "Fevereiro",
                    "Mar\xe7o",
                    "Abril",
                    "Maio",
                    "Junho",
                    "Julho",
                    "Agosto",
                    "Setembro",
                    "Outubro",
                    "Novembro",
                    "Dezembro"
                ],
                dayOfWeekShort: [
                    "Dom",
                    "Seg",
                    "Ter",
                    "Qua",
                    "Qui",
                    "Sex",
                    "S\xe1b"
                ],
                dayOfWeek: [
                    "Domingo",
                    "Segunda",
                    "Ter\xe7a",
                    "Quarta",
                    "Quinta",
                    "Sexta",
                    "S\xe1bado"
                ]
            },
            sk: {
                months: [
                    "Janu\xe1r",
                    "Febru\xe1r",
                    "Marec",
                    "Apr\xedl",
                    "M\xe1j",
                    "J\xfan",
                    "J\xfal",
                    "August",
                    "September",
                    "Okt\xf3ber",
                    "November",
                    "December"
                ],
                dayOfWeekShort: [
                    "Ne",
                    "Po",
                    "Ut",
                    "St",
                    "Št",
                    "Pi",
                    "So"
                ],
                dayOfWeek: [
                    "Nedeľa",
                    "Pondelok",
                    "Utorok",
                    "Streda",
                    "Štvrtok",
                    "Piatok",
                    "Sobota"
                ]
            },
            sq: {
                months: [
                    "Janar",
                    "Shkurt",
                    "Mars",
                    "Prill",
                    "Maj",
                    "Qershor",
                    "Korrik",
                    "Gusht",
                    "Shtator",
                    "Tetor",
                    "N\xebntor",
                    "Dhjetor"
                ],
                dayOfWeekShort: [
                    "Die",
                    "H\xebn",
                    "Mar",
                    "M\xebr",
                    "Enj",
                    "Pre",
                    "Shtu"
                ],
                dayOfWeek: [
                    "E Diel",
                    "E H\xebn\xeb",
                    "E Martē",
                    "E M\xebrkur\xeb",
                    "E Enjte",
                    "E Premte",
                    "E Shtun\xeb"
                ]
            },
            "sr-YU": {
                months: [
                    "Januar",
                    "Februar",
                    "Mart",
                    "April",
                    "Maj",
                    "Jun",
                    "Jul",
                    "Avgust",
                    "Septembar",
                    "Oktobar",
                    "Novembar",
                    "Decembar"
                ],
                dayOfWeekShort: [
                    "Ned",
                    "Pon",
                    "Uto",
                    "Sre",
                    "čet",
                    "Pet",
                    "Sub"
                ],
                dayOfWeek: [
                    "Nedelja",
                    "Ponedeljak",
                    "Utorak",
                    "Sreda",
                    "Četvrtak",
                    "Petak",
                    "Subota"
                ]
            },
            sr: {
                months: [
                    "јануар",
                    "фебруар",
                    "март",
                    "април",
                    "мај",
                    "јун",
                    "јул",
                    "август",
                    "септембар",
                    "октобар",
                    "новембар",
                    "децембар"
                ],
                dayOfWeekShort: [
                    "нед",
                    "пон",
                    "уто",
                    "сре",
                    "чет",
                    "пет",
                    "суб"
                ],
                dayOfWeek: [
                    "Недеља",
                    "Понедељак",
                    "Уторак",
                    "Среда",
                    "Четвртак",
                    "Петак",
                    "Субота"
                ]
            },
            sv: {
                months: [
                    "Januari",
                    "Februari",
                    "Mars",
                    "April",
                    "Maj",
                    "Juni",
                    "Juli",
                    "Augusti",
                    "September",
                    "Oktober",
                    "November",
                    "December"
                ],
                dayOfWeekShort: [
                    "S\xf6n",
                    "M\xe5n",
                    "Tis",
                    "Ons",
                    "Tor",
                    "Fre",
                    "L\xf6r"
                ],
                dayOfWeek: [
                    "S\xf6ndag",
                    "M\xe5ndag",
                    "Tisdag",
                    "Onsdag",
                    "Torsdag",
                    "Fredag",
                    "L\xf6rdag"
                ]
            },
            "zh-TW": {
                months: [
                    "一月",
                    "二月",
                    "三月",
                    "四月",
                    "五月",
                    "六月",
                    "七月",
                    "八月",
                    "九月",
                    "十月",
                    "十一月",
                    "十二月"
                ],
                dayOfWeekShort: [
                    "日",
                    "一",
                    "二",
                    "三",
                    "四",
                    "五",
                    "六"
                ],
                dayOfWeek: [
                    "星期日",
                    "星期一",
                    "星期二",
                    "星期三",
                    "星期四",
                    "星期五",
                    "星期六"
                ]
            },
            zh: {
                months: [
                    "一月",
                    "二月",
                    "三月",
                    "四月",
                    "五月",
                    "六月",
                    "七月",
                    "八月",
                    "九月",
                    "十月",
                    "十一月",
                    "十二月"
                ],
                dayOfWeekShort: [
                    "日",
                    "一",
                    "二",
                    "三",
                    "四",
                    "五",
                    "六"
                ],
                dayOfWeek: [
                    "星期日",
                    "星期一",
                    "星期二",
                    "星期三",
                    "星期四",
                    "星期五",
                    "星期六"
                ]
            },
            ug: {
                months: [
                    "1-ئاي",
                    "2-ئاي",
                    "3-ئاي",
                    "4-ئاي",
                    "5-ئاي",
                    "6-ئاي",
                    "7-ئاي",
                    "8-ئاي",
                    "9-ئاي",
                    "10-ئاي",
                    "11-ئاي",
                    "12-ئاي"
                ],
                dayOfWeek: [
                    "يەكشەنبە",
                    "دۈشەنبە",
                    "سەيشەنبە",
                    "چارشەنبە",
                    "پەيشەنبە",
                    "جۈمە",
                    "شەنبە"
                ]
            },
            he: {
                months: [
                    "ינואר",
                    "פברואר",
                    "מרץ",
                    "אפריל",
                    "מאי",
                    "יוני",
                    "יולי",
                    "אוגוסט",
                    "ספטמבר",
                    "אוקטובר",
                    "נובמבר",
                    "דצמבר"
                ],
                dayOfWeekShort: [
                    "א'",
                    "ב'",
                    "ג'",
                    "ד'",
                    "ה'",
                    "ו'",
                    "שבת"
                ],
                dayOfWeek: [
                    "ראשון",
                    "שני",
                    "שלישי",
                    "רביעי",
                    "חמישי",
                    "שישי",
                    "שבת",
                    "ראשון"
                ]
            },
            hy: {
                months: [
                    "Հունվար",
                    "Փետրվար",
                    "Մարտ",
                    "Ապրիլ",
                    "Մայիս",
                    "Հունիս",
                    "Հուլիս",
                    "Օգոստոս",
                    "Սեպտեմբեր",
                    "Հոկտեմբեր",
                    "Նոյեմբեր",
                    "Դեկտեմբեր"
                ],
                dayOfWeekShort: [
                    "Կի",
                    "Երկ",
                    "Երք",
                    "Չոր",
                    "Հնգ",
                    "Ուրբ",
                    "Շբթ"
                ],
                dayOfWeek: [
                    "Կիրակի",
                    "Երկուշաբթի",
                    "Երեքշաբթի",
                    "Չորեքշաբթի",
                    "Հինգշաբթի",
                    "Ուրբաթ",
                    "Շաբաթ"
                ]
            },
            kg: {
                months: [
                    "Үчтүн айы",
                    "Бирдин айы",
                    "Жалган Куран",
                    "Чын Куран",
                    "Бугу",
                    "Кулжа",
                    "Теке",
                    "Баш Оона",
                    "Аяк Оона",
                    "Тогуздун айы",
                    "Жетинин айы",
                    "Бештин айы"
                ],
                dayOfWeekShort: [
                    "Жек",
                    "Дүй",
                    "Шей",
                    "Шар",
                    "Бей",
                    "Жум",
                    "Ише"
                ],
                dayOfWeek: [
                    "Жекшемб",
                    "Дүйшөмб",
                    "Шейшемб",
                    "Шаршемб",
                    "Бейшемби",
                    "Жума",
                    "Ишенб"
                ]
            },
            rm: {
                months: [
                    "Schaner",
                    "Favrer",
                    "Mars",
                    "Avrigl",
                    "Matg",
                    "Zercladur",
                    "Fanadur",
                    "Avust",
                    "Settember",
                    "October",
                    "November",
                    "December"
                ],
                dayOfWeekShort: [
                    "Du",
                    "Gli",
                    "Ma",
                    "Me",
                    "Gie",
                    "Ve",
                    "So"
                ],
                dayOfWeek: [
                    "Dumengia",
                    "Glindesdi",
                    "Mardi",
                    "Mesemna",
                    "Gievgia",
                    "Venderdi",
                    "Sonda"
                ]
            },
            ka: {
                months: [
                    "იანვარი",
                    "თებერვალი",
                    "მარტი",
                    "აპრილი",
                    "მაისი",
                    "ივნისი",
                    "ივლისი",
                    "აგვისტო",
                    "სექტემბერი",
                    "ოქტომბერი",
                    "ნოემბერი",
                    "დეკემბერი"
                ],
                dayOfWeekShort: [
                    "კვ",
                    "ორშ",
                    "სამშ",
                    "ოთხ",
                    "ხუთ",
                    "პარ",
                    "შაბ"
                ],
                dayOfWeek: [
                    "კვირა",
                    "ორშაბათი",
                    "სამშაბათი",
                    "ოთხშაბათი",
                    "ხუთშაბათი",
                    "პარასკევი",
                    "შაბათი"
                ]
            }
        },
        ownerDocument: document,
        contentWindow: window,
        value: "",
        rtl: !1,
        format: "Y/m/d H:i",
        formatTime: "H:i",
        formatDate: "Y/m/d",
        startDate: !1,
        step: 60,
        monthChangeSpinner: !0,
        closeOnDateSelect: !1,
        closeOnTimeSelect: !0,
        closeOnWithoutClick: !0,
        closeOnInputClick: !0,
        openOnFocus: !0,
        timepicker: !0,
        datepicker: !0,
        weeks: !1,
        defaultTime: !1,
        defaultDate: !1,
        minDate: !1,
        maxDate: !1,
        minTime: !1,
        maxTime: !1,
        minDateTime: !1,
        maxDateTime: !1,
        allowTimes: [],
        opened: !1,
        initTime: !0,
        inline: !1,
        theme: "",
        touchMovedThreshold: 5,
        onSelectDate: function() {},
        onSelectTime: function() {},
        onChangeMonth: function() {},
        onGetWeekOfYear: function() {},
        onChangeYear: function() {},
        onChangeDateTime: function() {},
        onShow: function() {},
        onClose: function() {},
        onGenerate: function() {},
        withoutCopyright: !0,
        inverseButton: !1,
        hours12: !1,
        next: "xdsoft_next",
        prev: "xdsoft_prev",
        dayOfWeekStart: 0,
        parentID: "body",
        timeHeightInTimePicker: 25,
        timepickerScrollbar: !0,
        todayButton: !0,
        prevButton: !0,
        nextButton: !0,
        defaultSelect: !0,
        scrollMonth: !0,
        scrollTime: !0,
        scrollInput: !0,
        lazyInit: !1,
        mask: !1,
        validateOnBlur: !0,
        allowBlank: !0,
        yearStart: 1950,
        yearEnd: 2050,
        monthStart: 0,
        monthEnd: 11,
        style: "",
        id: "",
        fixed: !1,
        roundTime: "round",
        className: "",
        weekends: [],
        highlightedDates: [],
        highlightedPeriods: [],
        allowDates: [],
        allowDateRe: null,
        disabledDates: [],
        disabledWeekDays: [],
        yearOffset: 0,
        beforeShowDay: null,
        enterLikeTab: !0,
        showApplyButton: !1,
        insideParent: !1
    }, E = null, n = null, R = "en", a = {
        meridiem: [
            "AM",
            "PM"
        ]
    }, r = function() {
        var e = s.i18n[R], t = {
            days: e.dayOfWeek,
            daysShort: e.dayOfWeekShort,
            months: e.months,
            monthsShort: L.map(e.months, function(e) {
                return e.substring(0, 3);
            })
        };
        "function" == typeof DateFormatter && (E = n = new DateFormatter({
            dateSettings: L.extend({}, a, t)
        }));
    }, o = {
        moment: {
            default_options: {
                format: "YYYY/MM/DD HH:mm",
                formatDate: "YYYY/MM/DD",
                formatTime: "HH:mm"
            },
            formatter: {
                parseDate: function(e, t) {
                    if (i(t)) return n.parseDate(e, t);
                    var a = moment(e, t);
                    return !!a.isValid() && a.toDate();
                },
                formatDate: function(e, t) {
                    return i(t) ? n.formatDate(e, t) : moment(e).format(t);
                },
                formatMask: function(e) {
                    return e.replace(/Y{4}/g, "9999").replace(/Y{2}/g, "99").replace(/M{2}/g, "19").replace(/D{2}/g, "39").replace(/H{2}/g, "29").replace(/m{2}/g, "59").replace(/s{2}/g, "59");
                }
            }
        }
    };
    L.datetimepicker = {
        setLocale: function(e) {
            var t = s.i18n[e] ? e : "en";
            R !== t && (R = t, r());
        },
        setDateFormatter: function(e) {
            if ("string" == typeof e && o.hasOwnProperty(e)) {
                var t = o[e];
                L.extend(s, t.default_options), E = t.formatter;
            } else E = e;
        }
    };
    var t = {
        RFC_2822: "D, d M Y H:i:s O",
        ATOM: "Y-m-dTH:i:sP",
        ISO_8601: "Y-m-dTH:i:sO",
        RFC_822: "D, d M y H:i:s O",
        RFC_850: "l, d-M-y H:i:s T",
        RFC_1036: "D, d M y H:i:s O",
        RFC_1123: "D, d M Y H:i:s O",
        RSS: "D, d M Y H:i:s O",
        W3C: "Y-m-dTH:i:sP"
    }, i = function(e) {
        return -1 !== Object.values(t).indexOf(e);
    };
    function m(e, t, a) {
        this.date = e, this.desc = t, this.style = a;
    }
    L.extend(L.datetimepicker, t), r(), window.getComputedStyle || (window.getComputedStyle = function(a) {
        return this.el = a, this.getPropertyValue = function(e) {
            var t = /(-([a-z]))/g;
            return "float" === e && (e = "styleFloat"), t.test(e) && (e = e.replace(t, function(e, t, a) {
                return a.toUpperCase();
            })), a.currentStyle[e] || null;
        }, this;
    }), Array.prototype.indexOf || (Array.prototype.indexOf = function(e, t) {
        var a, n;
        for(a = t || 0, n = this.length; a < n; a += 1)if (this[a] === e) return a;
        return -1;
    }), Date.prototype.countDaysInMonth = function() {
        return new Date(this.getFullYear(), this.getMonth() + 1, 0).getDate();
    }, L.fn.xdsoftScroller = function(p, D) {
        return this.each(function() {
            var o, i, s, d, u, l = L(this), a = function(e) {
                var t, a = {
                    x: 0,
                    y: 0
                };
                return "touchstart" === e.type || "touchmove" === e.type || "touchend" === e.type || "touchcancel" === e.type ? (t = e.originalEvent.touches[0] || e.originalEvent.changedTouches[0], a.x = t.clientX, a.y = t.clientY) : "mousedown" !== e.type && "mouseup" !== e.type && "mousemove" !== e.type && "mouseover" !== e.type && "mouseout" !== e.type && "mouseenter" !== e.type && "mouseleave" !== e.type || (a.x = e.clientX, a.y = e.clientY), a;
            }, f = 100, n = !1, r = 0, c = 0, m = 0, t = !1, h = 0, g = function() {};
            "hide" !== D ? (L(this).hasClass("xdsoft_scroller_box") || (o = l.children().eq(0), i = l[0].clientHeight, s = o[0].offsetHeight, d = L('<div class="xdsoft_scrollbar"></div>'), u = L('<div class="xdsoft_scroller"></div>'), d.append(u), l.addClass("xdsoft_scroller_box").append(d), g = function(e) {
                var t = a(e).y - r + h;
                t < 0 && (t = 0), t + u[0].offsetHeight > m && (t = m - u[0].offsetHeight), l.trigger("scroll_element.xdsoft_scroller", [
                    f ? t / f : 0
                ]);
            }, u.on("touchstart.xdsoft_scroller mousedown.xdsoft_scroller", function(e) {
                i || l.trigger("resize_scroll.xdsoft_scroller", [
                    D
                ]), r = a(e).y, h = parseInt(u.css("margin-top"), 10), m = d[0].offsetHeight, "mousedown" === e.type || "touchstart" === e.type ? (p.ownerDocument && L(p.ownerDocument.body).addClass("xdsoft_noselect"), L([
                    p.ownerDocument.body,
                    p.contentWindow
                ]).on("touchend mouseup.xdsoft_scroller", function e() {
                    L([
                        p.ownerDocument.body,
                        p.contentWindow
                    ]).off("touchend mouseup.xdsoft_scroller", e).off("mousemove.xdsoft_scroller", g).removeClass("xdsoft_noselect");
                }), L(p.ownerDocument.body).on("mousemove.xdsoft_scroller", g)) : (t = !0, e.stopPropagation(), e.preventDefault());
            }).on("touchmove", function(e) {
                t && (e.preventDefault(), g(e));
            }).on("touchend touchcancel", function() {
                t = !1, h = 0;
            }), l.on("scroll_element.xdsoft_scroller", function(e, t) {
                i || l.trigger("resize_scroll.xdsoft_scroller", [
                    t,
                    !0
                ]), t = 1 < t ? 1 : t < 0 || isNaN(t) ? 0 : t, u.css("margin-top", f * t), setTimeout(function() {
                    o.css("marginTop", -parseInt((o[0].offsetHeight - i) * t, 10));
                }, 10);
            }).on("resize_scroll.xdsoft_scroller", function(e, t, a) {
                var n, r;
                i = l[0].clientHeight, s = o[0].offsetHeight, r = (n = i / s) * d[0].offsetHeight, 1 < n ? u.hide() : (u.show(), u.css("height", parseInt(10 < r ? r : 10, 10)), f = d[0].offsetHeight - u[0].offsetHeight, !0 !== a && l.trigger("scroll_element.xdsoft_scroller", [
                    t || Math.abs(parseInt(o.css("marginTop"), 10)) / (s - i)
                ]));
            }), l.on("mousewheel", function(e) {
                var t = Math.abs(parseInt(o.css("marginTop"), 10));
                return (t -= 20 * e.deltaY) < 0 && (t = 0), l.trigger("scroll_element.xdsoft_scroller", [
                    t / (s - i)
                ]), e.stopPropagation(), !1;
            }), l.on("touchstart", function(e) {
                n = a(e), c = Math.abs(parseInt(o.css("marginTop"), 10));
            }), l.on("touchmove", function(e) {
                if (n) {
                    e.preventDefault();
                    var t = a(e);
                    l.trigger("scroll_element.xdsoft_scroller", [
                        (c - (t.y - n.y)) / (s - i)
                    ]);
                }
            }), l.on("touchend touchcancel", function() {
                n = !1, c = 0;
            })), l.trigger("resize_scroll.xdsoft_scroller", [
                D
            ])) : l.find(".xdsoft_scrollbar").hide();
        });
    }, L.fn.datetimepicker = function(H, a) {
        var n, r, o = this, p = 17, D = 13, y = 27, v = 37, b = 38, k = 39, x = 40, T = 9, S = 116, M = 65, w = 67, j = 86, J = 90, z = 89, I = !1, N = L.isPlainObject(H) || !H ? L.extend(!0, {}, s, H) : L.extend(!0, {}, s), i = 0;
        return n = function(O) {
            var t, n, a, r, W, h, _ = L('<div class="xdsoft_datetimepicker xdsoft_noselect"></div>'), e = L('<div class="xdsoft_copyright"><a target="_blank" href="http://xdsoft.net/jqplugins/datetimepicker/">xdsoft.net</a></div>'), g = L('<div class="xdsoft_datepicker active"></div>'), F = L('<div class="xdsoft_monthpicker"><button type="button" class="xdsoft_prev"></button><button type="button" class="xdsoft_today_button"></button><div class="xdsoft_label xdsoft_month"><span></span><i></i></div><div class="xdsoft_label xdsoft_year"><span></span><i></i></div><button type="button" class="xdsoft_next"></button></div>'), C = L('<div class="xdsoft_calendar"></div>'), o = L('<div class="xdsoft_timepicker active"><button type="button" class="xdsoft_prev"></button><div class="xdsoft_time_box"></div><button type="button" class="xdsoft_next"></button></div>'), u = o.find(".xdsoft_time_box").eq(0), P = L('<div class="xdsoft_time_variant"></div>'), i = L('<button type="button" class="xdsoft_save_selected blue-gradient-button">Save Selected</button>'), Y = L('<div class="xdsoft_select xdsoft_monthselect"><div></div></div>'), A = L('<div class="xdsoft_select xdsoft_yearselect"><div></div></div>'), s = !1, d = 0;
            N.id && _.attr("id", N.id), N.style && _.attr("style", N.style), N.weeks && _.addClass("xdsoft_showweeks"), N.rtl && _.addClass("xdsoft_rtl"), _.addClass("xdsoft_" + N.theme), _.addClass(N.className), F.find(".xdsoft_month span").after(Y), F.find(".xdsoft_year span").after(A), F.find(".xdsoft_month,.xdsoft_year").on("touchstart mousedown.xdsoft", function(e) {
                var t, a, n = L(this).find(".xdsoft_select").eq(0), r = 0, o = 0, i = n.is(":visible");
                for(F.find(".xdsoft_select").hide(), W.currentTime && (r = W.currentTime[L(this).hasClass("xdsoft_month") ? "getMonth" : "getFullYear"]()), n[i ? "hide" : "show"](), t = n.find("div.xdsoft_option"), a = 0; a < t.length && t.eq(a).data("value") !== r; a += 1)o += t[0].offsetHeight;
                return n.xdsoftScroller(N, o / (n.children()[0].offsetHeight - n[0].clientHeight)), e.stopPropagation(), !1;
            });
            var l = function(e) {
                var t = e.originalEvent, a = t.touches ? t.touches[0] : t;
                this.touchStartPosition = this.touchStartPosition || a;
                var n = Math.abs(this.touchStartPosition.clientX - a.clientX), r = Math.abs(this.touchStartPosition.clientY - a.clientY);
                Math.sqrt(n * n + r * r) > N.touchMovedThreshold && (this.touchMoved = !0);
            };
            function f() {
                var e, t = !1;
                return N.startDate ? t = W.strToDate(N.startDate) : (t = N.value || (O && O.val && O.val() ? O.val() : "")) ? (t = W.strToDateTime(t), N.yearOffset && (t = new Date(t.getFullYear() - N.yearOffset, t.getMonth(), t.getDate(), t.getHours(), t.getMinutes(), t.getSeconds(), t.getMilliseconds()))) : N.defaultDate && (t = W.strToDateTime(N.defaultDate), N.defaultTime && (e = W.strtotime(N.defaultTime), t.setHours(e.getHours()), t.setMinutes(e.getMinutes()))), t && W.isValidDate(t) ? _.data("changed", !0) : t = "", t || 0;
            }
            function c(m) {
                var h = function(e, t) {
                    var a = e.replace(/([\[\]\/\{\}\(\)\-\.\+]{1})/g, "\\$1").replace(/_/g, "{digit+}").replace(/([0-9]{1})/g, "{digit$1}").replace(/\{digit([0-9]{1})\}/g, "[0-$1_]{1}").replace(/\{digit[\+]\}/g, "[0-9_]{1}");
                    return new RegExp(a).test(t);
                }, g = function(e, t) {
                    if (!(e = "string" == typeof e || e instanceof String ? m.ownerDocument.getElementById(e) : e)) return !1;
                    if (e.createTextRange) {
                        var a = e.createTextRange();
                        return a.collapse(!0), a.moveEnd("character", t), a.moveStart("character", t), a.select(), !0;
                    }
                    return !!e.setSelectionRange && (e.setSelectionRange(t, t), !0);
                };
                m.mask && O.off("keydown.xdsoft"), !0 === m.mask && (E.formatMask ? m.mask = E.formatMask(m.format) : m.mask = m.format.replace(/Y/g, "9999").replace(/F/g, "9999").replace(/m/g, "19").replace(/d/g, "39").replace(/H/g, "29").replace(/i/g, "59").replace(/s/g, "59")), "string" === L.type(m.mask) && (h(m.mask, O.val()) || (O.val(m.mask.replace(/[0-9]/g, "_")), g(O[0], 0)), O.on("paste.xdsoft", function(e) {
                    var t = (e.clipboardData || e.originalEvent.clipboardData || window.clipboardData).getData("text"), a = this.value, n = this.selectionStart;
                    return a = a.substr(0, n) + t + a.substr(n + t.length), n += t.length, h(m.mask, a) ? (this.value = a, g(this, n)) : "" === L.trim(a) ? this.value = m.mask.replace(/[0-9]/g, "_") : O.trigger("error_input.xdsoft"), e.preventDefault(), !1;
                }), O.on("keydown.xdsoft", function(e) {
                    var t, a = this.value, n = e.which, r = this.selectionStart, o = this.selectionEnd, i = r !== o;
                    if (48 <= n && n <= 57 || 96 <= n && n <= 105 || 8 === n || 46 === n) {
                        for(t = 8 === n || 46 === n ? "_" : String.fromCharCode(96 <= n && n <= 105 ? n - 48 : n), 8 === n && r && !i && (r -= 1);;){
                            var s = m.mask.substr(r, 1), d = r < m.mask.length, u = 0 < r;
                            if (!(/[^0-9_]/.test(s) && d && u)) break;
                            r += 8 !== n || i ? 1 : -1;
                        }
                        if (e.metaKey && (i = (r = 0, true)), i) {
                            var l = o - r, f = m.mask.replace(/[0-9]/g, "_"), c = f.substr(r, l).substr(1);
                            a = a.substr(0, r) + (t + c) + a.substr(r + l);
                        } else a = a.substr(0, r) + t + a.substr(r + 1);
                        if ("" === L.trim(a)) a = f;
                        else if (r === m.mask.length) return e.preventDefault(), !1;
                        for(r += 8 === n ? 0 : 1; /[^0-9_]/.test(m.mask.substr(r, 1)) && r < m.mask.length && 0 < r;)r += 8 === n ? 0 : 1;
                        h(m.mask, a) ? (this.value = a, g(this, r)) : "" === L.trim(a) ? this.value = m.mask.replace(/[0-9]/g, "_") : O.trigger("error_input.xdsoft");
                    } else if (-1 !== [
                        M,
                        w,
                        j,
                        J,
                        z
                    ].indexOf(n) && I || -1 !== [
                        y,
                        b,
                        x,
                        v,
                        k,
                        S,
                        p,
                        T,
                        D
                    ].indexOf(n)) return !0;
                    return e.preventDefault(), !1;
                }));
            }
            F.find(".xdsoft_select").xdsoftScroller(N).on("touchstart mousedown.xdsoft", function(e) {
                var t = e.originalEvent;
                this.touchMoved = !1, this.touchStartPosition = t.touches ? t.touches[0] : t, e.stopPropagation(), e.preventDefault();
            }).on("touchmove", ".xdsoft_option", l).on("touchend mousedown.xdsoft", ".xdsoft_option", function() {
                if (!this.touchMoved) {
                    void 0 !== W.currentTime && null !== W.currentTime || (W.currentTime = W.now());
                    var e = W.currentTime.getFullYear();
                    W && W.currentTime && W.currentTime[L(this).parent().parent().hasClass("xdsoft_monthselect") ? "setMonth" : "setFullYear"](L(this).data("value")), L(this).parent().parent().hide(), _.trigger("xchange.xdsoft"), N.onChangeMonth && L.isFunction(N.onChangeMonth) && N.onChangeMonth.call(_, W.currentTime, _.data("input")), e !== W.currentTime.getFullYear() && L.isFunction(N.onChangeYear) && N.onChangeYear.call(_, W.currentTime, _.data("input"));
                }
            }), _.getValue = function() {
                return W.getCurrentTime();
            }, _.setOptions = function(e) {
                var l = {};
                N = L.extend(!0, {}, N, e), e.allowTimes && L.isArray(e.allowTimes) && e.allowTimes.length && (N.allowTimes = L.extend(!0, [], e.allowTimes)), e.weekends && L.isArray(e.weekends) && e.weekends.length && (N.weekends = L.extend(!0, [], e.weekends)), e.allowDates && L.isArray(e.allowDates) && e.allowDates.length && (N.allowDates = L.extend(!0, [], e.allowDates)), e.allowDateRe && "[object String]" === Object.prototype.toString.call(e.allowDateRe) && (N.allowDateRe = new RegExp(e.allowDateRe)), e.highlightedDates && L.isArray(e.highlightedDates) && e.highlightedDates.length && (L.each(e.highlightedDates, function(e, t) {
                    var a, n = L.map(t.split(","), L.trim), r = new m(E.parseDate(n[0], N.formatDate), n[1], n[2]), o = E.formatDate(r.date, N.formatDate);
                    void 0 !== l[o] ? (a = l[o].desc) && a.length && r.desc && r.desc.length && (l[o].desc = a + "\n" + r.desc) : l[o] = r;
                }), N.highlightedDates = L.extend(!0, [], l)), e.highlightedPeriods && L.isArray(e.highlightedPeriods) && e.highlightedPeriods.length && (l = L.extend(!0, [], N.highlightedDates), L.each(e.highlightedPeriods, function(e, t) {
                    var a, n, r, o, i, s, d;
                    if (L.isArray(t)) a = t[0], n = t[1], r = t[2], d = t[3];
                    else {
                        var u = L.map(t.split(","), L.trim);
                        a = E.parseDate(u[0], N.formatDate), n = E.parseDate(u[1], N.formatDate), r = u[2], d = u[3];
                    }
                    for(; a <= n;)o = new m(a, r, d), i = E.formatDate(a, N.formatDate), a.setDate(a.getDate() + 1), void 0 !== l[i] ? (s = l[i].desc) && s.length && o.desc && o.desc.length && (l[i].desc = s + "\n" + o.desc) : l[i] = o;
                }), N.highlightedDates = L.extend(!0, [], l)), e.disabledDates && L.isArray(e.disabledDates) && e.disabledDates.length && (N.disabledDates = L.extend(!0, [], e.disabledDates)), e.disabledWeekDays && L.isArray(e.disabledWeekDays) && e.disabledWeekDays.length && (N.disabledWeekDays = L.extend(!0, [], e.disabledWeekDays)), !N.open && !N.opened || N.inline || O.trigger("open.xdsoft"), N.inline && (s = !0, _.addClass("xdsoft_inline"), O.after(_).hide()), N.inverseButton && (N.next = "xdsoft_prev", N.prev = "xdsoft_next"), N.datepicker ? g.addClass("active") : g.removeClass("active"), N.timepicker ? o.addClass("active") : o.removeClass("active"), N.value && (W.setCurrentTime(N.value), O && O.val && O.val(W.str)), isNaN(N.dayOfWeekStart) ? N.dayOfWeekStart = 0 : N.dayOfWeekStart = parseInt(N.dayOfWeekStart, 10) % 7, N.timepickerScrollbar || u.xdsoftScroller(N, "hide"), N.minDate && /^[\+\-](.*)$/.test(N.minDate) && (N.minDate = E.formatDate(W.strToDateTime(N.minDate), N.formatDate)), N.maxDate && /^[\+\-](.*)$/.test(N.maxDate) && (N.maxDate = E.formatDate(W.strToDateTime(N.maxDate), N.formatDate)), N.minDateTime && /^\+(.*)$/.test(N.minDateTime) && (N.minDateTime = W.strToDateTime(N.minDateTime).dateFormat(N.formatDate)), N.maxDateTime && /^\+(.*)$/.test(N.maxDateTime) && (N.maxDateTime = W.strToDateTime(N.maxDateTime).dateFormat(N.formatDate)), i.toggle(N.showApplyButton), F.find(".xdsoft_today_button").css("visibility", N.todayButton ? "visible" : "hidden"), F.find("." + N.prev).css("visibility", N.prevButton ? "visible" : "hidden"), F.find("." + N.next).css("visibility", N.nextButton ? "visible" : "hidden"), c(N), N.validateOnBlur && O.off("blur.xdsoft").on("blur.xdsoft", function() {
                    if (N.allowBlank && (!L.trim(L(this).val()).length || "string" == typeof N.mask && L.trim(L(this).val()) === N.mask.replace(/[0-9]/g, "_"))) L(this).val(null), _.data("xdsoft_datetime").empty();
                    else {
                        var e = E.parseDate(L(this).val(), N.format);
                        if (e) L(this).val(E.formatDate(e, N.format));
                        else {
                            var t = +[
                                L(this).val()[0],
                                L(this).val()[1]
                            ].join(""), a = +[
                                L(this).val()[2],
                                L(this).val()[3]
                            ].join("");
                            !N.datepicker && N.timepicker && 0 <= t && t < 24 && 0 <= a && a < 60 ? L(this).val([
                                t,
                                a
                            ].map(function(e) {
                                return 9 < e ? e : "0" + e;
                            }).join(":")) : L(this).val(E.formatDate(W.now(), N.format));
                        }
                        _.data("xdsoft_datetime").setCurrentTime(L(this).val());
                    }
                    _.trigger("changedatetime.xdsoft"), _.trigger("close.xdsoft");
                }), N.dayOfWeekStartPrev = 0 === N.dayOfWeekStart ? 6 : N.dayOfWeekStart - 1, _.trigger("xchange.xdsoft").trigger("afterOpen.xdsoft");
            }, _.data("options", N).on("touchstart mousedown.xdsoft", function(e) {
                return e.stopPropagation(), e.preventDefault(), A.hide(), Y.hide(), !1;
            }), u.append(P), u.xdsoftScroller(N), _.on("afterOpen.xdsoft", function() {
                u.xdsoftScroller(N);
            }), _.append(g).append(o), !0 !== N.withoutCopyright && _.append(e), g.append(F).append(C).append(i), N.insideParent ? L(O).parent().append(_) : L(N.parentID).append(_), W = new function() {
                var r = this;
                r.now = function(e) {
                    var t, a, n = new Date;
                    return !e && N.defaultDate && (t = r.strToDateTime(N.defaultDate), n.setFullYear(t.getFullYear()), n.setMonth(t.getMonth()), n.setDate(t.getDate())), n.setFullYear(n.getFullYear()), !e && N.defaultTime && (a = r.strtotime(N.defaultTime), n.setHours(a.getHours()), n.setMinutes(a.getMinutes()), n.setSeconds(a.getSeconds()), n.setMilliseconds(a.getMilliseconds())), n;
                }, r.isValidDate = function(e) {
                    return "[object Date]" === Object.prototype.toString.call(e) && !isNaN(e.getTime());
                }, r.setCurrentTime = function(e, t) {
                    "string" == typeof e ? r.currentTime = r.strToDateTime(e) : r.isValidDate(e) ? r.currentTime = e : e || t || !N.allowBlank || N.inline ? r.currentTime = r.now() : r.currentTime = null, _.trigger("xchange.xdsoft");
                }, r.empty = function() {
                    r.currentTime = null;
                }, r.getCurrentTime = function() {
                    return r.currentTime;
                }, r.nextMonth = function() {
                    void 0 !== r.currentTime && null !== r.currentTime || (r.currentTime = r.now());
                    var e, t = r.currentTime.getMonth() + 1;
                    return 12 === t && (r.currentTime.setFullYear(r.currentTime.getFullYear() + 1), t = 0), e = r.currentTime.getFullYear(), r.currentTime.setDate(Math.min(new Date(r.currentTime.getFullYear(), t + 1, 0).getDate(), r.currentTime.getDate())), r.currentTime.setMonth(t), N.onChangeMonth && L.isFunction(N.onChangeMonth) && N.onChangeMonth.call(_, W.currentTime, _.data("input")), e !== r.currentTime.getFullYear() && L.isFunction(N.onChangeYear) && N.onChangeYear.call(_, W.currentTime, _.data("input")), _.trigger("xchange.xdsoft"), t;
                }, r.prevMonth = function() {
                    void 0 !== r.currentTime && null !== r.currentTime || (r.currentTime = r.now());
                    var e = r.currentTime.getMonth() - 1;
                    return -1 === e && (r.currentTime.setFullYear(r.currentTime.getFullYear() - 1), e = 11), r.currentTime.setDate(Math.min(new Date(r.currentTime.getFullYear(), e + 1, 0).getDate(), r.currentTime.getDate())), r.currentTime.setMonth(e), N.onChangeMonth && L.isFunction(N.onChangeMonth) && N.onChangeMonth.call(_, W.currentTime, _.data("input")), _.trigger("xchange.xdsoft"), e;
                }, r.getWeekOfYear = function(e) {
                    if (N.onGetWeekOfYear && L.isFunction(N.onGetWeekOfYear)) {
                        var t = N.onGetWeekOfYear.call(_, e);
                        if (void 0 !== t) return t;
                    }
                    var a = new Date(e.getFullYear(), 0, 1);
                    return 4 !== a.getDay() && a.setMonth(0, 1 + (4 - a.getDay() + 7) % 7), Math.ceil(((e - a) / 864e5 + a.getDay() + 1) / 7);
                }, r.strToDateTime = function(e) {
                    var t, a, n = [];
                    return e && e instanceof Date && r.isValidDate(e) ? e : ((n = /^([+-]{1})(.*)$/.exec(e)) && (n[2] = E.parseDate(n[2], N.formatDate)), a = n && n[2] ? (t = n[2].getTime() - 6e4 * n[2].getTimezoneOffset(), new Date(r.now(!0).getTime() + parseInt(n[1] + "1", 10) * t)) : e ? E.parseDate(e, N.format) : r.now(), r.isValidDate(a) || (a = r.now()), a);
                }, r.strToDate = function(e) {
                    if (e && e instanceof Date && r.isValidDate(e)) return e;
                    var t = e ? E.parseDate(e, N.formatDate) : r.now(!0);
                    return r.isValidDate(t) || (t = r.now(!0)), t;
                }, r.strtotime = function(e) {
                    if (e && e instanceof Date && r.isValidDate(e)) return e;
                    var t = e ? E.parseDate(e, N.formatTime) : r.now(!0);
                    return r.isValidDate(t) || (t = r.now(!0)), t;
                }, r.str = function() {
                    var e = N.format;
                    return N.yearOffset && (e = (e = e.replace("Y", r.currentTime.getFullYear() + N.yearOffset)).replace("y", String(r.currentTime.getFullYear() + N.yearOffset).substring(2, 4))), E.formatDate(r.currentTime, e);
                }, r.currentTime = this.now();
            }, i.on("touchend click", function(e) {
                e.preventDefault(), _.data("changed", !0), W.setCurrentTime(f()), O.val(W.str()), _.trigger("close.xdsoft");
            }), F.find(".xdsoft_today_button").on("touchend mousedown.xdsoft", function() {
                _.data("changed", !0), W.setCurrentTime(0, !0), _.trigger("afterOpen.xdsoft");
            }).on("dblclick.xdsoft", function() {
                var e, t, a = W.getCurrentTime();
                a = new Date(a.getFullYear(), a.getMonth(), a.getDate()), e = W.strToDate(N.minDate), a < (e = new Date(e.getFullYear(), e.getMonth(), e.getDate())) || (t = W.strToDate(N.maxDate), (t = new Date(t.getFullYear(), t.getMonth(), t.getDate())) < a || (O.val(W.str()), O.trigger("change"), _.trigger("close.xdsoft")));
            }), F.find(".xdsoft_prev,.xdsoft_next").on("touchend mousedown.xdsoft", function() {
                var a = L(this), n = 0, r = !1;
                !function e(t) {
                    a.hasClass(N.next) ? W.nextMonth() : a.hasClass(N.prev) && W.prevMonth(), N.monthChangeSpinner && (r || (n = setTimeout(e, t || 100)));
                }(500), L([
                    N.ownerDocument.body,
                    N.contentWindow
                ]).on("touchend mouseup.xdsoft", function e() {
                    clearTimeout(n), r = !0, L([
                        N.ownerDocument.body,
                        N.contentWindow
                    ]).off("touchend mouseup.xdsoft", e);
                });
            }), o.find(".xdsoft_prev,.xdsoft_next").on("touchend mousedown.xdsoft", function() {
                var o = L(this), i = 0, s = !1, d = 110;
                !function e(t) {
                    var a = u[0].clientHeight, n = P[0].offsetHeight, r = Math.abs(parseInt(P.css("marginTop"), 10));
                    o.hasClass(N.next) && n - a - N.timeHeightInTimePicker >= r ? P.css("marginTop", "-" + (r + N.timeHeightInTimePicker) + "px") : o.hasClass(N.prev) && 0 <= r - N.timeHeightInTimePicker && P.css("marginTop", "-" + (r - N.timeHeightInTimePicker) + "px"), u.trigger("scroll_element.xdsoft_scroller", [
                        Math.abs(parseInt(P[0].style.marginTop, 10) / (n - a))
                    ]), d = 10 < d ? 10 : d - 10, s || (i = setTimeout(e, t || d));
                }(500), L([
                    N.ownerDocument.body,
                    N.contentWindow
                ]).on("touchend mouseup.xdsoft", function e() {
                    clearTimeout(i), s = !0, L([
                        N.ownerDocument.body,
                        N.contentWindow
                    ]).off("touchend mouseup.xdsoft", e);
                });
            }), t = 0, _.on("xchange.xdsoft", function(e) {
                clearTimeout(t), t = setTimeout(function() {
                    void 0 !== W.currentTime && null !== W.currentTime || (W.currentTime = W.now());
                    for(var e, t, a, n, r, o, i, s, d, u, l = "", f = new Date(W.currentTime.getFullYear(), W.currentTime.getMonth(), 1, 12, 0, 0), c = 0, m = W.now(), h = !1, g = !1, p = !1, D = !1, y = [], v = !0, b = ""; f.getDay() !== N.dayOfWeekStart;)f.setDate(f.getDate() - 1);
                    for(l += "<table><thead><tr>", N.weeks && (l += "<th></th>"), e = 0; e < 7; e += 1)l += "<th>" + N.i18n[R].dayOfWeekShort[(e + N.dayOfWeekStart) % 7] + "</th>";
                    for(l += "</tr></thead>", l += "<tbody>", !1 !== N.maxDate && (h = W.strToDate(N.maxDate), h = new Date(h.getFullYear(), h.getMonth(), h.getDate(), 23, 59, 59, 999)), !1 !== N.minDate && (g = W.strToDate(N.minDate), g = new Date(g.getFullYear(), g.getMonth(), g.getDate())), !1 !== N.minDateTime && (p = W.strToDate(N.minDateTime), p = new Date(p.getFullYear(), p.getMonth(), p.getDate(), p.getHours(), p.getMinutes(), p.getSeconds())), !1 !== N.maxDateTime && (D = W.strToDate(N.maxDateTime), D = new Date(D.getFullYear(), D.getMonth(), D.getDate(), D.getHours(), D.getMinutes(), D.getSeconds())), !1 !== D && (u = 31 * (12 * D.getFullYear() + D.getMonth()) + D.getDate()); c < W.currentTime.countDaysInMonth() || f.getDay() !== N.dayOfWeekStart || W.currentTime.getMonth() === f.getMonth();){
                        y = [], c += 1, a = f.getDay(), n = f.getDate(), r = f.getFullYear(), M = f.getMonth(), o = W.getWeekOfYear(f), d = "", y.push("xdsoft_date"), i = N.beforeShowDay && L.isFunction(N.beforeShowDay.call) ? N.beforeShowDay.call(_, f) : null, N.allowDateRe && "[object RegExp]" === Object.prototype.toString.call(N.allowDateRe) && (N.allowDateRe.test(E.formatDate(f, N.formatDate)) || y.push("xdsoft_disabled")), N.allowDates && 0 < N.allowDates.length && -1 === N.allowDates.indexOf(E.formatDate(f, N.formatDate)) && y.push("xdsoft_disabled");
                        var k = 31 * (12 * f.getFullYear() + f.getMonth()) + f.getDate();
                        (!1 !== h && h < f || !1 !== p && f < p || !1 !== g && f < g || !1 !== D && u < k || i && !1 === i[0]) && y.push("xdsoft_disabled"), -1 !== N.disabledDates.indexOf(E.formatDate(f, N.formatDate)) && y.push("xdsoft_disabled"), -1 !== N.disabledWeekDays.indexOf(a) && y.push("xdsoft_disabled"), O.is("[disabled]") && y.push("xdsoft_disabled"), i && "" !== i[1] && y.push(i[1]), W.currentTime.getMonth() !== M && y.push("xdsoft_other_month"), (N.defaultSelect || _.data("changed")) && E.formatDate(W.currentTime, N.formatDate) === E.formatDate(f, N.formatDate) && y.push("xdsoft_current"), E.formatDate(m, N.formatDate) === E.formatDate(f, N.formatDate) && y.push("xdsoft_today"), 0 !== f.getDay() && 6 !== f.getDay() && -1 === N.weekends.indexOf(E.formatDate(f, N.formatDate)) || y.push("xdsoft_weekend"), void 0 !== N.highlightedDates[E.formatDate(f, N.formatDate)] && (t = N.highlightedDates[E.formatDate(f, N.formatDate)], y.push(void 0 === t.style ? "xdsoft_highlighted_default" : t.style), d = void 0 === t.desc ? "" : t.desc), N.beforeShowDay && L.isFunction(N.beforeShowDay) && y.push(N.beforeShowDay(f)), v && (l += "<tr>", v = !1, N.weeks && (l += "<th>" + o + "</th>")), l += '<td data-date="' + n + '" data-month="' + M + '" data-year="' + r + '" class="xdsoft_date xdsoft_day_of_week' + f.getDay() + " " + y.join(" ") + '" title="' + d + '"><div>' + n + "</div></td>", f.getDay() === N.dayOfWeekStartPrev && (l += "</tr>", v = !0), f.setDate(n + 1);
                    }
                    l += "</tbody></table>", C.html(l), F.find(".xdsoft_label span").eq(0).text(N.i18n[R].months[W.currentTime.getMonth()]), F.find(".xdsoft_label span").eq(1).text(W.currentTime.getFullYear() + N.yearOffset), M = b = "";
                    var x = 0;
                    if (!1 !== N.minTime) {
                        var T = W.strtotime(N.minTime);
                        x = 60 * T.getHours() + T.getMinutes();
                    }
                    var S = 1440;
                    if (!1 !== N.maxTime) {
                        T = W.strtotime(N.maxTime);
                        S = 60 * T.getHours() + T.getMinutes();
                    }
                    if (!1 !== N.minDateTime) {
                        T = W.strToDateTime(N.minDateTime);
                        if (E.formatDate(W.currentTime, N.formatDate) === E.formatDate(T, N.formatDate)) {
                            var M = 60 * T.getHours() + T.getMinutes();
                            x < M && (x = M);
                        }
                    }
                    if (!1 !== N.maxDateTime) {
                        T = W.strToDateTime(N.maxDateTime);
                        if (E.formatDate(W.currentTime, N.formatDate) === E.formatDate(T, N.formatDate)) (M = 60 * T.getHours() + T.getMinutes()) < S && (S = M);
                    }
                    if (s = function(e, t) {
                        var a, n = W.now(), r = N.allowTimes && L.isArray(N.allowTimes) && N.allowTimes.length;
                        n.setHours(e), e = parseInt(n.getHours(), 10), n.setMinutes(t), t = parseInt(n.getMinutes(), 10), y = [];
                        var o = 60 * e + t;
                        (O.is("[disabled]") || S <= o || o < x) && y.push("xdsoft_disabled"), (a = new Date(W.currentTime)).setHours(parseInt(W.currentTime.getHours(), 10)), r || a.setMinutes(Math[N.roundTime](W.currentTime.getMinutes() / N.step) * N.step), (N.initTime || N.defaultSelect || _.data("changed")) && a.getHours() === parseInt(e, 10) && (!r && 59 < N.step || a.getMinutes() === parseInt(t, 10)) && (N.defaultSelect || _.data("changed") ? y.push("xdsoft_current") : N.initTime && y.push("xdsoft_init_time")), parseInt(m.getHours(), 10) === parseInt(e, 10) && parseInt(m.getMinutes(), 10) === parseInt(t, 10) && y.push("xdsoft_today"), b += '<div class="xdsoft_time ' + y.join(" ") + '" data-hour="' + e + '" data-minute="' + t + '">' + E.formatDate(n, N.formatTime) + "</div>";
                    }, N.allowTimes && L.isArray(N.allowTimes) && N.allowTimes.length) for(c = 0; c < N.allowTimes.length; c += 1)s(W.strtotime(N.allowTimes[c]).getHours(), M = W.strtotime(N.allowTimes[c]).getMinutes());
                    else for(e = c = 0; c < (N.hours12 ? 12 : 24); c += 1)for(e = 0; e < 60; e += N.step){
                        var w = 60 * c + e;
                        w < x || S <= w || s((c < 10 ? "0" : "") + c, M = (e < 10 ? "0" : "") + e);
                    }
                    for(P.html(b), H = "", c = parseInt(N.yearStart, 10); c <= parseInt(N.yearEnd, 10); c += 1)H += '<div class="xdsoft_option ' + (W.currentTime.getFullYear() === c ? "xdsoft_current" : "") + '" data-value="' + c + '">' + (c + N.yearOffset) + "</div>";
                    for(A.children().eq(0).html(H), c = parseInt(N.monthStart, 10), H = ""; c <= parseInt(N.monthEnd, 10); c += 1)H += '<div class="xdsoft_option ' + (W.currentTime.getMonth() === c ? "xdsoft_current" : "") + '" data-value="' + c + '">' + N.i18n[R].months[c] + "</div>";
                    Y.children().eq(0).html(H), L(_).trigger("generate.xdsoft");
                }, 10), e.stopPropagation();
            }).on("afterOpen.xdsoft", function() {
                var e, t, a, n;
                N.timepicker && (P.find(".xdsoft_current").length ? e = ".xdsoft_current" : P.find(".xdsoft_init_time").length && (e = ".xdsoft_init_time"), e ? (t = u[0].clientHeight, (a = P[0].offsetHeight) - t < (n = P.find(e).index() * N.timeHeightInTimePicker + 1) && (n = a - t), u.trigger("scroll_element.xdsoft_scroller", [
                    parseInt(n, 10) / (a - t)
                ])) : u.trigger("scroll_element.xdsoft_scroller", [
                    0
                ]));
            }), n = 0, C.on("touchend click.xdsoft", "td", function(e) {
                e.stopPropagation(), n += 1;
                var t = L(this), a = W.currentTime;
                if (null == a && (W.currentTime = W.now(), a = W.currentTime), t.hasClass("xdsoft_disabled")) return !1;
                a.setDate(1), a.setFullYear(t.data("year")), a.setMonth(t.data("month")), a.setDate(t.data("date")), _.trigger("select.xdsoft", [
                    a
                ]), O.val(W.str()), N.onSelectDate && L.isFunction(N.onSelectDate) && N.onSelectDate.call(_, W.currentTime, _.data("input"), e), _.data("changed", !0), _.trigger("xchange.xdsoft"), _.trigger("changedatetime.xdsoft"), (1 < n || !0 === N.closeOnDateSelect || !1 === N.closeOnDateSelect && !N.timepicker) && !N.inline && _.trigger("close.xdsoft"), setTimeout(function() {
                    n = 0;
                }, 200);
            }), P.on("touchstart", "div", function(e) {
                this.touchMoved = !1;
            }).on("touchmove", "div", l).on("touchend click.xdsoft", "div", function(e) {
                if (!this.touchMoved) {
                    e.stopPropagation();
                    var t = L(this), a = W.currentTime;
                    if (null == a && (W.currentTime = W.now(), a = W.currentTime), t.hasClass("xdsoft_disabled")) return !1;
                    a.setHours(t.data("hour")), a.setMinutes(t.data("minute")), _.trigger("select.xdsoft", [
                        a
                    ]), _.data("input").val(W.str()), N.onSelectTime && L.isFunction(N.onSelectTime) && N.onSelectTime.call(_, W.currentTime, _.data("input"), e), _.data("changed", !0), _.trigger("xchange.xdsoft"), _.trigger("changedatetime.xdsoft"), !0 !== N.inline && !0 === N.closeOnTimeSelect && _.trigger("close.xdsoft");
                }
            }), g.on("mousewheel.xdsoft", function(e) {
                return !N.scrollMonth || (e.deltaY < 0 ? W.nextMonth() : W.prevMonth(), !1);
            }), O.on("mousewheel.xdsoft", function(e) {
                return !N.scrollInput || (!N.datepicker && N.timepicker ? (0 <= (a = P.find(".xdsoft_current").length ? P.find(".xdsoft_current").eq(0).index() : 0) + e.deltaY && a + e.deltaY < P.children().length && (a += e.deltaY), P.children().eq(a).length && P.children().eq(a).trigger("mousedown"), !1) : N.datepicker && !N.timepicker ? (g.trigger(e, [
                    e.deltaY,
                    e.deltaX,
                    e.deltaY
                ]), O.val && O.val(W.str()), _.trigger("changedatetime.xdsoft"), !1) : void 0);
            }), _.on("changedatetime.xdsoft", function(e) {
                if (N.onChangeDateTime && L.isFunction(N.onChangeDateTime)) {
                    var t = _.data("input");
                    N.onChangeDateTime.call(_, W.currentTime, t, e), delete N.value, t.trigger("change");
                }
            }).on("generate.xdsoft", function() {
                N.onGenerate && L.isFunction(N.onGenerate) && N.onGenerate.call(_, W.currentTime, _.data("input")), s && (_.trigger("afterOpen.xdsoft"), s = !1);
            }).on("click.xdsoft", function(e) {
                e.stopPropagation();
            }), a = 0, h = function(e, t) {
                do {
                    if (!(e = e.parentNode) || !1 === t(e)) break;
                }while ("HTML" !== e.nodeName);
            }, r = function() {
                var e, t, a, n, r, o, i, s, d, u, l, f, c;
                if (e = (s = _.data("input")).offset(), t = s[0], u = "top", a = e.top + t.offsetHeight - 1, n = e.left, r = "absolute", d = L(N.contentWindow).width(), f = L(N.contentWindow).height(), c = L(N.contentWindow).scrollTop(), N.ownerDocument.documentElement.clientWidth - e.left < g.parent().outerWidth(!0)) {
                    var m = g.parent().outerWidth(!0) - t.offsetWidth;
                    n -= m;
                }
                "rtl" === s.parent().css("direction") && (n -= _.outerWidth() - s.outerWidth()), N.fixed ? (a -= c, n -= L(N.contentWindow).scrollLeft(), r = "fixed") : (i = !1, h(t, function(e) {
                    return null !== e && ("fixed" === N.contentWindow.getComputedStyle(e).getPropertyValue("position") ? (i = !0, false) : void 0);
                }), i && !N.insideParent ? (r = "fixed", a + _.outerHeight() > f + c ? (u = "bottom", a = f + c - e.top) : a -= c) : a + _[0].offsetHeight > f + c && (a = e.top - _[0].offsetHeight + 1), a < 0 && (a = 0), n + t.offsetWidth > d && (n = d - t.offsetWidth)), o = _[0], h(o, function(e) {
                    if ("relative" === N.contentWindow.getComputedStyle(e).getPropertyValue("position") && d >= e.offsetWidth) return n -= (d - e.offsetWidth) / 2, !1;
                }), l = {
                    position: r,
                    left: N.insideParent ? t.offsetLeft : n,
                    top: "",
                    bottom: ""
                }, N.insideParent ? l[u] = t.offsetTop + t.offsetHeight : l[u] = a, _.css(l);
            }, _.on("open.xdsoft", function(e) {
                var t = !0;
                N.onShow && L.isFunction(N.onShow) && (t = N.onShow.call(_, W.currentTime, _.data("input"), e)), !1 !== t && (_.show(), r(), L(N.contentWindow).off("resize.xdsoft", r).on("resize.xdsoft", r), N.closeOnWithoutClick && L([
                    N.ownerDocument.body,
                    N.contentWindow
                ]).on("touchstart mousedown.xdsoft", function e() {
                    _.trigger("close.xdsoft"), L([
                        N.ownerDocument.body,
                        N.contentWindow
                    ]).off("touchstart mousedown.xdsoft", e);
                }));
            }).on("close.xdsoft", function(e) {
                var t = !0;
                F.find(".xdsoft_month,.xdsoft_year").find(".xdsoft_select").hide(), N.onClose && L.isFunction(N.onClose) && (t = N.onClose.call(_, W.currentTime, _.data("input"), e)), !1 === t || N.opened || N.inline || _.hide(), e.stopPropagation();
            }).on("toggle.xdsoft", function() {
                _.is(":visible") ? _.trigger("close.xdsoft") : _.trigger("open.xdsoft");
            }).data("input", O), d = 0, _.data("xdsoft_datetime", W), _.setOptions(N), W.setCurrentTime(f()), O.data("xdsoft_datetimepicker", _).on("open.xdsoft focusin.xdsoft mousedown.xdsoft touchstart", function() {
                O.is(":disabled") || O.data("xdsoft_datetimepicker").is(":visible") && N.closeOnInputClick || N.openOnFocus && (clearTimeout(d), d = setTimeout(function() {
                    O.is(":disabled") || (s = !0, W.setCurrentTime(f(), !0), N.mask && c(N), _.trigger("open.xdsoft"));
                }, 100));
            }).on("keydown.xdsoft", function(e) {
                var t, a = e.which;
                return -1 !== [
                    D
                ].indexOf(a) && N.enterLikeTab ? (t = L("input:visible,textarea:visible,button:visible,a:visible"), _.trigger("close.xdsoft"), t.eq(t.index(this) + 1).focus(), !1) : -1 !== [
                    T
                ].indexOf(a) ? (_.trigger("close.xdsoft"), !0) : void 0;
            }).on("blur.xdsoft", function() {
                _.trigger("close.xdsoft");
            });
        }, r = function(e) {
            var t = e.data("xdsoft_datetimepicker");
            t && (t.data("xdsoft_datetime", null), t.remove(), e.data("xdsoft_datetimepicker", null).off(".xdsoft"), L(N.contentWindow).off("resize.xdsoft"), L([
                N.contentWindow,
                N.ownerDocument.body
            ]).off("mousedown.xdsoft touchstart"), e.unmousewheel && e.unmousewheel());
        }, L(N.ownerDocument).off("keydown.xdsoftctrl keyup.xdsoftctrl").off("keydown.xdsoftcmd keyup.xdsoftcmd").on("keydown.xdsoftctrl", function(e) {
            e.keyCode === p && (I = !0);
        }).on("keyup.xdsoftctrl", function(e) {
            e.keyCode === p && (I = !1);
        }).on("keydown.xdsoftcmd", function(e) {
            e.keyCode;
        }).on("keyup.xdsoftcmd", function(e) {
            e.keyCode;
        }), this.each(function() {
            var t, e = L(this).data("xdsoft_datetimepicker");
            if (e) {
                if ("string" === L.type(H)) switch(H){
                    case "show":
                        L(this).select().focus(), e.trigger("open.xdsoft");
                        break;
                    case "hide":
                        e.trigger("close.xdsoft");
                        break;
                    case "toggle":
                        e.trigger("toggle.xdsoft");
                        break;
                    case "destroy":
                        r(L(this));
                        break;
                    case "reset":
                        this.value = this.defaultValue, this.value && e.data("xdsoft_datetime").isValidDate(E.parseDate(this.value, N.format)) || e.data("changed", !1), e.data("xdsoft_datetime").setCurrentTime(this.value);
                        break;
                    case "validate":
                        e.data("input").trigger("blur.xdsoft");
                        break;
                    default:
                        e[H] && L.isFunction(e[H]) && (o = e[H](a));
                }
                else e.setOptions(H);
                return 0;
            }
            "string" !== L.type(H) && (!N.lazyInit || N.open || N.inline ? n(L(this)) : (t = L(this)).on("open.xdsoft focusin.xdsoft mousedown.xdsoft touchstart", function e() {
                t.is(":disabled") || t.data("xdsoft_datetimepicker") || (clearTimeout(i), i = setTimeout(function() {
                    t.data("xdsoft_datetimepicker") || n(t), t.off("open.xdsoft focusin.xdsoft mousedown.xdsoft touchstart", e).trigger("open.xdsoft");
                }, 100));
            }));
        }), o;
    }, L.fn.datetimepicker.defaults = s;
};
!function(e) {
    "function" == typeof define && define.amd ? define([
        "jquery",
        "jquery-mousewheel"
    ], e) : module.exports = e(require("2d6ea0de67382fde"));
}(datetimepickerFactory), function(e) {
    "function" == typeof define && define.amd ? define([
        "jquery"
    ], e) : module.exports = e;
}(function(c) {
    var m, h, e = [
        "wheel",
        "mousewheel",
        "DOMMouseScroll",
        "MozMousePixelScroll"
    ], t = "onwheel" in document || 9 <= document.documentMode ? [
        "wheel"
    ] : [
        "mousewheel",
        "DomMouseScroll",
        "MozMousePixelScroll"
    ], g = Array.prototype.slice;
    if (c.event.fixHooks) for(var a = e.length; a;)c.event.fixHooks[e[--a]] = c.event.mouseHooks;
    var p = c.event.special.mousewheel = {
        version: "3.1.12",
        setup: function() {
            if (this.addEventListener) for(var e = t.length; e;)this.addEventListener(t[--e], n, !1);
            else this.onmousewheel = n;
            c.data(this, "mousewheel-line-height", p.getLineHeight(this)), c.data(this, "mousewheel-page-height", p.getPageHeight(this));
        },
        teardown: function() {
            if (this.removeEventListener) for(var e = t.length; e;)this.removeEventListener(t[--e], n, !1);
            else this.onmousewheel = null;
            c.removeData(this, "mousewheel-line-height"), c.removeData(this, "mousewheel-page-height");
        },
        getLineHeight: function(e) {
            var t = c(e), a = t["offsetParent" in c.fn ? "offsetParent" : "parent"]();
            return a.length || (a = c("body")), parseInt(a.css("fontSize"), 10) || parseInt(t.css("fontSize"), 10) || 16;
        },
        getPageHeight: function(e) {
            return c(e).height();
        },
        settings: {
            adjustOldDeltas: !0,
            normalizeOffset: !0
        }
    };
    function n(e) {
        var t, a = e || window.event, n = g.call(arguments, 1), r = 0, o = 0, i = 0, s = 0, d = 0;
        if ((e = c.event.fix(a)).type = "mousewheel", "detail" in a && (i = -1 * a.detail), "wheelDelta" in a && (i = a.wheelDelta), "wheelDeltaY" in a && (i = a.wheelDeltaY), "wheelDeltaX" in a && (o = -1 * a.wheelDeltaX), "axis" in a && a.axis === a.HORIZONTAL_AXIS && (o = -1 * i, i = 0), r = 0 === i ? o : i, "deltaY" in a && (r = i = -1 * a.deltaY), "deltaX" in a && (o = a.deltaX, 0 === i && (r = -1 * o)), 0 !== i || 0 !== o) {
            if (1 === a.deltaMode) {
                var u = c.data(this, "mousewheel-line-height");
                r *= u, i *= u, o *= u;
            } else if (2 === a.deltaMode) {
                var l = c.data(this, "mousewheel-page-height");
                r *= l, i *= l, o *= l;
            }
            if (t = Math.max(Math.abs(i), Math.abs(o)), (!h || t < h) && y(a, h = t) && (h /= 40), y(a, t) && (r /= 40, o /= 40, i /= 40), r = Math[1 <= r ? "floor" : "ceil"](r / h), o = Math[1 <= o ? "floor" : "ceil"](o / h), i = Math[1 <= i ? "floor" : "ceil"](i / h), p.settings.normalizeOffset && this.getBoundingClientRect) {
                var f = this.getBoundingClientRect();
                s = e.clientX - f.left, d = e.clientY - f.top;
            }
            return e.deltaX = o, e.deltaY = i, e.deltaFactor = h, e.offsetX = s, e.offsetY = d, e.deltaMode = 0, n.unshift(e, r, o, i), m && clearTimeout(m), m = setTimeout(D, 200), (c.event.dispatch || c.event.handle).apply(this, n);
        }
    }
    function D() {
        h = null;
    }
    function y(e, t) {
        return p.settings.adjustOldDeltas && "mousewheel" === e.type && t % 120 == 0;
    }
    c.fn.extend({
        mousewheel: function(e) {
            return e ? this.bind("mousewheel", e) : this.trigger("mousewheel");
        },
        unmousewheel: function(e) {
            return this.unbind("mousewheel", e);
        }
    });
});

},{"2d6ea0de67382fde":"9o0Tu"}],"j7FRh":[function(require,module,exports) {
exports.interopDefault = function(a) {
    return a && a.__esModule ? a : {
        default: a
    };
};
exports.defineInteropFlag = function(a) {
    Object.defineProperty(a, "__esModule", {
        value: true
    });
};
exports.exportAll = function(source, dest) {
    Object.keys(source).forEach(function(key) {
        if (key === "default" || key === "__esModule" || dest.hasOwnProperty(key)) return;
        Object.defineProperty(dest, key, {
            enumerable: true,
            get: function() {
                return source[key];
            }
        });
    });
    return dest;
};
exports.export = function(dest, destName, get) {
    Object.defineProperty(dest, destName, {
        enumerable: true,
        get: get
    });
};

},{}],"lYl4X":[function(require,module,exports) {
(function(factory) {
    if (typeof define === "function" && define.amd) // AMD. Register as an anonymous module.
    define([
        "jquery"
    ], factory);
    else if (0, module.exports) // Node/CommonJS
    module.exports = function(root, jQuery1) {
        if (jQuery1 === undefined) {
            // require('jQuery') returns a factory that requires window to
            // build a jQuery instance, we normalize how we use modules
            // that require this pattern but the window provided is a noop
            // if it's defined (how jquery works)
            if (typeof window !== "undefined") jQuery1 = require("a2c25c2384735c22");
            else jQuery1 = require("a2c25c2384735c22")(root);
        }
        factory(jQuery1);
        return jQuery1;
    };
    else // Browser globals
    factory(jQuery);
})(function(jQuery1) {
    // This is needed so we can catch the AMD loader configuration and use it
    // The inner file should be wrapped (by `banner.start.js`) in a function that
    // returns the AMD loader references.
    var S2 = function() {
        // Restore the Select2 AMD loader so it can be used
        // Needed mostly in the language files, where the loader is not inserted
        if (jQuery1 && jQuery1.fn && jQuery1.fn.select2 && jQuery1.fn.select2.amd) var S2 = jQuery1.fn.select2.amd;
        var S2;
        (function() {
            if (!S2 || !S2.requirejs) {
                if (!S2) S2 = {};
                else require1 = S2;
                /**
 * @license almond 0.3.3 Copyright jQuery Foundation and other contributors.
 * Released under MIT license, http://github.com/requirejs/almond/LICENSE
 */ //Going sloppy to avoid 'use strict' string cost, but strict practices should
                //be followed.
                /*global setTimeout: false */ var requirejs, require1, define1;
                (function(undef) {
                    var main, req, makeMap, handlers, defined = {}, waiting = {}, config = {}, defining = {}, hasOwn = Object.prototype.hasOwnProperty, aps = [].slice, jsSuffixRegExp = /\.js$/;
                    function hasProp(obj, prop) {
                        return hasOwn.call(obj, prop);
                    }
                    /**
     * Given a relative module name, like ./something, normalize it to
     * a real name that can be mapped to a path.
     * @param {String} name the relative name
     * @param {String} baseName a real name that the name arg is relative
     * to.
     * @returns {String} normalized name
     */ function normalize(name, baseName) {
                        var nameParts, nameSegment, mapValue, foundMap, lastIndex, foundI, foundStarMap, starI, i, j, part, normalizedBaseParts, baseParts = baseName && baseName.split("/"), map = config.map, starMap = map && map["*"] || {};
                        //Adjust any relative paths.
                        if (name) {
                            name = name.split("/");
                            lastIndex = name.length - 1;
                            // If wanting node ID compatibility, strip .js from end
                            // of IDs. Have to do this here, and not in nameToUrl
                            // because node allows either .js or non .js to map
                            // to same file.
                            if (config.nodeIdCompat && jsSuffixRegExp.test(name[lastIndex])) name[lastIndex] = name[lastIndex].replace(jsSuffixRegExp, "");
                            // Starts with a '.' so need the baseName
                            if (name[0].charAt(0) === "." && baseParts) {
                                //Convert baseName to array, and lop off the last part,
                                //so that . matches that 'directory' and not name of the baseName's
                                //module. For instance, baseName of 'one/two/three', maps to
                                //'one/two/three.js', but we want the directory, 'one/two' for
                                //this normalization.
                                normalizedBaseParts = baseParts.slice(0, baseParts.length - 1);
                                name = normalizedBaseParts.concat(name);
                            }
                            //start trimDots
                            for(i = 0; i < name.length; i++){
                                part = name[i];
                                if (part === ".") {
                                    name.splice(i, 1);
                                    i -= 1;
                                } else if (part === "..") {
                                    // If at the start, or previous value is still ..,
                                    // keep them so that when converted to a path it may
                                    // still work when converted to a path, even though
                                    // as an ID it is less than ideal. In larger point
                                    // releases, may be better to just kick out an error.
                                    if (i === 0 || i === 1 && name[2] === ".." || name[i - 1] === "..") continue;
                                    else if (i > 0) {
                                        name.splice(i - 1, 2);
                                        i -= 2;
                                    }
                                }
                            }
                            //end trimDots
                            name = name.join("/");
                        }
                        //Apply map config if available.
                        if ((baseParts || starMap) && map) {
                            nameParts = name.split("/");
                            for(i = nameParts.length; i > 0; i -= 1){
                                nameSegment = nameParts.slice(0, i).join("/");
                                if (baseParts) //Find the longest baseName segment match in the config.
                                //So, do joins on the biggest to smallest lengths of baseParts.
                                for(j = baseParts.length; j > 0; j -= 1){
                                    mapValue = map[baseParts.slice(0, j).join("/")];
                                    //baseName segment has  config, find if it has one for
                                    //this name.
                                    if (mapValue) {
                                        mapValue = mapValue[nameSegment];
                                        if (mapValue) {
                                            //Match, update name to the new value.
                                            foundMap = mapValue;
                                            foundI = i;
                                            break;
                                        }
                                    }
                                }
                                if (foundMap) break;
                                //Check for a star map match, but just hold on to it,
                                //if there is a shorter segment match later in a matching
                                //config, then favor over this star map.
                                if (!foundStarMap && starMap && starMap[nameSegment]) {
                                    foundStarMap = starMap[nameSegment];
                                    starI = i;
                                }
                            }
                            if (!foundMap && foundStarMap) {
                                foundMap = foundStarMap;
                                foundI = starI;
                            }
                            if (foundMap) {
                                nameParts.splice(0, foundI, foundMap);
                                name = nameParts.join("/");
                            }
                        }
                        return name;
                    }
                    function makeRequire(relName, forceSync) {
                        return function() {
                            //A version of a require function that passes a moduleName
                            //value for items that may need to
                            //look up paths relative to the moduleName
                            var args = aps.call(arguments, 0);
                            //If first arg is not require('string'), and there is only
                            //one arg, it is the array form without a callback. Insert
                            //a null so that the following concat is correct.
                            if (typeof args[0] !== "string" && args.length === 1) args.push(null);
                            return req.apply(undef, args.concat([
                                relName,
                                forceSync
                            ]));
                        };
                    }
                    function makeNormalize(relName) {
                        return function(name) {
                            return normalize(name, relName);
                        };
                    }
                    function makeLoad(depName) {
                        return function(value) {
                            defined[depName] = value;
                        };
                    }
                    function callDep(name) {
                        if (hasProp(waiting, name)) {
                            var args = waiting[name];
                            delete waiting[name];
                            defining[name] = true;
                            main.apply(undef, args);
                        }
                        if (!hasProp(defined, name) && !hasProp(defining, name)) throw new Error("No " + name);
                        return defined[name];
                    }
                    //Turns a plugin!resource to [plugin, resource]
                    //with the plugin being undefined if the name
                    //did not have a plugin prefix.
                    function splitPrefix(name) {
                        var prefix, index = name ? name.indexOf("!") : -1;
                        if (index > -1) {
                            prefix = name.substring(0, index);
                            name = name.substring(index + 1, name.length);
                        }
                        return [
                            prefix,
                            name
                        ];
                    }
                    //Creates a parts array for a relName where first part is plugin ID,
                    //second part is resource ID. Assumes relName has already been normalized.
                    function makeRelParts(relName) {
                        return relName ? splitPrefix(relName) : [];
                    }
                    /**
     * Makes a name map, normalizing the name, and using a plugin
     * for normalization if necessary. Grabs a ref to plugin
     * too, as an optimization.
     */ makeMap = function(name, relParts) {
                        var plugin, parts = splitPrefix(name), prefix = parts[0], relResourceName = relParts[1];
                        name = parts[1];
                        if (prefix) {
                            prefix = normalize(prefix, relResourceName);
                            plugin = callDep(prefix);
                        }
                        //Normalize according
                        if (prefix) {
                            if (plugin && plugin.normalize) name = plugin.normalize(name, makeNormalize(relResourceName));
                            else name = normalize(name, relResourceName);
                        } else {
                            name = normalize(name, relResourceName);
                            parts = splitPrefix(name);
                            prefix = parts[0];
                            name = parts[1];
                            if (prefix) plugin = callDep(prefix);
                        }
                        //Using ridiculous property names for space reasons
                        return {
                            f: prefix ? prefix + "!" + name : name,
                            n: name,
                            pr: prefix,
                            p: plugin
                        };
                    };
                    function makeConfig(name) {
                        return function() {
                            return config && config.config && config.config[name] || {};
                        };
                    }
                    handlers = {
                        require: function(name) {
                            return makeRequire(name);
                        },
                        exports: function(name) {
                            var e = defined[name];
                            if (typeof e !== "undefined") return e;
                            else return defined[name] = {};
                        },
                        module: function(name) {
                            return {
                                id: name,
                                uri: "",
                                exports: defined[name],
                                config: makeConfig(name)
                            };
                        }
                    };
                    main = function(name, deps, callback, relName) {
                        var cjsModule, depName, ret, map, i, relParts, args = [], callbackType = typeof callback, usingExports;
                        //Use name if no relName
                        relName = relName || name;
                        relParts = makeRelParts(relName);
                        //Call the callback to define the module, if necessary.
                        if (callbackType === "undefined" || callbackType === "function") {
                            //Pull out the defined dependencies and pass the ordered
                            //values to the callback.
                            //Default to [require, exports, module] if no deps
                            deps = !deps.length && callback.length ? [
                                "require",
                                "exports",
                                "module"
                            ] : deps;
                            for(i = 0; i < deps.length; i += 1){
                                map = makeMap(deps[i], relParts);
                                depName = map.f;
                                //Fast path CommonJS standard dependencies.
                                if (depName === "require") args[i] = handlers.require(name);
                                else if (depName === "exports") {
                                    //CommonJS module spec 1.1
                                    args[i] = handlers.exports(name);
                                    usingExports = true;
                                } else if (depName === "module") //CommonJS module spec 1.1
                                cjsModule = args[i] = handlers.module(name);
                                else if (hasProp(defined, depName) || hasProp(waiting, depName) || hasProp(defining, depName)) args[i] = callDep(depName);
                                else if (map.p) {
                                    map.p.load(map.n, makeRequire(relName, true), makeLoad(depName), {});
                                    args[i] = defined[depName];
                                } else throw new Error(name + " missing " + depName);
                            }
                            ret = callback ? callback.apply(defined[name], args) : undefined;
                            if (name) {
                                //If setting exports via "module" is in play,
                                //favor that over return value and exports. After that,
                                //favor a non-undefined return value over exports use.
                                if (cjsModule && cjsModule.exports !== undef && cjsModule.exports !== defined[name]) defined[name] = cjsModule.exports;
                                else if (ret !== undef || !usingExports) //Use the return value from the function.
                                defined[name] = ret;
                            }
                        } else if (name) //May just be an object definition for the module. Only
                        //worry about defining if have a module name.
                        defined[name] = callback;
                    };
                    requirejs = require1 = req = function(deps, callback, relName, forceSync, alt) {
                        if (typeof deps === "string") {
                            if (handlers[deps]) //callback in this case is really relName
                            return handlers[deps](callback);
                            //Just return the module wanted. In this scenario, the
                            //deps arg is the module name, and second arg (if passed)
                            //is just the relName.
                            //Normalize module name, if it contains . or ..
                            return callDep(makeMap(deps, makeRelParts(callback)).f);
                        } else if (!deps.splice) {
                            //deps is a config object, not an array.
                            config = deps;
                            if (config.deps) req(config.deps, config.callback);
                            if (!callback) return;
                            if (callback.splice) {
                                //callback is an array, which means it is a dependency list.
                                //Adjust args if there are dependencies
                                deps = callback;
                                callback = relName;
                                relName = null;
                            } else deps = undef;
                        }
                        //Support require(['a'])
                        callback = callback || function() {};
                        //If relName is a function, it is an errback handler,
                        //so remove it.
                        if (typeof relName === "function") {
                            relName = forceSync;
                            forceSync = alt;
                        }
                        //Simulate async callback;
                        if (forceSync) main(undef, deps, callback, relName);
                        else //Using a non-zero value because of concern for what old browsers
                        //do, and latest browsers "upgrade" to 4 if lower value is used:
                        //http://www.whatwg.org/specs/web-apps/current-work/multipage/timers.html#dom-windowtimers-settimeout:
                        //If want a value immediately, use require('id') instead -- something
                        //that works in almond on the global level, but not guaranteed and
                        //unlikely to work in other AMD implementations.
                        setTimeout(function() {
                            main(undef, deps, callback, relName);
                        }, 4);
                        return req;
                    };
                    /**
     * Just drops the config on the floor, but returns req in case
     * the config return value is used.
     */ req.config = function(cfg) {
                        return req(cfg);
                    };
                    /**
     * Expose module registry for debugging and tooling
     */ requirejs._defined = defined;
                    define1 = function(name, deps, callback) {
                        if (typeof name !== "string") throw new Error("See almond README: incorrect module build, no module name");
                        //This module may not have dependencies
                        if (!deps.splice) {
                            //deps is not an array, so probably means
                            //an object literal or factory function for
                            //the value. Adjust args.
                            callback = deps;
                            deps = [];
                        }
                        if (!hasProp(defined, name) && !hasProp(waiting, name)) waiting[name] = [
                            name,
                            deps,
                            callback
                        ];
                    };
                    define1.amd = {
                        jQuery: true
                    };
                })();
                S2.requirejs = requirejs;
                S2.require = require1;
                S2.define = define1;
            }
        })();
        S2.define("almond", function() {});
        /* global jQuery:false, $:false */ S2.define("jquery", [], function() {
            var _$ = jQuery1 || $;
            if (_$ == null && console && console.error) console.error("Select2: An instance of jQuery or a jQuery-compatible library was not found. Make sure that you are including jQuery before Select2 on your web page.");
            return _$;
        });
        S2.define("select2/utils", [
            "jquery"
        ], function($1) {
            var Utils = {};
            Utils.Extend = function(ChildClass, SuperClass) {
                var __hasProp = {}.hasOwnProperty;
                function BaseConstructor() {
                    this.constructor = ChildClass;
                }
                for(var key in SuperClass)if (__hasProp.call(SuperClass, key)) ChildClass[key] = SuperClass[key];
                BaseConstructor.prototype = SuperClass.prototype;
                ChildClass.prototype = new BaseConstructor();
                ChildClass.__super__ = SuperClass.prototype;
                return ChildClass;
            };
            function getMethods(theClass) {
                var proto = theClass.prototype;
                var methods = [];
                for(var methodName in proto){
                    var m = proto[methodName];
                    if (typeof m !== "function") continue;
                    if (methodName === "constructor") continue;
                    methods.push(methodName);
                }
                return methods;
            }
            Utils.Decorate = function(SuperClass, DecoratorClass) {
                var decoratedMethods = getMethods(DecoratorClass);
                var superMethods = getMethods(SuperClass);
                function DecoratedClass() {
                    var unshift = Array.prototype.unshift;
                    var argCount = DecoratorClass.prototype.constructor.length;
                    var calledConstructor = SuperClass.prototype.constructor;
                    if (argCount > 0) {
                        unshift.call(arguments, SuperClass.prototype.constructor);
                        calledConstructor = DecoratorClass.prototype.constructor;
                    }
                    calledConstructor.apply(this, arguments);
                }
                DecoratorClass.displayName = SuperClass.displayName;
                function ctr() {
                    this.constructor = DecoratedClass;
                }
                DecoratedClass.prototype = new ctr();
                for(var m = 0; m < superMethods.length; m++){
                    var superMethod = superMethods[m];
                    DecoratedClass.prototype[superMethod] = SuperClass.prototype[superMethod];
                }
                var calledMethod = function(methodName) {
                    // Stub out the original method if it's not decorating an actual method
                    var originalMethod = function() {};
                    if (methodName in DecoratedClass.prototype) originalMethod = DecoratedClass.prototype[methodName];
                    var decoratedMethod = DecoratorClass.prototype[methodName];
                    return function() {
                        var unshift = Array.prototype.unshift;
                        unshift.call(arguments, originalMethod);
                        return decoratedMethod.apply(this, arguments);
                    };
                };
                for(var d = 0; d < decoratedMethods.length; d++){
                    var decoratedMethod = decoratedMethods[d];
                    DecoratedClass.prototype[decoratedMethod] = calledMethod(decoratedMethod);
                }
                return DecoratedClass;
            };
            var Observable = function() {
                this.listeners = {};
            };
            Observable.prototype.on = function(event, callback) {
                this.listeners = this.listeners || {};
                if (event in this.listeners) this.listeners[event].push(callback);
                else this.listeners[event] = [
                    callback
                ];
            };
            Observable.prototype.trigger = function(event) {
                var slice = Array.prototype.slice;
                var params = slice.call(arguments, 1);
                this.listeners = this.listeners || {};
                // Params should always come in as an array
                if (params == null) params = [];
                // If there are no arguments to the event, use a temporary object
                if (params.length === 0) params.push({});
                // Set the `_type` of the first object to the event
                params[0]._type = event;
                if (event in this.listeners) this.invoke(this.listeners[event], slice.call(arguments, 1));
                if ("*" in this.listeners) this.invoke(this.listeners["*"], arguments);
            };
            Observable.prototype.invoke = function(listeners, params) {
                for(var i = 0, len = listeners.length; i < len; i++)listeners[i].apply(this, params);
            };
            Utils.Observable = Observable;
            Utils.generateChars = function(length) {
                var chars = "";
                for(var i = 0; i < length; i++){
                    var randomChar = Math.floor(Math.random() * 36);
                    chars += randomChar.toString(36);
                }
                return chars;
            };
            Utils.bind = function(func, context) {
                return function() {
                    func.apply(context, arguments);
                };
            };
            Utils._convertData = function(data) {
                for(var originalKey in data){
                    var keys = originalKey.split("-");
                    var dataLevel = data;
                    if (keys.length === 1) continue;
                    for(var k = 0; k < keys.length; k++){
                        var key = keys[k];
                        // Lowercase the first letter
                        // By default, dash-separated becomes camelCase
                        key = key.substring(0, 1).toLowerCase() + key.substring(1);
                        if (!(key in dataLevel)) dataLevel[key] = {};
                        if (k == keys.length - 1) dataLevel[key] = data[originalKey];
                        dataLevel = dataLevel[key];
                    }
                    delete data[originalKey];
                }
                return data;
            };
            Utils.hasScroll = function(index, el) {
                // Adapted from the function created by @ShadowScripter
                // and adapted by @BillBarry on the Stack Exchange Code Review website.
                // The original code can be found at
                // http://codereview.stackexchange.com/q/13338
                // and was designed to be used with the Sizzle selector engine.
                var $el = $1(el);
                var overflowX = el.style.overflowX;
                var overflowY = el.style.overflowY;
                //Check both x and y declarations
                if (overflowX === overflowY && (overflowY === "hidden" || overflowY === "visible")) return false;
                if (overflowX === "scroll" || overflowY === "scroll") return true;
                return $el.innerHeight() < el.scrollHeight || $el.innerWidth() < el.scrollWidth;
            };
            Utils.escapeMarkup = function(markup) {
                var replaceMap = {
                    "\\": "&#92;",
                    "&": "&amp;",
                    "<": "&lt;",
                    ">": "&gt;",
                    '"': "&quot;",
                    "'": "&#39;",
                    "/": "&#47;"
                };
                // Do not try to escape the markup if it's not a string
                if (typeof markup !== "string") return markup;
                return String(markup).replace(/[&<>"'\/\\]/g, function(match) {
                    return replaceMap[match];
                });
            };
            // Cache objects in Utils.__cache instead of $.data (see #4346)
            Utils.__cache = {};
            var id = 0;
            Utils.GetUniqueElementId = function(element) {
                // Get a unique element Id. If element has no id,
                // creates a new unique number, stores it in the id
                // attribute and returns the new id with a prefix.
                // If an id already exists, it simply returns it with a prefix.
                var select2Id = element.getAttribute("data-select2-id");
                if (select2Id != null) return select2Id;
                // If element has id, use it.
                if (element.id) select2Id = "select2-data-" + element.id;
                else select2Id = "select2-data-" + (++id).toString() + "-" + Utils.generateChars(4);
                element.setAttribute("data-select2-id", select2Id);
                return select2Id;
            };
            Utils.StoreData = function(element, name, value) {
                // Stores an item in the cache for a specified element.
                // name is the cache key.
                var id = Utils.GetUniqueElementId(element);
                if (!Utils.__cache[id]) Utils.__cache[id] = {};
                Utils.__cache[id][name] = value;
            };
            Utils.GetData = function(element, name) {
                // Retrieves a value from the cache by its key (name)
                // name is optional. If no name specified, return
                // all cache items for the specified element.
                // and for a specified element.
                var id = Utils.GetUniqueElementId(element);
                if (name) {
                    if (Utils.__cache[id]) {
                        if (Utils.__cache[id][name] != null) return Utils.__cache[id][name];
                        return $1(element).data(name); // Fallback to HTML5 data attribs.
                    }
                    return $1(element).data(name); // Fallback to HTML5 data attribs.
                } else return Utils.__cache[id];
            };
            Utils.RemoveData = function(element) {
                // Removes all cached items for a specified element.
                var id = Utils.GetUniqueElementId(element);
                if (Utils.__cache[id] != null) delete Utils.__cache[id];
                element.removeAttribute("data-select2-id");
            };
            Utils.copyNonInternalCssClasses = function(dest, src) {
                var classes;
                var destinationClasses = dest.getAttribute("class").trim().split(/\s+/);
                destinationClasses = destinationClasses.filter(function(clazz) {
                    // Save all Select2 classes
                    return clazz.indexOf("select2-") === 0;
                });
                var sourceClasses = src.getAttribute("class").trim().split(/\s+/);
                sourceClasses = sourceClasses.filter(function(clazz) {
                    // Only copy non-Select2 classes
                    return clazz.indexOf("select2-") !== 0;
                });
                var replacements = destinationClasses.concat(sourceClasses);
                dest.setAttribute("class", replacements.join(" "));
            };
            return Utils;
        });
        S2.define("select2/results", [
            "jquery",
            "./utils"
        ], function($1, Utils) {
            function Results($element, options, dataAdapter) {
                this.$element = $element;
                this.data = dataAdapter;
                this.options = options;
                Results.__super__.constructor.call(this);
            }
            Utils.Extend(Results, Utils.Observable);
            Results.prototype.render = function() {
                var $results = $1('<ul class="select2-results__options" role="listbox"></ul>');
                if (this.options.get("multiple")) $results.attr("aria-multiselectable", "true");
                this.$results = $results;
                return $results;
            };
            Results.prototype.clear = function() {
                this.$results.empty();
            };
            Results.prototype.displayMessage = function(params) {
                var escapeMarkup = this.options.get("escapeMarkup");
                this.clear();
                this.hideLoading();
                var $message = $1('<li role="alert" aria-live="assertive" class="select2-results__option"></li>');
                var message = this.options.get("translations").get(params.message);
                $message.append(escapeMarkup(message(params.args)));
                $message[0].className += " select2-results__message";
                this.$results.append($message);
            };
            Results.prototype.hideMessages = function() {
                this.$results.find(".select2-results__message").remove();
            };
            Results.prototype.append = function(data) {
                this.hideLoading();
                var $options = [];
                if (data.results == null || data.results.length === 0) {
                    if (this.$results.children().length === 0) this.trigger("results:message", {
                        message: "noResults"
                    });
                    return;
                }
                data.results = this.sort(data.results);
                for(var d = 0; d < data.results.length; d++){
                    var item = data.results[d];
                    var $option = this.option(item);
                    $options.push($option);
                }
                this.$results.append($options);
            };
            Results.prototype.position = function($results, $dropdown) {
                var $resultsContainer = $dropdown.find(".select2-results");
                $resultsContainer.append($results);
            };
            Results.prototype.sort = function(data) {
                var sorter = this.options.get("sorter");
                return sorter(data);
            };
            Results.prototype.highlightFirstItem = function() {
                var $options = this.$results.find(".select2-results__option--selectable");
                var $selected = $options.filter(".select2-results__option--selected");
                // Check if there are any selected options
                if ($selected.length > 0) // If there are selected options, highlight the first
                $selected.first().trigger("mouseenter");
                else // If there are no selected options, highlight the first option
                // in the dropdown
                $options.first().trigger("mouseenter");
                this.ensureHighlightVisible();
            };
            Results.prototype.setClasses = function() {
                var self = this;
                this.data.current(function(selected) {
                    var selectedIds = selected.map(function(s) {
                        return s.id.toString();
                    });
                    var $options = self.$results.find(".select2-results__option--selectable");
                    $options.each(function() {
                        var $option = $1(this);
                        var item = Utils.GetData(this, "data");
                        // id needs to be converted to a string when comparing
                        var id = "" + item.id;
                        if (item.element != null && item.element.selected || item.element == null && selectedIds.indexOf(id) > -1) {
                            this.classList.add("select2-results__option--selected");
                            $option.attr("aria-selected", "true");
                        } else {
                            this.classList.remove("select2-results__option--selected");
                            $option.attr("aria-selected", "false");
                        }
                    });
                });
            };
            Results.prototype.showLoading = function(params) {
                this.hideLoading();
                var loadingMore = this.options.get("translations").get("searching");
                var loading = {
                    disabled: true,
                    loading: true,
                    text: loadingMore(params)
                };
                var $loading = this.option(loading);
                $loading.className += " loading-results";
                this.$results.prepend($loading);
            };
            Results.prototype.hideLoading = function() {
                this.$results.find(".loading-results").remove();
            };
            Results.prototype.option = function(data) {
                var option = document.createElement("li");
                option.classList.add("select2-results__option");
                option.classList.add("select2-results__option--selectable");
                var attrs = {
                    "role": "option"
                };
                var matches = window.Element.prototype.matches || window.Element.prototype.msMatchesSelector || window.Element.prototype.webkitMatchesSelector;
                if (data.element != null && matches.call(data.element, ":disabled") || data.element == null && data.disabled) {
                    attrs["aria-disabled"] = "true";
                    option.classList.remove("select2-results__option--selectable");
                    option.classList.add("select2-results__option--disabled");
                }
                if (data.id == null) option.classList.remove("select2-results__option--selectable");
                if (data._resultId != null) option.id = data._resultId;
                if (data.title) option.title = data.title;
                if (data.children) {
                    attrs.role = "group";
                    attrs["aria-label"] = data.text;
                    option.classList.remove("select2-results__option--selectable");
                    option.classList.add("select2-results__option--group");
                }
                for(var attr in attrs){
                    var val = attrs[attr];
                    option.setAttribute(attr, val);
                }
                if (data.children) {
                    var $option = $1(option);
                    var label = document.createElement("strong");
                    label.className = "select2-results__group";
                    this.template(data, label);
                    var $children = [];
                    for(var c = 0; c < data.children.length; c++){
                        var child = data.children[c];
                        var $child = this.option(child);
                        $children.push($child);
                    }
                    var $childrenContainer = $1("<ul></ul>", {
                        "class": "select2-results__options select2-results__options--nested",
                        "role": "none"
                    });
                    $childrenContainer.append($children);
                    $option.append(label);
                    $option.append($childrenContainer);
                } else this.template(data, option);
                Utils.StoreData(option, "data", data);
                return option;
            };
            Results.prototype.bind = function(container, $container) {
                var self = this;
                var id = container.id + "-results";
                this.$results.attr("id", id);
                container.on("results:all", function(params) {
                    self.clear();
                    self.append(params.data);
                    if (container.isOpen()) {
                        self.setClasses();
                        self.highlightFirstItem();
                    }
                });
                container.on("results:append", function(params) {
                    self.append(params.data);
                    if (container.isOpen()) self.setClasses();
                });
                container.on("query", function(params) {
                    self.hideMessages();
                    self.showLoading(params);
                });
                container.on("select", function() {
                    if (!container.isOpen()) return;
                    self.setClasses();
                    if (self.options.get("scrollAfterSelect")) self.highlightFirstItem();
                });
                container.on("unselect", function() {
                    if (!container.isOpen()) return;
                    self.setClasses();
                    if (self.options.get("scrollAfterSelect")) self.highlightFirstItem();
                });
                container.on("open", function() {
                    // When the dropdown is open, aria-expended="true"
                    self.$results.attr("aria-expanded", "true");
                    self.$results.attr("aria-hidden", "false");
                    self.setClasses();
                    self.ensureHighlightVisible();
                });
                container.on("close", function() {
                    // When the dropdown is closed, aria-expended="false"
                    self.$results.attr("aria-expanded", "false");
                    self.$results.attr("aria-hidden", "true");
                    self.$results.removeAttr("aria-activedescendant");
                });
                container.on("results:toggle", function() {
                    var $highlighted = self.getHighlightedResults();
                    if ($highlighted.length === 0) return;
                    $highlighted.trigger("mouseup");
                });
                container.on("results:select", function() {
                    var $highlighted = self.getHighlightedResults();
                    if ($highlighted.length === 0) return;
                    var data = Utils.GetData($highlighted[0], "data");
                    if ($highlighted.hasClass("select2-results__option--selected")) self.trigger("close", {});
                    else self.trigger("select", {
                        data: data
                    });
                });
                container.on("results:previous", function() {
                    var $highlighted = self.getHighlightedResults();
                    var $options = self.$results.find(".select2-results__option--selectable");
                    var currentIndex = $options.index($highlighted);
                    // If we are already at the top, don't move further
                    // If no options, currentIndex will be -1
                    if (currentIndex <= 0) return;
                    var nextIndex = currentIndex - 1;
                    // If none are highlighted, highlight the first
                    if ($highlighted.length === 0) nextIndex = 0;
                    var $next = $options.eq(nextIndex);
                    $next.trigger("mouseenter");
                    var currentOffset = self.$results.offset().top;
                    var nextTop = $next.offset().top;
                    var nextOffset = self.$results.scrollTop() + (nextTop - currentOffset);
                    if (nextIndex === 0) self.$results.scrollTop(0);
                    else if (nextTop - currentOffset < 0) self.$results.scrollTop(nextOffset);
                });
                container.on("results:next", function() {
                    var $highlighted = self.getHighlightedResults();
                    var $options = self.$results.find(".select2-results__option--selectable");
                    var currentIndex = $options.index($highlighted);
                    var nextIndex = currentIndex + 1;
                    // If we are at the last option, stay there
                    if (nextIndex >= $options.length) return;
                    var $next = $options.eq(nextIndex);
                    $next.trigger("mouseenter");
                    var currentOffset = self.$results.offset().top + self.$results.outerHeight(false);
                    var nextBottom = $next.offset().top + $next.outerHeight(false);
                    var nextOffset = self.$results.scrollTop() + nextBottom - currentOffset;
                    if (nextIndex === 0) self.$results.scrollTop(0);
                    else if (nextBottom > currentOffset) self.$results.scrollTop(nextOffset);
                });
                container.on("results:focus", function(params) {
                    params.element[0].classList.add("select2-results__option--highlighted");
                    params.element[0].setAttribute("aria-selected", "true");
                });
                container.on("results:message", function(params) {
                    self.displayMessage(params);
                });
                if ($1.fn.mousewheel) this.$results.on("mousewheel", function(e) {
                    var top = self.$results.scrollTop();
                    var bottom = self.$results.get(0).scrollHeight - top + e.deltaY;
                    var isAtTop = e.deltaY > 0 && top - e.deltaY <= 0;
                    var isAtBottom = e.deltaY < 0 && bottom <= self.$results.height();
                    if (isAtTop) {
                        self.$results.scrollTop(0);
                        e.preventDefault();
                        e.stopPropagation();
                    } else if (isAtBottom) {
                        self.$results.scrollTop(self.$results.get(0).scrollHeight - self.$results.height());
                        e.preventDefault();
                        e.stopPropagation();
                    }
                });
                this.$results.on("mouseup", ".select2-results__option--selectable", function(evt) {
                    var $this = $1(this);
                    var data = Utils.GetData(this, "data");
                    if ($this.hasClass("select2-results__option--selected")) {
                        if (self.options.get("multiple")) self.trigger("unselect", {
                            originalEvent: evt,
                            data: data
                        });
                        else self.trigger("close", {});
                        return;
                    }
                    self.trigger("select", {
                        originalEvent: evt,
                        data: data
                    });
                });
                this.$results.on("mouseenter", ".select2-results__option--selectable", function(evt) {
                    var data = Utils.GetData(this, "data");
                    self.getHighlightedResults().removeClass("select2-results__option--highlighted").attr("aria-selected", "false");
                    self.trigger("results:focus", {
                        data: data,
                        element: $1(this)
                    });
                });
            };
            Results.prototype.getHighlightedResults = function() {
                var $highlighted = this.$results.find(".select2-results__option--highlighted");
                return $highlighted;
            };
            Results.prototype.destroy = function() {
                this.$results.remove();
            };
            Results.prototype.ensureHighlightVisible = function() {
                var $highlighted = this.getHighlightedResults();
                if ($highlighted.length === 0) return;
                var $options = this.$results.find(".select2-results__option--selectable");
                var currentIndex = $options.index($highlighted);
                var currentOffset = this.$results.offset().top;
                var nextTop = $highlighted.offset().top;
                var nextOffset = this.$results.scrollTop() + (nextTop - currentOffset);
                var offsetDelta = nextTop - currentOffset;
                nextOffset -= $highlighted.outerHeight(false) * 2;
                if (currentIndex <= 2) this.$results.scrollTop(0);
                else if (offsetDelta > this.$results.outerHeight() || offsetDelta < 0) this.$results.scrollTop(nextOffset);
            };
            Results.prototype.template = function(result, container) {
                var template = this.options.get("templateResult");
                var escapeMarkup = this.options.get("escapeMarkup");
                var content = template(result, container);
                if (content == null) container.style.display = "none";
                else if (typeof content === "string") container.innerHTML = escapeMarkup(content);
                else $1(container).append(content);
            };
            return Results;
        });
        S2.define("select2/keys", [], function() {
            var KEYS = {
                BACKSPACE: 8,
                TAB: 9,
                ENTER: 13,
                SHIFT: 16,
                CTRL: 17,
                ALT: 18,
                ESC: 27,
                SPACE: 32,
                PAGE_UP: 33,
                PAGE_DOWN: 34,
                END: 35,
                HOME: 36,
                LEFT: 37,
                UP: 38,
                RIGHT: 39,
                DOWN: 40,
                DELETE: 46
            };
            return KEYS;
        });
        S2.define("select2/selection/base", [
            "jquery",
            "../utils",
            "../keys"
        ], function($1, Utils, KEYS) {
            function BaseSelection($element, options) {
                this.$element = $element;
                this.options = options;
                BaseSelection.__super__.constructor.call(this);
            }
            Utils.Extend(BaseSelection, Utils.Observable);
            BaseSelection.prototype.render = function() {
                var $selection = $1('<span class="select2-selection" role="combobox"  aria-haspopup="true" aria-expanded="false"></span>');
                this._tabindex = 0;
                if (Utils.GetData(this.$element[0], "old-tabindex") != null) this._tabindex = Utils.GetData(this.$element[0], "old-tabindex");
                else if (this.$element.attr("tabindex") != null) this._tabindex = this.$element.attr("tabindex");
                $selection.attr("title", this.$element.attr("title"));
                $selection.attr("tabindex", this._tabindex);
                $selection.attr("aria-disabled", "false");
                this.$selection = $selection;
                return $selection;
            };
            BaseSelection.prototype.bind = function(container, $container) {
                var self = this;
                var resultsId = container.id + "-results";
                this.container = container;
                this.$selection.on("focus", function(evt) {
                    self.trigger("focus", evt);
                });
                this.$selection.on("blur", function(evt) {
                    self._handleBlur(evt);
                });
                this.$selection.on("keydown", function(evt) {
                    self.trigger("keypress", evt);
                    if (evt.which === KEYS.SPACE) evt.preventDefault();
                });
                container.on("results:focus", function(params) {
                    self.$selection.attr("aria-activedescendant", params.data._resultId);
                });
                container.on("selection:update", function(params) {
                    self.update(params.data);
                });
                container.on("open", function() {
                    // When the dropdown is open, aria-expanded="true"
                    self.$selection.attr("aria-expanded", "true");
                    self.$selection.attr("aria-owns", resultsId);
                    self._attachCloseHandler(container);
                });
                container.on("close", function() {
                    // When the dropdown is closed, aria-expanded="false"
                    self.$selection.attr("aria-expanded", "false");
                    self.$selection.removeAttr("aria-activedescendant");
                    self.$selection.removeAttr("aria-owns");
                    self.$selection.trigger("focus");
                    self._detachCloseHandler(container);
                });
                container.on("enable", function() {
                    self.$selection.attr("tabindex", self._tabindex);
                    self.$selection.attr("aria-disabled", "false");
                });
                container.on("disable", function() {
                    self.$selection.attr("tabindex", "-1");
                    self.$selection.attr("aria-disabled", "true");
                });
            };
            BaseSelection.prototype._handleBlur = function(evt) {
                var self = this;
                // This needs to be delayed as the active element is the body when the tab
                // key is pressed, possibly along with others.
                window.setTimeout(function() {
                    // Don't trigger `blur` if the focus is still in the selection
                    if (document.activeElement == self.$selection[0] || $1.contains(self.$selection[0], document.activeElement)) return;
                    self.trigger("blur", evt);
                }, 1);
            };
            BaseSelection.prototype._attachCloseHandler = function(container) {
                $1(document.body).on("mousedown.select2." + container.id, function(e) {
                    var $target = $1(e.target);
                    var $select = $target.closest(".select2");
                    var $all = $1(".select2.select2-container--open");
                    $all.each(function() {
                        if (this == $select[0]) return;
                        var $element = Utils.GetData(this, "element");
                        $element.select2("close");
                    });
                });
            };
            BaseSelection.prototype._detachCloseHandler = function(container) {
                $1(document.body).off("mousedown.select2." + container.id);
            };
            BaseSelection.prototype.position = function($selection, $container) {
                var $selectionContainer = $container.find(".selection");
                $selectionContainer.append($selection);
            };
            BaseSelection.prototype.destroy = function() {
                this._detachCloseHandler(this.container);
            };
            BaseSelection.prototype.update = function(data) {
                throw new Error("The `update` method must be defined in child classes.");
            };
            /**
   * Helper method to abstract the "enabled" (not "disabled") state of this
   * object.
   *
   * @return {true} if the instance is not disabled.
   * @return {false} if the instance is disabled.
   */ BaseSelection.prototype.isEnabled = function() {
                return !this.isDisabled();
            };
            /**
   * Helper method to abstract the "disabled" state of this object.
   *
   * @return {true} if the disabled option is true.
   * @return {false} if the disabled option is false.
   */ BaseSelection.prototype.isDisabled = function() {
                return this.options.get("disabled");
            };
            return BaseSelection;
        });
        S2.define("select2/selection/single", [
            "jquery",
            "./base",
            "../utils",
            "../keys"
        ], function($1, BaseSelection, Utils, KEYS) {
            function SingleSelection() {
                SingleSelection.__super__.constructor.apply(this, arguments);
            }
            Utils.Extend(SingleSelection, BaseSelection);
            SingleSelection.prototype.render = function() {
                var $selection = SingleSelection.__super__.render.call(this);
                $selection[0].classList.add("select2-selection--single");
                $selection.html('<span class="select2-selection__rendered"></span><span class="select2-selection__arrow" role="presentation"><b role="presentation"></b></span>');
                return $selection;
            };
            SingleSelection.prototype.bind = function(container, $container) {
                var self = this;
                SingleSelection.__super__.bind.apply(this, arguments);
                var id = container.id + "-container";
                this.$selection.find(".select2-selection__rendered").attr("id", id).attr("role", "textbox").attr("aria-readonly", "true");
                this.$selection.attr("aria-labelledby", id);
                this.$selection.attr("aria-controls", id);
                this.$selection.on("mousedown", function(evt) {
                    // Only respond to left clicks
                    if (evt.which !== 1) return;
                    self.trigger("toggle", {
                        originalEvent: evt
                    });
                });
                this.$selection.on("focus", function(evt) {
                // User focuses on the container
                });
                this.$selection.on("blur", function(evt) {
                // User exits the container
                });
                container.on("focus", function(evt) {
                    if (!container.isOpen()) self.$selection.trigger("focus");
                });
            };
            SingleSelection.prototype.clear = function() {
                var $rendered = this.$selection.find(".select2-selection__rendered");
                $rendered.empty();
                $rendered.removeAttr("title"); // clear tooltip on empty
            };
            SingleSelection.prototype.display = function(data, container) {
                var template = this.options.get("templateSelection");
                var escapeMarkup = this.options.get("escapeMarkup");
                return escapeMarkup(template(data, container));
            };
            SingleSelection.prototype.selectionContainer = function() {
                return $1("<span></span>");
            };
            SingleSelection.prototype.update = function(data) {
                if (data.length === 0) {
                    this.clear();
                    return;
                }
                var selection = data[0];
                var $rendered = this.$selection.find(".select2-selection__rendered");
                var formatted = this.display(selection, $rendered);
                $rendered.empty().append(formatted);
                var title = selection.title || selection.text;
                if (title) $rendered.attr("title", title);
                else $rendered.removeAttr("title");
            };
            return SingleSelection;
        });
        S2.define("select2/selection/multiple", [
            "jquery",
            "./base",
            "../utils"
        ], function($1, BaseSelection, Utils) {
            function MultipleSelection($element, options) {
                MultipleSelection.__super__.constructor.apply(this, arguments);
            }
            Utils.Extend(MultipleSelection, BaseSelection);
            MultipleSelection.prototype.render = function() {
                var $selection = MultipleSelection.__super__.render.call(this);
                $selection[0].classList.add("select2-selection--multiple");
                $selection.html('<ul class="select2-selection__rendered"></ul>');
                return $selection;
            };
            MultipleSelection.prototype.bind = function(container, $container) {
                var self = this;
                MultipleSelection.__super__.bind.apply(this, arguments);
                var id = container.id + "-container";
                this.$selection.find(".select2-selection__rendered").attr("id", id);
                this.$selection.on("click", function(evt) {
                    self.trigger("toggle", {
                        originalEvent: evt
                    });
                });
                this.$selection.on("click", ".select2-selection__choice__remove", function(evt) {
                    // Ignore the event if it is disabled
                    if (self.isDisabled()) return;
                    var $remove = $1(this);
                    var $selection = $remove.parent();
                    var data = Utils.GetData($selection[0], "data");
                    self.trigger("unselect", {
                        originalEvent: evt,
                        data: data
                    });
                });
                this.$selection.on("keydown", ".select2-selection__choice__remove", function(evt) {
                    // Ignore the event if it is disabled
                    if (self.isDisabled()) return;
                    evt.stopPropagation();
                });
            };
            MultipleSelection.prototype.clear = function() {
                var $rendered = this.$selection.find(".select2-selection__rendered");
                $rendered.empty();
                $rendered.removeAttr("title");
            };
            MultipleSelection.prototype.display = function(data, container) {
                var template = this.options.get("templateSelection");
                var escapeMarkup = this.options.get("escapeMarkup");
                return escapeMarkup(template(data, container));
            };
            MultipleSelection.prototype.selectionContainer = function() {
                var $container = $1('<li class="select2-selection__choice"><button type="button" class="select2-selection__choice__remove" tabindex="-1"><span aria-hidden="true">&times;</span></button><span class="select2-selection__choice__display"></span></li>');
                return $container;
            };
            MultipleSelection.prototype.update = function(data) {
                this.clear();
                if (data.length === 0) return;
                var $selections = [];
                var selectionIdPrefix = this.$selection.find(".select2-selection__rendered").attr("id") + "-choice-";
                for(var d = 0; d < data.length; d++){
                    var selection = data[d];
                    var $selection = this.selectionContainer();
                    var formatted = this.display(selection, $selection);
                    var selectionId = selectionIdPrefix + Utils.generateChars(4) + "-";
                    if (selection.id) selectionId += selection.id;
                    else selectionId += Utils.generateChars(4);
                    $selection.find(".select2-selection__choice__display").append(formatted).attr("id", selectionId);
                    var title = selection.title || selection.text;
                    if (title) $selection.attr("title", title);
                    var removeItem = this.options.get("translations").get("removeItem");
                    var $remove = $selection.find(".select2-selection__choice__remove");
                    $remove.attr("title", removeItem());
                    $remove.attr("aria-label", removeItem());
                    $remove.attr("aria-describedby", selectionId);
                    Utils.StoreData($selection[0], "data", selection);
                    $selections.push($selection);
                }
                var $rendered = this.$selection.find(".select2-selection__rendered");
                $rendered.append($selections);
            };
            return MultipleSelection;
        });
        S2.define("select2/selection/placeholder", [], function() {
            function Placeholder(decorated, $element, options) {
                this.placeholder = this.normalizePlaceholder(options.get("placeholder"));
                decorated.call(this, $element, options);
            }
            Placeholder.prototype.normalizePlaceholder = function(_, placeholder) {
                if (typeof placeholder === "string") placeholder = {
                    id: "",
                    text: placeholder
                };
                return placeholder;
            };
            Placeholder.prototype.createPlaceholder = function(decorated, placeholder) {
                var $placeholder = this.selectionContainer();
                $placeholder.html(this.display(placeholder));
                $placeholder[0].classList.add("select2-selection__placeholder");
                $placeholder[0].classList.remove("select2-selection__choice");
                var placeholderTitle = placeholder.title || placeholder.text || $placeholder.text();
                this.$selection.find(".select2-selection__rendered").attr("title", placeholderTitle);
                return $placeholder;
            };
            Placeholder.prototype.update = function(decorated, data) {
                var singlePlaceholder = data.length == 1 && data[0].id != this.placeholder.id;
                var multipleSelections = data.length > 1;
                if (multipleSelections || singlePlaceholder) return decorated.call(this, data);
                this.clear();
                var $placeholder = this.createPlaceholder(this.placeholder);
                this.$selection.find(".select2-selection__rendered").append($placeholder);
            };
            return Placeholder;
        });
        S2.define("select2/selection/allowClear", [
            "jquery",
            "../keys",
            "../utils"
        ], function($1, KEYS, Utils) {
            function AllowClear() {}
            AllowClear.prototype.bind = function(decorated, container, $container) {
                var self = this;
                decorated.call(this, container, $container);
                if (this.placeholder == null) {
                    if (this.options.get("debug") && window.console && console.error) console.error("Select2: The `allowClear` option should be used in combination with the `placeholder` option.");
                }
                this.$selection.on("mousedown", ".select2-selection__clear", function(evt) {
                    self._handleClear(evt);
                });
                container.on("keypress", function(evt) {
                    self._handleKeyboardClear(evt, container);
                });
            };
            AllowClear.prototype._handleClear = function(_, evt) {
                // Ignore the event if it is disabled
                if (this.isDisabled()) return;
                var $clear = this.$selection.find(".select2-selection__clear");
                // Ignore the event if nothing has been selected
                if ($clear.length === 0) return;
                evt.stopPropagation();
                var data = Utils.GetData($clear[0], "data");
                var previousVal = this.$element.val();
                this.$element.val(this.placeholder.id);
                var unselectData = {
                    data: data
                };
                this.trigger("clear", unselectData);
                if (unselectData.prevented) {
                    this.$element.val(previousVal);
                    return;
                }
                for(var d = 0; d < data.length; d++){
                    unselectData = {
                        data: data[d]
                    };
                    // Trigger the `unselect` event, so people can prevent it from being
                    // cleared.
                    this.trigger("unselect", unselectData);
                    // If the event was prevented, don't clear it out.
                    if (unselectData.prevented) {
                        this.$element.val(previousVal);
                        return;
                    }
                }
                this.$element.trigger("input").trigger("change");
                this.trigger("toggle", {});
            };
            AllowClear.prototype._handleKeyboardClear = function(_, evt, container) {
                if (container.isOpen()) return;
                if (evt.which == KEYS.DELETE || evt.which == KEYS.BACKSPACE) this._handleClear(evt);
            };
            AllowClear.prototype.update = function(decorated, data) {
                decorated.call(this, data);
                this.$selection.find(".select2-selection__clear").remove();
                this.$selection[0].classList.remove("select2-selection--clearable");
                if (this.$selection.find(".select2-selection__placeholder").length > 0 || data.length === 0) return;
                var selectionId = this.$selection.find(".select2-selection__rendered").attr("id");
                var removeAll = this.options.get("translations").get("removeAllItems");
                var $remove = $1('<button type="button" class="select2-selection__clear" tabindex="-1"><span aria-hidden="true">&times;</span></button>');
                $remove.attr("title", removeAll());
                $remove.attr("aria-label", removeAll());
                $remove.attr("aria-describedby", selectionId);
                Utils.StoreData($remove[0], "data", data);
                this.$selection.prepend($remove);
                this.$selection[0].classList.add("select2-selection--clearable");
            };
            return AllowClear;
        });
        S2.define("select2/selection/search", [
            "jquery",
            "../utils",
            "../keys"
        ], function($1, Utils, KEYS) {
            function Search(decorated, $element, options) {
                decorated.call(this, $element, options);
            }
            Search.prototype.render = function(decorated) {
                var searchLabel = this.options.get("translations").get("search");
                var $search = $1('<span class="select2-search select2-search--inline"><textarea class="select2-search__field" type="search" tabindex="-1" autocorrect="off" autocapitalize="none" spellcheck="false" role="searchbox" aria-autocomplete="list" ></textarea></span>');
                this.$searchContainer = $search;
                this.$search = $search.find("textarea");
                this.$search.prop("autocomplete", this.options.get("autocomplete"));
                this.$search.attr("aria-label", searchLabel());
                var $rendered = decorated.call(this);
                this._transferTabIndex();
                $rendered.append(this.$searchContainer);
                return $rendered;
            };
            Search.prototype.bind = function(decorated, container, $container) {
                var self = this;
                var resultsId = container.id + "-results";
                var selectionId = container.id + "-container";
                decorated.call(this, container, $container);
                self.$search.attr("aria-describedby", selectionId);
                container.on("open", function() {
                    self.$search.attr("aria-controls", resultsId);
                    self.$search.trigger("focus");
                });
                container.on("close", function() {
                    self.$search.val("");
                    self.resizeSearch();
                    self.$search.removeAttr("aria-controls");
                    self.$search.removeAttr("aria-activedescendant");
                    self.$search.trigger("focus");
                });
                container.on("enable", function() {
                    self.$search.prop("disabled", false);
                    self._transferTabIndex();
                });
                container.on("disable", function() {
                    self.$search.prop("disabled", true);
                });
                container.on("focus", function(evt) {
                    self.$search.trigger("focus");
                });
                container.on("results:focus", function(params) {
                    if (params.data._resultId) self.$search.attr("aria-activedescendant", params.data._resultId);
                    else self.$search.removeAttr("aria-activedescendant");
                });
                this.$selection.on("focusin", ".select2-search--inline", function(evt) {
                    self.trigger("focus", evt);
                });
                this.$selection.on("focusout", ".select2-search--inline", function(evt) {
                    self._handleBlur(evt);
                });
                this.$selection.on("keydown", ".select2-search--inline", function(evt) {
                    evt.stopPropagation();
                    self.trigger("keypress", evt);
                    self._keyUpPrevented = evt.isDefaultPrevented();
                    var key = evt.which;
                    if (key === KEYS.BACKSPACE && self.$search.val() === "") {
                        var $previousChoice = self.$selection.find(".select2-selection__choice").last();
                        if ($previousChoice.length > 0) {
                            var item = Utils.GetData($previousChoice[0], "data");
                            self.searchRemoveChoice(item);
                            evt.preventDefault();
                        }
                    }
                });
                this.$selection.on("click", ".select2-search--inline", function(evt) {
                    if (self.$search.val()) evt.stopPropagation();
                });
                // Try to detect the IE version should the `documentMode` property that
                // is stored on the document. This is only implemented in IE and is
                // slightly cleaner than doing a user agent check.
                // This property is not available in Edge, but Edge also doesn't have
                // this bug.
                var msie = document.documentMode;
                var disableInputEvents = msie && msie <= 11;
                // Workaround for browsers which do not support the `input` event
                // This will prevent double-triggering of events for browsers which support
                // both the `keyup` and `input` events.
                this.$selection.on("input.searchcheck", ".select2-search--inline", function(evt) {
                    // IE will trigger the `input` event when a placeholder is used on a
                    // search box. To get around this issue, we are forced to ignore all
                    // `input` events in IE and keep using `keyup`.
                    if (disableInputEvents) {
                        self.$selection.off("input.search input.searchcheck");
                        return;
                    }
                    // Unbind the duplicated `keyup` event
                    self.$selection.off("keyup.search");
                });
                this.$selection.on("keyup.search input.search", ".select2-search--inline", function(evt) {
                    // IE will trigger the `input` event when a placeholder is used on a
                    // search box. To get around this issue, we are forced to ignore all
                    // `input` events in IE and keep using `keyup`.
                    if (disableInputEvents && evt.type === "input") {
                        self.$selection.off("input.search input.searchcheck");
                        return;
                    }
                    var key = evt.which;
                    // We can freely ignore events from modifier keys
                    if (key == KEYS.SHIFT || key == KEYS.CTRL || key == KEYS.ALT) return;
                    // Tabbing will be handled during the `keydown` phase
                    if (key == KEYS.TAB) return;
                    self.handleSearch(evt);
                });
            };
            /**
   * This method will transfer the tabindex attribute from the rendered
   * selection to the search box. This allows for the search box to be used as
   * the primary focus instead of the selection container.
   *
   * @private
   */ Search.prototype._transferTabIndex = function(decorated) {
                this.$search.attr("tabindex", this.$selection.attr("tabindex"));
                this.$selection.attr("tabindex", "-1");
            };
            Search.prototype.createPlaceholder = function(decorated, placeholder) {
                this.$search.attr("placeholder", placeholder.text);
            };
            Search.prototype.update = function(decorated, data) {
                var searchHadFocus = this.$search[0] == document.activeElement;
                this.$search.attr("placeholder", "");
                decorated.call(this, data);
                this.resizeSearch();
                if (searchHadFocus) this.$search.trigger("focus");
            };
            Search.prototype.handleSearch = function() {
                this.resizeSearch();
                if (!this._keyUpPrevented) {
                    var input = this.$search.val();
                    this.trigger("query", {
                        term: input
                    });
                }
                this._keyUpPrevented = false;
            };
            Search.prototype.searchRemoveChoice = function(decorated, item) {
                this.trigger("unselect", {
                    data: item
                });
                this.$search.val(item.text);
                this.handleSearch();
            };
            Search.prototype.resizeSearch = function() {
                this.$search.css("width", "25px");
                var width = "100%";
                if (this.$search.attr("placeholder") === "") {
                    var minimumWidth = this.$search.val().length + 1;
                    width = minimumWidth * 0.75 + "em";
                }
                this.$search.css("width", width);
            };
            return Search;
        });
        S2.define("select2/selection/selectionCss", [
            "../utils"
        ], function(Utils) {
            function SelectionCSS() {}
            SelectionCSS.prototype.render = function(decorated) {
                var $selection = decorated.call(this);
                var selectionCssClass = this.options.get("selectionCssClass") || "";
                if (selectionCssClass.indexOf(":all:") !== -1) {
                    selectionCssClass = selectionCssClass.replace(":all:", "");
                    Utils.copyNonInternalCssClasses($selection[0], this.$element[0]);
                }
                $selection.addClass(selectionCssClass);
                return $selection;
            };
            return SelectionCSS;
        });
        S2.define("select2/selection/eventRelay", [
            "jquery"
        ], function($1) {
            function EventRelay() {}
            EventRelay.prototype.bind = function(decorated, container, $container) {
                var self = this;
                var relayEvents = [
                    "open",
                    "opening",
                    "close",
                    "closing",
                    "select",
                    "selecting",
                    "unselect",
                    "unselecting",
                    "clear",
                    "clearing"
                ];
                var preventableEvents = [
                    "opening",
                    "closing",
                    "selecting",
                    "unselecting",
                    "clearing"
                ];
                decorated.call(this, container, $container);
                container.on("*", function(name, params) {
                    // Ignore events that should not be relayed
                    if (relayEvents.indexOf(name) === -1) return;
                    // The parameters should always be an object
                    params = params || {};
                    // Generate the jQuery event for the Select2 event
                    var evt = $1.Event("select2:" + name, {
                        params: params
                    });
                    self.$element.trigger(evt);
                    // Only handle preventable events if it was one
                    if (preventableEvents.indexOf(name) === -1) return;
                    params.prevented = evt.isDefaultPrevented();
                });
            };
            return EventRelay;
        });
        S2.define("select2/translation", [
            "jquery",
            "require"
        ], function($1, require1) {
            function Translation(dict) {
                this.dict = dict || {};
            }
            Translation.prototype.all = function() {
                return this.dict;
            };
            Translation.prototype.get = function(key) {
                return this.dict[key];
            };
            Translation.prototype.extend = function(translation) {
                this.dict = $1.extend({}, translation.all(), this.dict);
            };
            // Static functions
            Translation._cache = {};
            Translation.loadPath = function(path) {
                if (!(path in Translation._cache)) {
                    var translations = require1(path);
                    Translation._cache[path] = translations;
                }
                return new Translation(Translation._cache[path]);
            };
            return Translation;
        });
        S2.define("select2/diacritics", [], function() {
            var diacritics = {
                "Ⓐ": "A",
                "Ａ": "A",
                "\xc0": "A",
                "\xc1": "A",
                "\xc2": "A",
                "Ầ": "A",
                "Ấ": "A",
                "Ẫ": "A",
                "Ẩ": "A",
                "\xc3": "A",
                "Ā": "A",
                "Ă": "A",
                "Ằ": "A",
                "Ắ": "A",
                "Ẵ": "A",
                "Ẳ": "A",
                "Ȧ": "A",
                "Ǡ": "A",
                "\xc4": "A",
                "Ǟ": "A",
                "Ả": "A",
                "\xc5": "A",
                "Ǻ": "A",
                "Ǎ": "A",
                "Ȁ": "A",
                "Ȃ": "A",
                "Ạ": "A",
                "Ậ": "A",
                "Ặ": "A",
                "Ḁ": "A",
                "Ą": "A",
                "Ⱥ": "A",
                "Ɐ": "A",
                "Ꜳ": "AA",
                "\xc6": "AE",
                "Ǽ": "AE",
                "Ǣ": "AE",
                "Ꜵ": "AO",
                "Ꜷ": "AU",
                "Ꜹ": "AV",
                "Ꜻ": "AV",
                "Ꜽ": "AY",
                "Ⓑ": "B",
                "Ｂ": "B",
                "Ḃ": "B",
                "Ḅ": "B",
                "Ḇ": "B",
                "Ƀ": "B",
                "Ƃ": "B",
                "Ɓ": "B",
                "Ⓒ": "C",
                "Ｃ": "C",
                "Ć": "C",
                "Ĉ": "C",
                "Ċ": "C",
                "Č": "C",
                "\xc7": "C",
                "Ḉ": "C",
                "Ƈ": "C",
                "Ȼ": "C",
                "Ꜿ": "C",
                "Ⓓ": "D",
                "Ｄ": "D",
                "Ḋ": "D",
                "Ď": "D",
                "Ḍ": "D",
                "Ḑ": "D",
                "Ḓ": "D",
                "Ḏ": "D",
                "Đ": "D",
                "Ƌ": "D",
                "Ɗ": "D",
                "Ɖ": "D",
                "Ꝺ": "D",
                "Ǳ": "DZ",
                "Ǆ": "DZ",
                "ǲ": "Dz",
                "ǅ": "Dz",
                "Ⓔ": "E",
                "Ｅ": "E",
                "\xc8": "E",
                "\xc9": "E",
                "\xca": "E",
                "Ề": "E",
                "Ế": "E",
                "Ễ": "E",
                "Ể": "E",
                "Ẽ": "E",
                "Ē": "E",
                "Ḕ": "E",
                "Ḗ": "E",
                "Ĕ": "E",
                "Ė": "E",
                "\xcb": "E",
                "Ẻ": "E",
                "Ě": "E",
                "Ȅ": "E",
                "Ȇ": "E",
                "Ẹ": "E",
                "Ệ": "E",
                "Ȩ": "E",
                "Ḝ": "E",
                "Ę": "E",
                "Ḙ": "E",
                "Ḛ": "E",
                "Ɛ": "E",
                "Ǝ": "E",
                "Ⓕ": "F",
                "Ｆ": "F",
                "Ḟ": "F",
                "Ƒ": "F",
                "Ꝼ": "F",
                "Ⓖ": "G",
                "Ｇ": "G",
                "Ǵ": "G",
                "Ĝ": "G",
                "Ḡ": "G",
                "Ğ": "G",
                "Ġ": "G",
                "Ǧ": "G",
                "Ģ": "G",
                "Ǥ": "G",
                "Ɠ": "G",
                "Ꞡ": "G",
                "Ᵹ": "G",
                "Ꝿ": "G",
                "Ⓗ": "H",
                "Ｈ": "H",
                "Ĥ": "H",
                "Ḣ": "H",
                "Ḧ": "H",
                "Ȟ": "H",
                "Ḥ": "H",
                "Ḩ": "H",
                "Ḫ": "H",
                "Ħ": "H",
                "Ⱨ": "H",
                "Ⱶ": "H",
                "Ɥ": "H",
                "Ⓘ": "I",
                "Ｉ": "I",
                "\xcc": "I",
                "\xcd": "I",
                "\xce": "I",
                "Ĩ": "I",
                "Ī": "I",
                "Ĭ": "I",
                "İ": "I",
                "\xcf": "I",
                "Ḯ": "I",
                "Ỉ": "I",
                "Ǐ": "I",
                "Ȉ": "I",
                "Ȋ": "I",
                "Ị": "I",
                "Į": "I",
                "Ḭ": "I",
                "Ɨ": "I",
                "Ⓙ": "J",
                "Ｊ": "J",
                "Ĵ": "J",
                "Ɉ": "J",
                "Ⓚ": "K",
                "Ｋ": "K",
                "Ḱ": "K",
                "Ǩ": "K",
                "Ḳ": "K",
                "Ķ": "K",
                "Ḵ": "K",
                "Ƙ": "K",
                "Ⱪ": "K",
                "Ꝁ": "K",
                "Ꝃ": "K",
                "Ꝅ": "K",
                "Ꞣ": "K",
                "Ⓛ": "L",
                "Ｌ": "L",
                "Ŀ": "L",
                "Ĺ": "L",
                "Ľ": "L",
                "Ḷ": "L",
                "Ḹ": "L",
                "Ļ": "L",
                "Ḽ": "L",
                "Ḻ": "L",
                "Ł": "L",
                "Ƚ": "L",
                "Ɫ": "L",
                "Ⱡ": "L",
                "Ꝉ": "L",
                "Ꝇ": "L",
                "Ꞁ": "L",
                "Ǉ": "LJ",
                "ǈ": "Lj",
                "Ⓜ": "M",
                "Ｍ": "M",
                "Ḿ": "M",
                "Ṁ": "M",
                "Ṃ": "M",
                "Ɱ": "M",
                "Ɯ": "M",
                "Ⓝ": "N",
                "Ｎ": "N",
                "Ǹ": "N",
                "Ń": "N",
                "\xd1": "N",
                "Ṅ": "N",
                "Ň": "N",
                "Ṇ": "N",
                "Ņ": "N",
                "Ṋ": "N",
                "Ṉ": "N",
                "Ƞ": "N",
                "Ɲ": "N",
                "Ꞑ": "N",
                "Ꞥ": "N",
                "Ǌ": "NJ",
                "ǋ": "Nj",
                "Ⓞ": "O",
                "Ｏ": "O",
                "\xd2": "O",
                "\xd3": "O",
                "\xd4": "O",
                "Ồ": "O",
                "Ố": "O",
                "Ỗ": "O",
                "Ổ": "O",
                "\xd5": "O",
                "Ṍ": "O",
                "Ȭ": "O",
                "Ṏ": "O",
                "Ō": "O",
                "Ṑ": "O",
                "Ṓ": "O",
                "Ŏ": "O",
                "Ȯ": "O",
                "Ȱ": "O",
                "\xd6": "O",
                "Ȫ": "O",
                "Ỏ": "O",
                "Ő": "O",
                "Ǒ": "O",
                "Ȍ": "O",
                "Ȏ": "O",
                "Ơ": "O",
                "Ờ": "O",
                "Ớ": "O",
                "Ỡ": "O",
                "Ở": "O",
                "Ợ": "O",
                "Ọ": "O",
                "Ộ": "O",
                "Ǫ": "O",
                "Ǭ": "O",
                "\xd8": "O",
                "Ǿ": "O",
                "Ɔ": "O",
                "Ɵ": "O",
                "Ꝋ": "O",
                "Ꝍ": "O",
                "Œ": "OE",
                "Ƣ": "OI",
                "Ꝏ": "OO",
                "Ȣ": "OU",
                "Ⓟ": "P",
                "Ｐ": "P",
                "Ṕ": "P",
                "Ṗ": "P",
                "Ƥ": "P",
                "Ᵽ": "P",
                "Ꝑ": "P",
                "Ꝓ": "P",
                "Ꝕ": "P",
                "Ⓠ": "Q",
                "Ｑ": "Q",
                "Ꝗ": "Q",
                "Ꝙ": "Q",
                "Ɋ": "Q",
                "Ⓡ": "R",
                "Ｒ": "R",
                "Ŕ": "R",
                "Ṙ": "R",
                "Ř": "R",
                "Ȑ": "R",
                "Ȓ": "R",
                "Ṛ": "R",
                "Ṝ": "R",
                "Ŗ": "R",
                "Ṟ": "R",
                "Ɍ": "R",
                "Ɽ": "R",
                "Ꝛ": "R",
                "Ꞧ": "R",
                "Ꞃ": "R",
                "Ⓢ": "S",
                "Ｓ": "S",
                "ẞ": "S",
                "Ś": "S",
                "Ṥ": "S",
                "Ŝ": "S",
                "Ṡ": "S",
                "Š": "S",
                "Ṧ": "S",
                "Ṣ": "S",
                "Ṩ": "S",
                "Ș": "S",
                "Ş": "S",
                "Ȿ": "S",
                "Ꞩ": "S",
                "Ꞅ": "S",
                "Ⓣ": "T",
                "Ｔ": "T",
                "Ṫ": "T",
                "Ť": "T",
                "Ṭ": "T",
                "Ț": "T",
                "Ţ": "T",
                "Ṱ": "T",
                "Ṯ": "T",
                "Ŧ": "T",
                "Ƭ": "T",
                "Ʈ": "T",
                "Ⱦ": "T",
                "Ꞇ": "T",
                "Ꜩ": "TZ",
                "Ⓤ": "U",
                "Ｕ": "U",
                "\xd9": "U",
                "\xda": "U",
                "\xdb": "U",
                "Ũ": "U",
                "Ṹ": "U",
                "Ū": "U",
                "Ṻ": "U",
                "Ŭ": "U",
                "\xdc": "U",
                "Ǜ": "U",
                "Ǘ": "U",
                "Ǖ": "U",
                "Ǚ": "U",
                "Ủ": "U",
                "Ů": "U",
                "Ű": "U",
                "Ǔ": "U",
                "Ȕ": "U",
                "Ȗ": "U",
                "Ư": "U",
                "Ừ": "U",
                "Ứ": "U",
                "Ữ": "U",
                "Ử": "U",
                "Ự": "U",
                "Ụ": "U",
                "Ṳ": "U",
                "Ų": "U",
                "Ṷ": "U",
                "Ṵ": "U",
                "Ʉ": "U",
                "Ⓥ": "V",
                "Ｖ": "V",
                "Ṽ": "V",
                "Ṿ": "V",
                "Ʋ": "V",
                "Ꝟ": "V",
                "Ʌ": "V",
                "Ꝡ": "VY",
                "Ⓦ": "W",
                "Ｗ": "W",
                "Ẁ": "W",
                "Ẃ": "W",
                "Ŵ": "W",
                "Ẇ": "W",
                "Ẅ": "W",
                "Ẉ": "W",
                "Ⱳ": "W",
                "Ⓧ": "X",
                "Ｘ": "X",
                "Ẋ": "X",
                "Ẍ": "X",
                "Ⓨ": "Y",
                "Ｙ": "Y",
                "Ỳ": "Y",
                "\xdd": "Y",
                "Ŷ": "Y",
                "Ỹ": "Y",
                "Ȳ": "Y",
                "Ẏ": "Y",
                "Ÿ": "Y",
                "Ỷ": "Y",
                "Ỵ": "Y",
                "Ƴ": "Y",
                "Ɏ": "Y",
                "Ỿ": "Y",
                "Ⓩ": "Z",
                "Ｚ": "Z",
                "Ź": "Z",
                "Ẑ": "Z",
                "Ż": "Z",
                "Ž": "Z",
                "Ẓ": "Z",
                "Ẕ": "Z",
                "Ƶ": "Z",
                "Ȥ": "Z",
                "Ɀ": "Z",
                "Ⱬ": "Z",
                "Ꝣ": "Z",
                "ⓐ": "a",
                "ａ": "a",
                "ẚ": "a",
                "\xe0": "a",
                "\xe1": "a",
                "\xe2": "a",
                "ầ": "a",
                "ấ": "a",
                "ẫ": "a",
                "ẩ": "a",
                "\xe3": "a",
                "ā": "a",
                "ă": "a",
                "ằ": "a",
                "ắ": "a",
                "ẵ": "a",
                "ẳ": "a",
                "ȧ": "a",
                "ǡ": "a",
                "\xe4": "a",
                "ǟ": "a",
                "ả": "a",
                "\xe5": "a",
                "ǻ": "a",
                "ǎ": "a",
                "ȁ": "a",
                "ȃ": "a",
                "ạ": "a",
                "ậ": "a",
                "ặ": "a",
                "ḁ": "a",
                "ą": "a",
                "ⱥ": "a",
                "ɐ": "a",
                "ꜳ": "aa",
                "\xe6": "ae",
                "ǽ": "ae",
                "ǣ": "ae",
                "ꜵ": "ao",
                "ꜷ": "au",
                "ꜹ": "av",
                "ꜻ": "av",
                "ꜽ": "ay",
                "ⓑ": "b",
                "ｂ": "b",
                "ḃ": "b",
                "ḅ": "b",
                "ḇ": "b",
                "ƀ": "b",
                "ƃ": "b",
                "ɓ": "b",
                "ⓒ": "c",
                "ｃ": "c",
                "ć": "c",
                "ĉ": "c",
                "ċ": "c",
                "č": "c",
                "\xe7": "c",
                "ḉ": "c",
                "ƈ": "c",
                "ȼ": "c",
                "ꜿ": "c",
                "ↄ": "c",
                "ⓓ": "d",
                "ｄ": "d",
                "ḋ": "d",
                "ď": "d",
                "ḍ": "d",
                "ḑ": "d",
                "ḓ": "d",
                "ḏ": "d",
                "đ": "d",
                "ƌ": "d",
                "ɖ": "d",
                "ɗ": "d",
                "ꝺ": "d",
                "ǳ": "dz",
                "ǆ": "dz",
                "ⓔ": "e",
                "ｅ": "e",
                "\xe8": "e",
                "\xe9": "e",
                "\xea": "e",
                "ề": "e",
                "ế": "e",
                "ễ": "e",
                "ể": "e",
                "ẽ": "e",
                "ē": "e",
                "ḕ": "e",
                "ḗ": "e",
                "ĕ": "e",
                "ė": "e",
                "\xeb": "e",
                "ẻ": "e",
                "ě": "e",
                "ȅ": "e",
                "ȇ": "e",
                "ẹ": "e",
                "ệ": "e",
                "ȩ": "e",
                "ḝ": "e",
                "ę": "e",
                "ḙ": "e",
                "ḛ": "e",
                "ɇ": "e",
                "ɛ": "e",
                "ǝ": "e",
                "ⓕ": "f",
                "ｆ": "f",
                "ḟ": "f",
                "ƒ": "f",
                "ꝼ": "f",
                "ⓖ": "g",
                "ｇ": "g",
                "ǵ": "g",
                "ĝ": "g",
                "ḡ": "g",
                "ğ": "g",
                "ġ": "g",
                "ǧ": "g",
                "ģ": "g",
                "ǥ": "g",
                "ɠ": "g",
                "ꞡ": "g",
                "ᵹ": "g",
                "ꝿ": "g",
                "ⓗ": "h",
                "ｈ": "h",
                "ĥ": "h",
                "ḣ": "h",
                "ḧ": "h",
                "ȟ": "h",
                "ḥ": "h",
                "ḩ": "h",
                "ḫ": "h",
                "ẖ": "h",
                "ħ": "h",
                "ⱨ": "h",
                "ⱶ": "h",
                "ɥ": "h",
                "ƕ": "hv",
                "ⓘ": "i",
                "ｉ": "i",
                "\xec": "i",
                "\xed": "i",
                "\xee": "i",
                "ĩ": "i",
                "ī": "i",
                "ĭ": "i",
                "\xef": "i",
                "ḯ": "i",
                "ỉ": "i",
                "ǐ": "i",
                "ȉ": "i",
                "ȋ": "i",
                "ị": "i",
                "į": "i",
                "ḭ": "i",
                "ɨ": "i",
                "ı": "i",
                "ⓙ": "j",
                "ｊ": "j",
                "ĵ": "j",
                "ǰ": "j",
                "ɉ": "j",
                "ⓚ": "k",
                "ｋ": "k",
                "ḱ": "k",
                "ǩ": "k",
                "ḳ": "k",
                "ķ": "k",
                "ḵ": "k",
                "ƙ": "k",
                "ⱪ": "k",
                "ꝁ": "k",
                "ꝃ": "k",
                "ꝅ": "k",
                "ꞣ": "k",
                "ⓛ": "l",
                "ｌ": "l",
                "ŀ": "l",
                "ĺ": "l",
                "ľ": "l",
                "ḷ": "l",
                "ḹ": "l",
                "ļ": "l",
                "ḽ": "l",
                "ḻ": "l",
                "ſ": "l",
                "ł": "l",
                "ƚ": "l",
                "ɫ": "l",
                "ⱡ": "l",
                "ꝉ": "l",
                "ꞁ": "l",
                "ꝇ": "l",
                "ǉ": "lj",
                "ⓜ": "m",
                "ｍ": "m",
                "ḿ": "m",
                "ṁ": "m",
                "ṃ": "m",
                "ɱ": "m",
                "ɯ": "m",
                "ⓝ": "n",
                "ｎ": "n",
                "ǹ": "n",
                "ń": "n",
                "\xf1": "n",
                "ṅ": "n",
                "ň": "n",
                "ṇ": "n",
                "ņ": "n",
                "ṋ": "n",
                "ṉ": "n",
                "ƞ": "n",
                "ɲ": "n",
                "ŉ": "n",
                "ꞑ": "n",
                "ꞥ": "n",
                "ǌ": "nj",
                "ⓞ": "o",
                "ｏ": "o",
                "\xf2": "o",
                "\xf3": "o",
                "\xf4": "o",
                "ồ": "o",
                "ố": "o",
                "ỗ": "o",
                "ổ": "o",
                "\xf5": "o",
                "ṍ": "o",
                "ȭ": "o",
                "ṏ": "o",
                "ō": "o",
                "ṑ": "o",
                "ṓ": "o",
                "ŏ": "o",
                "ȯ": "o",
                "ȱ": "o",
                "\xf6": "o",
                "ȫ": "o",
                "ỏ": "o",
                "ő": "o",
                "ǒ": "o",
                "ȍ": "o",
                "ȏ": "o",
                "ơ": "o",
                "ờ": "o",
                "ớ": "o",
                "ỡ": "o",
                "ở": "o",
                "ợ": "o",
                "ọ": "o",
                "ộ": "o",
                "ǫ": "o",
                "ǭ": "o",
                "\xf8": "o",
                "ǿ": "o",
                "ɔ": "o",
                "ꝋ": "o",
                "ꝍ": "o",
                "ɵ": "o",
                "œ": "oe",
                "ƣ": "oi",
                "ȣ": "ou",
                "ꝏ": "oo",
                "ⓟ": "p",
                "ｐ": "p",
                "ṕ": "p",
                "ṗ": "p",
                "ƥ": "p",
                "ᵽ": "p",
                "ꝑ": "p",
                "ꝓ": "p",
                "ꝕ": "p",
                "ⓠ": "q",
                "ｑ": "q",
                "ɋ": "q",
                "ꝗ": "q",
                "ꝙ": "q",
                "ⓡ": "r",
                "ｒ": "r",
                "ŕ": "r",
                "ṙ": "r",
                "ř": "r",
                "ȑ": "r",
                "ȓ": "r",
                "ṛ": "r",
                "ṝ": "r",
                "ŗ": "r",
                "ṟ": "r",
                "ɍ": "r",
                "ɽ": "r",
                "ꝛ": "r",
                "ꞧ": "r",
                "ꞃ": "r",
                "ⓢ": "s",
                "ｓ": "s",
                "\xdf": "s",
                "ś": "s",
                "ṥ": "s",
                "ŝ": "s",
                "ṡ": "s",
                "š": "s",
                "ṧ": "s",
                "ṣ": "s",
                "ṩ": "s",
                "ș": "s",
                "ş": "s",
                "ȿ": "s",
                "ꞩ": "s",
                "ꞅ": "s",
                "ẛ": "s",
                "ⓣ": "t",
                "ｔ": "t",
                "ṫ": "t",
                "ẗ": "t",
                "ť": "t",
                "ṭ": "t",
                "ț": "t",
                "ţ": "t",
                "ṱ": "t",
                "ṯ": "t",
                "ŧ": "t",
                "ƭ": "t",
                "ʈ": "t",
                "ⱦ": "t",
                "ꞇ": "t",
                "ꜩ": "tz",
                "ⓤ": "u",
                "ｕ": "u",
                "\xf9": "u",
                "\xfa": "u",
                "\xfb": "u",
                "ũ": "u",
                "ṹ": "u",
                "ū": "u",
                "ṻ": "u",
                "ŭ": "u",
                "\xfc": "u",
                "ǜ": "u",
                "ǘ": "u",
                "ǖ": "u",
                "ǚ": "u",
                "ủ": "u",
                "ů": "u",
                "ű": "u",
                "ǔ": "u",
                "ȕ": "u",
                "ȗ": "u",
                "ư": "u",
                "ừ": "u",
                "ứ": "u",
                "ữ": "u",
                "ử": "u",
                "ự": "u",
                "ụ": "u",
                "ṳ": "u",
                "ų": "u",
                "ṷ": "u",
                "ṵ": "u",
                "ʉ": "u",
                "ⓥ": "v",
                "ｖ": "v",
                "ṽ": "v",
                "ṿ": "v",
                "ʋ": "v",
                "ꝟ": "v",
                "ʌ": "v",
                "ꝡ": "vy",
                "ⓦ": "w",
                "ｗ": "w",
                "ẁ": "w",
                "ẃ": "w",
                "ŵ": "w",
                "ẇ": "w",
                "ẅ": "w",
                "ẘ": "w",
                "ẉ": "w",
                "ⱳ": "w",
                "ⓧ": "x",
                "ｘ": "x",
                "ẋ": "x",
                "ẍ": "x",
                "ⓨ": "y",
                "ｙ": "y",
                "ỳ": "y",
                "\xfd": "y",
                "ŷ": "y",
                "ỹ": "y",
                "ȳ": "y",
                "ẏ": "y",
                "\xff": "y",
                "ỷ": "y",
                "ẙ": "y",
                "ỵ": "y",
                "ƴ": "y",
                "ɏ": "y",
                "ỿ": "y",
                "ⓩ": "z",
                "ｚ": "z",
                "ź": "z",
                "ẑ": "z",
                "ż": "z",
                "ž": "z",
                "ẓ": "z",
                "ẕ": "z",
                "ƶ": "z",
                "ȥ": "z",
                "ɀ": "z",
                "ⱬ": "z",
                "ꝣ": "z",
                "Ά": "Α",
                "Έ": "Ε",
                "Ή": "Η",
                "Ί": "Ι",
                "Ϊ": "Ι",
                "Ό": "Ο",
                "Ύ": "Υ",
                "Ϋ": "Υ",
                "Ώ": "Ω",
                "ά": "α",
                "έ": "ε",
                "ή": "η",
                "ί": "ι",
                "ϊ": "ι",
                "ΐ": "ι",
                "ό": "ο",
                "ύ": "υ",
                "ϋ": "υ",
                "ΰ": "υ",
                "ώ": "ω",
                "ς": "σ",
                "’": "'"
            };
            return diacritics;
        });
        S2.define("select2/data/base", [
            "../utils"
        ], function(Utils) {
            function BaseAdapter($element, options) {
                BaseAdapter.__super__.constructor.call(this);
            }
            Utils.Extend(BaseAdapter, Utils.Observable);
            BaseAdapter.prototype.current = function(callback) {
                throw new Error("The `current` method must be defined in child classes.");
            };
            BaseAdapter.prototype.query = function(params, callback) {
                throw new Error("The `query` method must be defined in child classes.");
            };
            BaseAdapter.prototype.bind = function(container, $container) {
            // Can be implemented in subclasses
            };
            BaseAdapter.prototype.destroy = function() {
            // Can be implemented in subclasses
            };
            BaseAdapter.prototype.generateResultId = function(container, data) {
                var id = container.id + "-result-";
                id += Utils.generateChars(4);
                if (data.id != null) id += "-" + data.id.toString();
                else id += "-" + Utils.generateChars(4);
                return id;
            };
            return BaseAdapter;
        });
        S2.define("select2/data/select", [
            "./base",
            "../utils",
            "jquery"
        ], function(BaseAdapter, Utils, $1) {
            function SelectAdapter($element, options) {
                this.$element = $element;
                this.options = options;
                SelectAdapter.__super__.constructor.call(this);
            }
            Utils.Extend(SelectAdapter, BaseAdapter);
            SelectAdapter.prototype.current = function(callback) {
                var self = this;
                var data = Array.prototype.map.call(this.$element[0].querySelectorAll(":checked"), function(selectedElement) {
                    return self.item($1(selectedElement));
                });
                callback(data);
            };
            SelectAdapter.prototype.select = function(data) {
                var self = this;
                data.selected = true;
                // If data.element is a DOM node, use it instead
                if (data.element != null && data.element.tagName.toLowerCase() === "option") {
                    data.element.selected = true;
                    this.$element.trigger("input").trigger("change");
                    return;
                }
                if (this.$element.prop("multiple")) this.current(function(currentData) {
                    var val = [];
                    data = [
                        data
                    ];
                    data.push.apply(data, currentData);
                    for(var d = 0; d < data.length; d++){
                        var id = data[d].id;
                        if (val.indexOf(id) === -1) val.push(id);
                    }
                    self.$element.val(val);
                    self.$element.trigger("input").trigger("change");
                });
                else {
                    var val = data.id;
                    this.$element.val(val);
                    this.$element.trigger("input").trigger("change");
                }
            };
            SelectAdapter.prototype.unselect = function(data) {
                var self = this;
                if (!this.$element.prop("multiple")) return;
                data.selected = false;
                if (data.element != null && data.element.tagName.toLowerCase() === "option") {
                    data.element.selected = false;
                    this.$element.trigger("input").trigger("change");
                    return;
                }
                this.current(function(currentData) {
                    var val = [];
                    for(var d = 0; d < currentData.length; d++){
                        var id = currentData[d].id;
                        if (id !== data.id && val.indexOf(id) === -1) val.push(id);
                    }
                    self.$element.val(val);
                    self.$element.trigger("input").trigger("change");
                });
            };
            SelectAdapter.prototype.bind = function(container, $container) {
                var self = this;
                this.container = container;
                container.on("select", function(params) {
                    self.select(params.data);
                });
                container.on("unselect", function(params) {
                    self.unselect(params.data);
                });
            };
            SelectAdapter.prototype.destroy = function() {
                // Remove anything added to child elements
                this.$element.find("*").each(function() {
                    // Remove any custom data set by Select2
                    Utils.RemoveData(this);
                });
            };
            SelectAdapter.prototype.query = function(params, callback) {
                var data = [];
                var self = this;
                var $options = this.$element.children();
                $options.each(function() {
                    if (this.tagName.toLowerCase() !== "option" && this.tagName.toLowerCase() !== "optgroup") return;
                    var $option = $1(this);
                    var option = self.item($option);
                    var matches = self.matches(params, option);
                    if (matches !== null) data.push(matches);
                });
                callback({
                    results: data
                });
            };
            SelectAdapter.prototype.addOptions = function($options) {
                this.$element.append($options);
            };
            SelectAdapter.prototype.option = function(data) {
                var option;
                if (data.children) {
                    option = document.createElement("optgroup");
                    option.label = data.text;
                } else {
                    option = document.createElement("option");
                    if (option.textContent !== undefined) option.textContent = data.text;
                    else option.innerText = data.text;
                }
                if (data.id !== undefined) option.value = data.id;
                if (data.disabled) option.disabled = true;
                if (data.selected) option.selected = true;
                if (data.title) option.title = data.title;
                var normalizedData = this._normalizeItem(data);
                normalizedData.element = option;
                // Override the option's data with the combined data
                Utils.StoreData(option, "data", normalizedData);
                return $1(option);
            };
            SelectAdapter.prototype.item = function($option) {
                var data = {};
                data = Utils.GetData($option[0], "data");
                if (data != null) return data;
                var option = $option[0];
                if (option.tagName.toLowerCase() === "option") data = {
                    id: $option.val(),
                    text: $option.text(),
                    disabled: $option.prop("disabled"),
                    selected: $option.prop("selected"),
                    title: $option.prop("title")
                };
                else if (option.tagName.toLowerCase() === "optgroup") {
                    data = {
                        text: $option.prop("label"),
                        children: [],
                        title: $option.prop("title")
                    };
                    var $children = $option.children("option");
                    var children = [];
                    for(var c = 0; c < $children.length; c++){
                        var $child = $1($children[c]);
                        var child = this.item($child);
                        children.push(child);
                    }
                    data.children = children;
                }
                data = this._normalizeItem(data);
                data.element = $option[0];
                Utils.StoreData($option[0], "data", data);
                return data;
            };
            SelectAdapter.prototype._normalizeItem = function(item) {
                if (item !== Object(item)) item = {
                    id: item,
                    text: item
                };
                item = $1.extend({}, {
                    text: ""
                }, item);
                var defaults = {
                    selected: false,
                    disabled: false
                };
                if (item.id != null) item.id = item.id.toString();
                if (item.text != null) item.text = item.text.toString();
                if (item._resultId == null && item.id && this.container != null) item._resultId = this.generateResultId(this.container, item);
                return $1.extend({}, defaults, item);
            };
            SelectAdapter.prototype.matches = function(params, data) {
                var matcher = this.options.get("matcher");
                return matcher(params, data);
            };
            return SelectAdapter;
        });
        S2.define("select2/data/array", [
            "./select",
            "../utils",
            "jquery"
        ], function(SelectAdapter, Utils, $1) {
            function ArrayAdapter($element, options) {
                this._dataToConvert = options.get("data") || [];
                ArrayAdapter.__super__.constructor.call(this, $element, options);
            }
            Utils.Extend(ArrayAdapter, SelectAdapter);
            ArrayAdapter.prototype.bind = function(container, $container) {
                ArrayAdapter.__super__.bind.call(this, container, $container);
                this.addOptions(this.convertToOptions(this._dataToConvert));
            };
            ArrayAdapter.prototype.select = function(data) {
                var $option = this.$element.find("option").filter(function(i, elm) {
                    return elm.value == data.id.toString();
                });
                if ($option.length === 0) {
                    $option = this.option(data);
                    this.addOptions($option);
                }
                ArrayAdapter.__super__.select.call(this, data);
            };
            ArrayAdapter.prototype.convertToOptions = function(data) {
                var self = this;
                var $existing = this.$element.find("option");
                var existingIds = $existing.map(function() {
                    return self.item($1(this)).id;
                }).get();
                var $options = [];
                // Filter out all items except for the one passed in the argument
                function onlyItem(item) {
                    return function() {
                        return $1(this).val() == item.id;
                    };
                }
                for(var d = 0; d < data.length; d++){
                    var item = this._normalizeItem(data[d]);
                    // Skip items which were pre-loaded, only merge the data
                    if (existingIds.indexOf(item.id) >= 0) {
                        var $existingOption = $existing.filter(onlyItem(item));
                        var existingData = this.item($existingOption);
                        var newData = $1.extend(true, {}, item, existingData);
                        var $newOption = this.option(newData);
                        $existingOption.replaceWith($newOption);
                        continue;
                    }
                    var $option = this.option(item);
                    if (item.children) {
                        var $children = this.convertToOptions(item.children);
                        $option.append($children);
                    }
                    $options.push($option);
                }
                return $options;
            };
            return ArrayAdapter;
        });
        S2.define("select2/data/ajax", [
            "./array",
            "../utils",
            "jquery"
        ], function(ArrayAdapter, Utils, $1) {
            function AjaxAdapter($element, options) {
                this.ajaxOptions = this._applyDefaults(options.get("ajax"));
                if (this.ajaxOptions.processResults != null) this.processResults = this.ajaxOptions.processResults;
                AjaxAdapter.__super__.constructor.call(this, $element, options);
            }
            Utils.Extend(AjaxAdapter, ArrayAdapter);
            AjaxAdapter.prototype._applyDefaults = function(options) {
                var defaults = {
                    data: function(params) {
                        return $1.extend({}, params, {
                            q: params.term
                        });
                    },
                    transport: function(params, success, failure) {
                        var $request = $1.ajax(params);
                        $request.then(success);
                        $request.fail(failure);
                        return $request;
                    }
                };
                return $1.extend({}, defaults, options, true);
            };
            AjaxAdapter.prototype.processResults = function(results) {
                return results;
            };
            AjaxAdapter.prototype.query = function(params, callback) {
                var matches = [];
                var self = this;
                if (this._request != null) {
                    // JSONP requests cannot always be aborted
                    if (typeof this._request.abort === "function") this._request.abort();
                    this._request = null;
                }
                var options = $1.extend({
                    type: "GET"
                }, this.ajaxOptions);
                if (typeof options.url === "function") options.url = options.url.call(this.$element, params);
                if (typeof options.data === "function") options.data = options.data.call(this.$element, params);
                function request() {
                    var $request = options.transport(options, function(data) {
                        var results = self.processResults(data, params);
                        if (self.options.get("debug") && window.console && console.error) // Check to make sure that the response included a `results` key.
                        {
                            if (!results || !results.results || !Array.isArray(results.results)) console.error("Select2: The AJAX results did not return an array in the `results` key of the response.");
                        }
                        callback(results);
                    }, function() {
                        // Attempt to detect if a request was aborted
                        // Only works if the transport exposes a status property
                        if ("status" in $request && ($request.status === 0 || $request.status === "0")) return;
                        self.trigger("results:message", {
                            message: "errorLoading"
                        });
                    });
                    self._request = $request;
                }
                if (this.ajaxOptions.delay && params.term != null) {
                    if (this._queryTimeout) window.clearTimeout(this._queryTimeout);
                    this._queryTimeout = window.setTimeout(request, this.ajaxOptions.delay);
                } else request();
            };
            return AjaxAdapter;
        });
        S2.define("select2/data/tags", [
            "jquery"
        ], function($1) {
            function Tags(decorated, $element, options) {
                var tags = options.get("tags");
                var createTag = options.get("createTag");
                if (createTag !== undefined) this.createTag = createTag;
                var insertTag = options.get("insertTag");
                if (insertTag !== undefined) this.insertTag = insertTag;
                decorated.call(this, $element, options);
                if (Array.isArray(tags)) for(var t = 0; t < tags.length; t++){
                    var tag = tags[t];
                    var item = this._normalizeItem(tag);
                    var $option = this.option(item);
                    this.$element.append($option);
                }
            }
            Tags.prototype.query = function(decorated, params, callback) {
                var self = this;
                this._removeOldTags();
                if (params.term == null || params.page != null) {
                    decorated.call(this, params, callback);
                    return;
                }
                function wrapper(obj, child) {
                    var data = obj.results;
                    for(var i = 0; i < data.length; i++){
                        var option = data[i];
                        var checkChildren = option.children != null && !wrapper({
                            results: option.children
                        }, true);
                        var optionText = (option.text || "").toUpperCase();
                        var paramsTerm = (params.term || "").toUpperCase();
                        var checkText = optionText === paramsTerm;
                        if (checkText || checkChildren) {
                            if (child) return false;
                            obj.data = data;
                            callback(obj);
                            return;
                        }
                    }
                    if (child) return true;
                    var tag = self.createTag(params);
                    if (tag != null) {
                        var $option = self.option(tag);
                        $option.attr("data-select2-tag", "true");
                        self.addOptions([
                            $option
                        ]);
                        self.insertTag(data, tag);
                    }
                    obj.results = data;
                    callback(obj);
                }
                decorated.call(this, params, wrapper);
            };
            Tags.prototype.createTag = function(decorated, params) {
                if (params.term == null) return null;
                var term = params.term.trim();
                if (term === "") return null;
                return {
                    id: term,
                    text: term
                };
            };
            Tags.prototype.insertTag = function(_, data, tag) {
                data.unshift(tag);
            };
            Tags.prototype._removeOldTags = function(_) {
                var $options = this.$element.find("option[data-select2-tag]");
                $options.each(function() {
                    if (this.selected) return;
                    $1(this).remove();
                });
            };
            return Tags;
        });
        S2.define("select2/data/tokenizer", [
            "jquery"
        ], function($1) {
            function Tokenizer(decorated, $element, options) {
                var tokenizer = options.get("tokenizer");
                if (tokenizer !== undefined) this.tokenizer = tokenizer;
                decorated.call(this, $element, options);
            }
            Tokenizer.prototype.bind = function(decorated, container, $container) {
                decorated.call(this, container, $container);
                this.$search = container.dropdown.$search || container.selection.$search || $container.find(".select2-search__field");
            };
            Tokenizer.prototype.query = function(decorated, params, callback) {
                var self = this;
                function createAndSelect(data) {
                    // Normalize the data object so we can use it for checks
                    var item = self._normalizeItem(data);
                    // Check if the data object already exists as a tag
                    // Select it if it doesn't
                    var $existingOptions = self.$element.find("option").filter(function() {
                        return $1(this).val() === item.id;
                    });
                    // If an existing option wasn't found for it, create the option
                    if (!$existingOptions.length) {
                        var $option = self.option(item);
                        $option.attr("data-select2-tag", true);
                        self._removeOldTags();
                        self.addOptions([
                            $option
                        ]);
                    }
                    // Select the item, now that we know there is an option for it
                    select(item);
                }
                function select(data) {
                    self.trigger("select", {
                        data: data
                    });
                }
                params.term = params.term || "";
                var tokenData = this.tokenizer(params, this.options, createAndSelect);
                if (tokenData.term !== params.term) {
                    // Replace the search term if we have the search box
                    if (this.$search.length) {
                        this.$search.val(tokenData.term);
                        this.$search.trigger("focus");
                    }
                    params.term = tokenData.term;
                }
                decorated.call(this, params, callback);
            };
            Tokenizer.prototype.tokenizer = function(_, params, options, callback) {
                var separators = options.get("tokenSeparators") || [];
                var term = params.term;
                var i = 0;
                var createTag = this.createTag || function(params) {
                    return {
                        id: params.term,
                        text: params.term
                    };
                };
                while(i < term.length){
                    var termChar = term[i];
                    if (separators.indexOf(termChar) === -1) {
                        i++;
                        continue;
                    }
                    var part = term.substr(0, i);
                    var partParams = $1.extend({}, params, {
                        term: part
                    });
                    var data = createTag(partParams);
                    if (data == null) {
                        i++;
                        continue;
                    }
                    callback(data);
                    // Reset the term to not include the tokenized portion
                    term = term.substr(i + 1) || "";
                    i = 0;
                }
                return {
                    term: term
                };
            };
            return Tokenizer;
        });
        S2.define("select2/data/minimumInputLength", [], function() {
            function MinimumInputLength(decorated, $e, options) {
                this.minimumInputLength = options.get("minimumInputLength");
                decorated.call(this, $e, options);
            }
            MinimumInputLength.prototype.query = function(decorated, params, callback) {
                params.term = params.term || "";
                if (params.term.length < this.minimumInputLength) {
                    this.trigger("results:message", {
                        message: "inputTooShort",
                        args: {
                            minimum: this.minimumInputLength,
                            input: params.term,
                            params: params
                        }
                    });
                    return;
                }
                decorated.call(this, params, callback);
            };
            return MinimumInputLength;
        });
        S2.define("select2/data/maximumInputLength", [], function() {
            function MaximumInputLength(decorated, $e, options) {
                this.maximumInputLength = options.get("maximumInputLength");
                decorated.call(this, $e, options);
            }
            MaximumInputLength.prototype.query = function(decorated, params, callback) {
                params.term = params.term || "";
                if (this.maximumInputLength > 0 && params.term.length > this.maximumInputLength) {
                    this.trigger("results:message", {
                        message: "inputTooLong",
                        args: {
                            maximum: this.maximumInputLength,
                            input: params.term,
                            params: params
                        }
                    });
                    return;
                }
                decorated.call(this, params, callback);
            };
            return MaximumInputLength;
        });
        S2.define("select2/data/maximumSelectionLength", [], function() {
            function MaximumSelectionLength(decorated, $e, options) {
                this.maximumSelectionLength = options.get("maximumSelectionLength");
                decorated.call(this, $e, options);
            }
            MaximumSelectionLength.prototype.bind = function(decorated, container, $container) {
                var self = this;
                decorated.call(this, container, $container);
                container.on("select", function() {
                    self._checkIfMaximumSelected();
                });
            };
            MaximumSelectionLength.prototype.query = function(decorated, params, callback) {
                var self = this;
                this._checkIfMaximumSelected(function() {
                    decorated.call(self, params, callback);
                });
            };
            MaximumSelectionLength.prototype._checkIfMaximumSelected = function(_, successCallback) {
                var self = this;
                this.current(function(currentData) {
                    var count = currentData != null ? currentData.length : 0;
                    if (self.maximumSelectionLength > 0 && count >= self.maximumSelectionLength) {
                        self.trigger("results:message", {
                            message: "maximumSelected",
                            args: {
                                maximum: self.maximumSelectionLength
                            }
                        });
                        return;
                    }
                    if (successCallback) successCallback();
                });
            };
            return MaximumSelectionLength;
        });
        S2.define("select2/dropdown", [
            "jquery",
            "./utils"
        ], function($1, Utils) {
            function Dropdown($element, options) {
                this.$element = $element;
                this.options = options;
                Dropdown.__super__.constructor.call(this);
            }
            Utils.Extend(Dropdown, Utils.Observable);
            Dropdown.prototype.render = function() {
                var $dropdown = $1('<span class="select2-dropdown"><span class="select2-results"></span></span>');
                $dropdown.attr("dir", this.options.get("dir"));
                this.$dropdown = $dropdown;
                return $dropdown;
            };
            Dropdown.prototype.bind = function() {
            // Should be implemented in subclasses
            };
            Dropdown.prototype.position = function($dropdown, $container) {
            // Should be implemented in subclasses
            };
            Dropdown.prototype.destroy = function() {
                // Remove the dropdown from the DOM
                this.$dropdown.remove();
            };
            return Dropdown;
        });
        S2.define("select2/dropdown/search", [
            "jquery"
        ], function($1) {
            function Search() {}
            Search.prototype.render = function(decorated) {
                var $rendered = decorated.call(this);
                var searchLabel = this.options.get("translations").get("search");
                var $search = $1('<span class="select2-search select2-search--dropdown"><input class="select2-search__field" type="search" tabindex="-1" autocorrect="off" autocapitalize="none" spellcheck="false" role="searchbox" aria-autocomplete="list" /></span>');
                this.$searchContainer = $search;
                this.$search = $search.find("input");
                this.$search.prop("autocomplete", this.options.get("autocomplete"));
                this.$search.attr("aria-label", searchLabel());
                $rendered.prepend($search);
                return $rendered;
            };
            Search.prototype.bind = function(decorated, container, $container) {
                var self = this;
                var resultsId = container.id + "-results";
                decorated.call(this, container, $container);
                this.$search.on("keydown", function(evt) {
                    self.trigger("keypress", evt);
                    self._keyUpPrevented = evt.isDefaultPrevented();
                });
                // Workaround for browsers which do not support the `input` event
                // This will prevent double-triggering of events for browsers which support
                // both the `keyup` and `input` events.
                this.$search.on("input", function(evt) {
                    // Unbind the duplicated `keyup` event
                    $1(this).off("keyup");
                });
                this.$search.on("keyup input", function(evt) {
                    self.handleSearch(evt);
                });
                container.on("open", function() {
                    self.$search.attr("tabindex", 0);
                    self.$search.attr("aria-controls", resultsId);
                    self.$search.trigger("focus");
                    window.setTimeout(function() {
                        self.$search.trigger("focus");
                    }, 0);
                });
                container.on("close", function() {
                    self.$search.attr("tabindex", -1);
                    self.$search.removeAttr("aria-controls");
                    self.$search.removeAttr("aria-activedescendant");
                    self.$search.val("");
                    self.$search.trigger("blur");
                });
                container.on("focus", function() {
                    if (!container.isOpen()) self.$search.trigger("focus");
                });
                container.on("results:all", function(params) {
                    if (params.query.term == null || params.query.term === "") {
                        var showSearch = self.showSearch(params);
                        if (showSearch) self.$searchContainer[0].classList.remove("select2-search--hide");
                        else self.$searchContainer[0].classList.add("select2-search--hide");
                    }
                });
                container.on("results:focus", function(params) {
                    if (params.data._resultId) self.$search.attr("aria-activedescendant", params.data._resultId);
                    else self.$search.removeAttr("aria-activedescendant");
                });
            };
            Search.prototype.handleSearch = function(evt) {
                if (!this._keyUpPrevented) {
                    var input = this.$search.val();
                    this.trigger("query", {
                        term: input
                    });
                }
                this._keyUpPrevented = false;
            };
            Search.prototype.showSearch = function(_, params) {
                return true;
            };
            return Search;
        });
        S2.define("select2/dropdown/hidePlaceholder", [], function() {
            function HidePlaceholder(decorated, $element, options, dataAdapter) {
                this.placeholder = this.normalizePlaceholder(options.get("placeholder"));
                decorated.call(this, $element, options, dataAdapter);
            }
            HidePlaceholder.prototype.append = function(decorated, data) {
                data.results = this.removePlaceholder(data.results);
                decorated.call(this, data);
            };
            HidePlaceholder.prototype.normalizePlaceholder = function(_, placeholder) {
                if (typeof placeholder === "string") placeholder = {
                    id: "",
                    text: placeholder
                };
                return placeholder;
            };
            HidePlaceholder.prototype.removePlaceholder = function(_, data) {
                var modifiedData = data.slice(0);
                for(var d = data.length - 1; d >= 0; d--){
                    var item = data[d];
                    if (this.placeholder.id === item.id) modifiedData.splice(d, 1);
                }
                return modifiedData;
            };
            return HidePlaceholder;
        });
        S2.define("select2/dropdown/infiniteScroll", [
            "jquery"
        ], function($1) {
            function InfiniteScroll(decorated, $element, options, dataAdapter) {
                this.lastParams = {};
                decorated.call(this, $element, options, dataAdapter);
                this.$loadingMore = this.createLoadingMore();
                this.loading = false;
            }
            InfiniteScroll.prototype.append = function(decorated, data) {
                this.$loadingMore.remove();
                this.loading = false;
                decorated.call(this, data);
                if (this.showLoadingMore(data)) {
                    this.$results.append(this.$loadingMore);
                    this.loadMoreIfNeeded();
                }
            };
            InfiniteScroll.prototype.bind = function(decorated, container, $container) {
                var self = this;
                decorated.call(this, container, $container);
                container.on("query", function(params) {
                    self.lastParams = params;
                    self.loading = true;
                });
                container.on("query:append", function(params) {
                    self.lastParams = params;
                    self.loading = true;
                });
                this.$results.on("scroll", this.loadMoreIfNeeded.bind(this));
            };
            InfiniteScroll.prototype.loadMoreIfNeeded = function() {
                var isLoadMoreVisible = $1.contains(document.documentElement, this.$loadingMore[0]);
                if (this.loading || !isLoadMoreVisible) return;
                var currentOffset = this.$results.offset().top + this.$results.outerHeight(false);
                var loadingMoreOffset = this.$loadingMore.offset().top + this.$loadingMore.outerHeight(false);
                if (currentOffset + 50 >= loadingMoreOffset) this.loadMore();
            };
            InfiniteScroll.prototype.loadMore = function() {
                this.loading = true;
                var params = $1.extend({}, {
                    page: 1
                }, this.lastParams);
                params.page++;
                this.trigger("query:append", params);
            };
            InfiniteScroll.prototype.showLoadingMore = function(_, data) {
                return data.pagination && data.pagination.more;
            };
            InfiniteScroll.prototype.createLoadingMore = function() {
                var $option = $1('<li class="select2-results__option select2-results__option--load-more"role="option" aria-disabled="true"></li>');
                var message = this.options.get("translations").get("loadingMore");
                $option.html(message(this.lastParams));
                return $option;
            };
            return InfiniteScroll;
        });
        S2.define("select2/dropdown/attachBody", [
            "jquery",
            "../utils"
        ], function($1, Utils) {
            function AttachBody(decorated, $element, options) {
                this.$dropdownParent = $1(options.get("dropdownParent") || document.body);
                decorated.call(this, $element, options);
            }
            AttachBody.prototype.bind = function(decorated, container, $container) {
                var self = this;
                decorated.call(this, container, $container);
                container.on("open", function() {
                    self._showDropdown();
                    self._attachPositioningHandler(container);
                    // Must bind after the results handlers to ensure correct sizing
                    self._bindContainerResultHandlers(container);
                });
                container.on("close", function() {
                    self._hideDropdown();
                    self._detachPositioningHandler(container);
                });
                this.$dropdownContainer.on("mousedown", function(evt) {
                    evt.stopPropagation();
                });
            };
            AttachBody.prototype.destroy = function(decorated) {
                decorated.call(this);
                this.$dropdownContainer.remove();
            };
            AttachBody.prototype.position = function(decorated, $dropdown, $container) {
                // Clone all of the container classes
                $dropdown.attr("class", $container.attr("class"));
                $dropdown[0].classList.remove("select2");
                $dropdown[0].classList.add("select2-container--open");
                $dropdown.css({
                    position: "absolute",
                    top: -999999
                });
                this.$container = $container;
            };
            AttachBody.prototype.render = function(decorated) {
                var $container = $1("<span></span>");
                var $dropdown = decorated.call(this);
                $container.append($dropdown);
                this.$dropdownContainer = $container;
                return $container;
            };
            AttachBody.prototype._hideDropdown = function(decorated) {
                this.$dropdownContainer.detach();
            };
            AttachBody.prototype._bindContainerResultHandlers = function(decorated, container) {
                // These should only be bound once
                if (this._containerResultsHandlersBound) return;
                var self = this;
                container.on("results:all", function() {
                    self._positionDropdown();
                    self._resizeDropdown();
                });
                container.on("results:append", function() {
                    self._positionDropdown();
                    self._resizeDropdown();
                });
                container.on("results:message", function() {
                    self._positionDropdown();
                    self._resizeDropdown();
                });
                container.on("select", function() {
                    self._positionDropdown();
                    self._resizeDropdown();
                });
                container.on("unselect", function() {
                    self._positionDropdown();
                    self._resizeDropdown();
                });
                this._containerResultsHandlersBound = true;
            };
            AttachBody.prototype._attachPositioningHandler = function(decorated, container) {
                var self = this;
                var scrollEvent = "scroll.select2." + container.id;
                var resizeEvent = "resize.select2." + container.id;
                var orientationEvent = "orientationchange.select2." + container.id;
                var $watchers = this.$container.parents().filter(Utils.hasScroll);
                $watchers.each(function() {
                    Utils.StoreData(this, "select2-scroll-position", {
                        x: $1(this).scrollLeft(),
                        y: $1(this).scrollTop()
                    });
                });
                $watchers.on(scrollEvent, function(ev) {
                    var position = Utils.GetData(this, "select2-scroll-position");
                    $1(this).scrollTop(position.y);
                });
                $1(window).on(scrollEvent + " " + resizeEvent + " " + orientationEvent, function(e) {
                    self._positionDropdown();
                    self._resizeDropdown();
                });
            };
            AttachBody.prototype._detachPositioningHandler = function(decorated, container) {
                var scrollEvent = "scroll.select2." + container.id;
                var resizeEvent = "resize.select2." + container.id;
                var orientationEvent = "orientationchange.select2." + container.id;
                var $watchers = this.$container.parents().filter(Utils.hasScroll);
                $watchers.off(scrollEvent);
                $1(window).off(scrollEvent + " " + resizeEvent + " " + orientationEvent);
            };
            AttachBody.prototype._positionDropdown = function() {
                var $window = $1(window);
                var isCurrentlyAbove = this.$dropdown[0].classList.contains("select2-dropdown--above");
                var isCurrentlyBelow = this.$dropdown[0].classList.contains("select2-dropdown--below");
                var newDirection = null;
                var offset = this.$container.offset();
                offset.bottom = offset.top + this.$container.outerHeight(false);
                var container = {
                    height: this.$container.outerHeight(false)
                };
                container.top = offset.top;
                container.bottom = offset.top + container.height;
                var dropdown = {
                    height: this.$dropdown.outerHeight(false)
                };
                var viewport = {
                    top: $window.scrollTop(),
                    bottom: $window.scrollTop() + $window.height()
                };
                var enoughRoomAbove = viewport.top < offset.top - dropdown.height;
                var enoughRoomBelow = viewport.bottom > offset.bottom + dropdown.height;
                var css = {
                    left: offset.left,
                    top: container.bottom
                };
                // Determine what the parent element is to use for calculating the offset
                var $offsetParent = this.$dropdownParent;
                // For statically positioned elements, we need to get the element
                // that is determining the offset
                if ($offsetParent.css("position") === "static") $offsetParent = $offsetParent.offsetParent();
                var parentOffset = {
                    top: 0,
                    left: 0
                };
                if ($1.contains(document.body, $offsetParent[0]) || $offsetParent[0].isConnected) parentOffset = $offsetParent.offset();
                css.top -= parentOffset.top;
                css.left -= parentOffset.left;
                if (!isCurrentlyAbove && !isCurrentlyBelow) newDirection = "below";
                if (!enoughRoomBelow && enoughRoomAbove && !isCurrentlyAbove) newDirection = "above";
                else if (!enoughRoomAbove && enoughRoomBelow && isCurrentlyAbove) newDirection = "below";
                if (newDirection == "above" || isCurrentlyAbove && newDirection !== "below") css.top = container.top - parentOffset.top - dropdown.height;
                if (newDirection != null) {
                    this.$dropdown[0].classList.remove("select2-dropdown--below");
                    this.$dropdown[0].classList.remove("select2-dropdown--above");
                    this.$dropdown[0].classList.add("select2-dropdown--" + newDirection);
                    this.$container[0].classList.remove("select2-container--below");
                    this.$container[0].classList.remove("select2-container--above");
                    this.$container[0].classList.add("select2-container--" + newDirection);
                }
                this.$dropdownContainer.css(css);
            };
            AttachBody.prototype._resizeDropdown = function() {
                var css = {
                    width: this.$container.outerWidth(false) + "px"
                };
                if (this.options.get("dropdownAutoWidth")) {
                    css.minWidth = css.width;
                    css.position = "relative";
                    css.width = "auto";
                }
                this.$dropdown.css(css);
            };
            AttachBody.prototype._showDropdown = function(decorated) {
                this.$dropdownContainer.appendTo(this.$dropdownParent);
                this._positionDropdown();
                this._resizeDropdown();
            };
            return AttachBody;
        });
        S2.define("select2/dropdown/minimumResultsForSearch", [], function() {
            function countResults(data) {
                var count = 0;
                for(var d = 0; d < data.length; d++){
                    var item = data[d];
                    if (item.children) count += countResults(item.children);
                    else count++;
                }
                return count;
            }
            function MinimumResultsForSearch(decorated, $element, options, dataAdapter) {
                this.minimumResultsForSearch = options.get("minimumResultsForSearch");
                if (this.minimumResultsForSearch < 0) this.minimumResultsForSearch = Infinity;
                decorated.call(this, $element, options, dataAdapter);
            }
            MinimumResultsForSearch.prototype.showSearch = function(decorated, params) {
                if (countResults(params.data.results) < this.minimumResultsForSearch) return false;
                return decorated.call(this, params);
            };
            return MinimumResultsForSearch;
        });
        S2.define("select2/dropdown/selectOnClose", [
            "../utils"
        ], function(Utils) {
            function SelectOnClose() {}
            SelectOnClose.prototype.bind = function(decorated, container, $container) {
                var self = this;
                decorated.call(this, container, $container);
                container.on("close", function(params) {
                    self._handleSelectOnClose(params);
                });
            };
            SelectOnClose.prototype._handleSelectOnClose = function(_, params) {
                if (params && params.originalSelect2Event != null) {
                    var event = params.originalSelect2Event;
                    // Don't select an item if the close event was triggered from a select or
                    // unselect event
                    if (event._type === "select" || event._type === "unselect") return;
                }
                var $highlightedResults = this.getHighlightedResults();
                // Only select highlighted results
                if ($highlightedResults.length < 1) return;
                var data = Utils.GetData($highlightedResults[0], "data");
                // Don't re-select already selected resulte
                if (data.element != null && data.element.selected || data.element == null && data.selected) return;
                this.trigger("select", {
                    data: data
                });
            };
            return SelectOnClose;
        });
        S2.define("select2/dropdown/closeOnSelect", [], function() {
            function CloseOnSelect() {}
            CloseOnSelect.prototype.bind = function(decorated, container, $container) {
                var self = this;
                decorated.call(this, container, $container);
                container.on("select", function(evt) {
                    self._selectTriggered(evt);
                });
                container.on("unselect", function(evt) {
                    self._selectTriggered(evt);
                });
            };
            CloseOnSelect.prototype._selectTriggered = function(_, evt) {
                var originalEvent = evt.originalEvent;
                // Don't close if the control key is being held
                if (originalEvent && (originalEvent.ctrlKey || originalEvent.metaKey)) return;
                this.trigger("close", {
                    originalEvent: originalEvent,
                    originalSelect2Event: evt
                });
            };
            return CloseOnSelect;
        });
        S2.define("select2/dropdown/dropdownCss", [
            "../utils"
        ], function(Utils) {
            function DropdownCSS() {}
            DropdownCSS.prototype.render = function(decorated) {
                var $dropdown = decorated.call(this);
                var dropdownCssClass = this.options.get("dropdownCssClass") || "";
                if (dropdownCssClass.indexOf(":all:") !== -1) {
                    dropdownCssClass = dropdownCssClass.replace(":all:", "");
                    Utils.copyNonInternalCssClasses($dropdown[0], this.$element[0]);
                }
                $dropdown.addClass(dropdownCssClass);
                return $dropdown;
            };
            return DropdownCSS;
        });
        S2.define("select2/dropdown/tagsSearchHighlight", [
            "../utils"
        ], function(Utils) {
            function TagsSearchHighlight() {}
            TagsSearchHighlight.prototype.highlightFirstItem = function(decorated) {
                var $options = this.$results.find(".select2-results__option--selectable:not(.select2-results__option--selected)");
                if ($options.length > 0) {
                    var $firstOption = $options.first();
                    var data = Utils.GetData($firstOption[0], "data");
                    var firstElement = data.element;
                    if (firstElement && firstElement.getAttribute) {
                        if (firstElement.getAttribute("data-select2-tag") === "true") {
                            $firstOption.trigger("mouseenter");
                            return;
                        }
                    }
                }
                decorated.call(this);
            };
            return TagsSearchHighlight;
        });
        S2.define("select2/i18n/en", [], function() {
            // English
            return {
                errorLoading: function() {
                    return "The results could not be loaded.";
                },
                inputTooLong: function(args) {
                    var overChars = args.input.length - args.maximum;
                    var message = "Please delete " + overChars + " character";
                    if (overChars != 1) message += "s";
                    return message;
                },
                inputTooShort: function(args) {
                    var remainingChars = args.minimum - args.input.length;
                    var message = "Please enter " + remainingChars + " or more characters";
                    return message;
                },
                loadingMore: function() {
                    return "Loading more results…";
                },
                maximumSelected: function(args) {
                    var message = "You can only select " + args.maximum + " item";
                    if (args.maximum != 1) message += "s";
                    return message;
                },
                noResults: function() {
                    return "No results found";
                },
                searching: function() {
                    return "Searching…";
                },
                removeAllItems: function() {
                    return "Remove all items";
                },
                removeItem: function() {
                    return "Remove item";
                },
                search: function() {
                    return "Search";
                }
            };
        });
        S2.define("select2/defaults", [
            "jquery",
            "./results",
            "./selection/single",
            "./selection/multiple",
            "./selection/placeholder",
            "./selection/allowClear",
            "./selection/search",
            "./selection/selectionCss",
            "./selection/eventRelay",
            "./utils",
            "./translation",
            "./diacritics",
            "./data/select",
            "./data/array",
            "./data/ajax",
            "./data/tags",
            "./data/tokenizer",
            "./data/minimumInputLength",
            "./data/maximumInputLength",
            "./data/maximumSelectionLength",
            "./dropdown",
            "./dropdown/search",
            "./dropdown/hidePlaceholder",
            "./dropdown/infiniteScroll",
            "./dropdown/attachBody",
            "./dropdown/minimumResultsForSearch",
            "./dropdown/selectOnClose",
            "./dropdown/closeOnSelect",
            "./dropdown/dropdownCss",
            "./dropdown/tagsSearchHighlight",
            "./i18n/en"
        ], function($1, ResultsList, SingleSelection, MultipleSelection, Placeholder, AllowClear, SelectionSearch, SelectionCSS, EventRelay, Utils, Translation, DIACRITICS, SelectData, ArrayData, AjaxData, Tags, Tokenizer, MinimumInputLength, MaximumInputLength, MaximumSelectionLength, Dropdown, DropdownSearch, HidePlaceholder, InfiniteScroll, AttachBody, MinimumResultsForSearch, SelectOnClose, CloseOnSelect, DropdownCSS, TagsSearchHighlight, EnglishTranslation) {
            function Defaults() {
                this.reset();
            }
            Defaults.prototype.apply = function(options) {
                options = $1.extend(true, {}, this.defaults, options);
                if (options.dataAdapter == null) {
                    if (options.ajax != null) options.dataAdapter = AjaxData;
                    else if (options.data != null) options.dataAdapter = ArrayData;
                    else options.dataAdapter = SelectData;
                    if (options.minimumInputLength > 0) options.dataAdapter = Utils.Decorate(options.dataAdapter, MinimumInputLength);
                    if (options.maximumInputLength > 0) options.dataAdapter = Utils.Decorate(options.dataAdapter, MaximumInputLength);
                    if (options.maximumSelectionLength > 0) options.dataAdapter = Utils.Decorate(options.dataAdapter, MaximumSelectionLength);
                    if (options.tags) options.dataAdapter = Utils.Decorate(options.dataAdapter, Tags);
                    if (options.tokenSeparators != null || options.tokenizer != null) options.dataAdapter = Utils.Decorate(options.dataAdapter, Tokenizer);
                }
                if (options.resultsAdapter == null) {
                    options.resultsAdapter = ResultsList;
                    if (options.ajax != null) options.resultsAdapter = Utils.Decorate(options.resultsAdapter, InfiniteScroll);
                    if (options.placeholder != null) options.resultsAdapter = Utils.Decorate(options.resultsAdapter, HidePlaceholder);
                    if (options.selectOnClose) options.resultsAdapter = Utils.Decorate(options.resultsAdapter, SelectOnClose);
                    if (options.tags) options.resultsAdapter = Utils.Decorate(options.resultsAdapter, TagsSearchHighlight);
                }
                if (options.dropdownAdapter == null) {
                    if (options.multiple) options.dropdownAdapter = Dropdown;
                    else {
                        var SearchableDropdown = Utils.Decorate(Dropdown, DropdownSearch);
                        options.dropdownAdapter = SearchableDropdown;
                    }
                    if (options.minimumResultsForSearch !== 0) options.dropdownAdapter = Utils.Decorate(options.dropdownAdapter, MinimumResultsForSearch);
                    if (options.closeOnSelect) options.dropdownAdapter = Utils.Decorate(options.dropdownAdapter, CloseOnSelect);
                    if (options.dropdownCssClass != null) options.dropdownAdapter = Utils.Decorate(options.dropdownAdapter, DropdownCSS);
                    options.dropdownAdapter = Utils.Decorate(options.dropdownAdapter, AttachBody);
                }
                if (options.selectionAdapter == null) {
                    if (options.multiple) options.selectionAdapter = MultipleSelection;
                    else options.selectionAdapter = SingleSelection;
                    // Add the placeholder mixin if a placeholder was specified
                    if (options.placeholder != null) options.selectionAdapter = Utils.Decorate(options.selectionAdapter, Placeholder);
                    if (options.allowClear) options.selectionAdapter = Utils.Decorate(options.selectionAdapter, AllowClear);
                    if (options.multiple) options.selectionAdapter = Utils.Decorate(options.selectionAdapter, SelectionSearch);
                    if (options.selectionCssClass != null) options.selectionAdapter = Utils.Decorate(options.selectionAdapter, SelectionCSS);
                    options.selectionAdapter = Utils.Decorate(options.selectionAdapter, EventRelay);
                }
                // If the defaults were not previously applied from an element, it is
                // possible for the language option to have not been resolved
                options.language = this._resolveLanguage(options.language);
                // Always fall back to English since it will always be complete
                options.language.push("en");
                var uniqueLanguages = [];
                for(var l = 0; l < options.language.length; l++){
                    var language = options.language[l];
                    if (uniqueLanguages.indexOf(language) === -1) uniqueLanguages.push(language);
                }
                options.language = uniqueLanguages;
                options.translations = this._processTranslations(options.language, options.debug);
                return options;
            };
            Defaults.prototype.reset = function() {
                function stripDiacritics(text) {
                    // Used 'uni range + named function' from http://jsperf.com/diacritics/18
                    function match(a) {
                        return DIACRITICS[a] || a;
                    }
                    return text.replace(/[^\u0000-\u007E]/g, match);
                }
                function matcher(params, data) {
                    // Always return the object if there is nothing to compare
                    if (params.term == null || params.term.trim() === "") return data;
                    // Do a recursive check for options with children
                    if (data.children && data.children.length > 0) {
                        // Clone the data object if there are children
                        // This is required as we modify the object to remove any non-matches
                        var match = $1.extend(true, {}, data);
                        // Check each child of the option
                        for(var c = data.children.length - 1; c >= 0; c--){
                            var child = data.children[c];
                            var matches = matcher(params, child);
                            // If there wasn't a match, remove the object in the array
                            if (matches == null) match.children.splice(c, 1);
                        }
                        // If any children matched, return the new object
                        if (match.children.length > 0) return match;
                        // If there were no matching children, check just the plain object
                        return matcher(params, match);
                    }
                    var original = stripDiacritics(data.text).toUpperCase();
                    var term = stripDiacritics(params.term).toUpperCase();
                    // Check if the text contains the term
                    if (original.indexOf(term) > -1) return data;
                    // If it doesn't contain the term, don't return anything
                    return null;
                }
                this.defaults = {
                    amdLanguageBase: "./i18n/",
                    autocomplete: "off",
                    closeOnSelect: true,
                    debug: false,
                    dropdownAutoWidth: false,
                    escapeMarkup: Utils.escapeMarkup,
                    language: {},
                    matcher: matcher,
                    minimumInputLength: 0,
                    maximumInputLength: 0,
                    maximumSelectionLength: 0,
                    minimumResultsForSearch: 0,
                    selectOnClose: false,
                    scrollAfterSelect: false,
                    sorter: function(data) {
                        return data;
                    },
                    templateResult: function(result) {
                        return result.text;
                    },
                    templateSelection: function(selection) {
                        return selection.text;
                    },
                    theme: "default",
                    width: "resolve"
                };
            };
            Defaults.prototype.applyFromElement = function(options, $element) {
                var optionLanguage = options.language;
                var defaultLanguage = this.defaults.language;
                var elementLanguage = $element.prop("lang");
                var parentLanguage = $element.closest("[lang]").prop("lang");
                var languages = Array.prototype.concat.call(this._resolveLanguage(elementLanguage), this._resolveLanguage(optionLanguage), this._resolveLanguage(defaultLanguage), this._resolveLanguage(parentLanguage));
                options.language = languages;
                return options;
            };
            Defaults.prototype._resolveLanguage = function(language) {
                if (!language) return [];
                if ($1.isEmptyObject(language)) return [];
                if ($1.isPlainObject(language)) return [
                    language
                ];
                var languages;
                if (!Array.isArray(language)) languages = [
                    language
                ];
                else languages = language;
                var resolvedLanguages = [];
                for(var l = 0; l < languages.length; l++){
                    resolvedLanguages.push(languages[l]);
                    if (typeof languages[l] === "string" && languages[l].indexOf("-") > 0) {
                        // Extract the region information if it is included
                        var languageParts = languages[l].split("-");
                        var baseLanguage = languageParts[0];
                        resolvedLanguages.push(baseLanguage);
                    }
                }
                return resolvedLanguages;
            };
            Defaults.prototype._processTranslations = function(languages, debug) {
                var translations = new Translation();
                for(var l = 0; l < languages.length; l++){
                    var languageData = new Translation();
                    var language = languages[l];
                    if (typeof language === "string") try {
                        // Try to load it with the original name
                        languageData = Translation.loadPath(language);
                    } catch (e) {
                        try {
                            // If we couldn't load it, check if it wasn't the full path
                            language = this.defaults.amdLanguageBase + language;
                            languageData = Translation.loadPath(language);
                        } catch (ex) {
                            // The translation could not be loaded at all. Sometimes this is
                            // because of a configuration problem, other times this can be
                            // because of how Select2 helps load all possible translation files
                            if (debug && window.console && console.warn) console.warn('Select2: The language file for "' + language + '" could ' + "not be automatically loaded. A fallback will be used instead.");
                        }
                    }
                    else if ($1.isPlainObject(language)) languageData = new Translation(language);
                    else languageData = language;
                    translations.extend(languageData);
                }
                return translations;
            };
            Defaults.prototype.set = function(key, value) {
                var camelKey = $1.camelCase(key);
                var data = {};
                data[camelKey] = value;
                var convertedData = Utils._convertData(data);
                $1.extend(true, this.defaults, convertedData);
            };
            var defaults = new Defaults();
            return defaults;
        });
        S2.define("select2/options", [
            "jquery",
            "./defaults",
            "./utils"
        ], function($1, Defaults, Utils) {
            function Options(options, $element) {
                this.options = options;
                if ($element != null) this.fromElement($element);
                if ($element != null) this.options = Defaults.applyFromElement(this.options, $element);
                this.options = Defaults.apply(this.options);
            }
            Options.prototype.fromElement = function($e) {
                var excludedData = [
                    "select2"
                ];
                if (this.options.multiple == null) this.options.multiple = $e.prop("multiple");
                if (this.options.disabled == null) this.options.disabled = $e.prop("disabled");
                if (this.options.autocomplete == null && $e.prop("autocomplete")) this.options.autocomplete = $e.prop("autocomplete");
                if (this.options.dir == null) {
                    if ($e.prop("dir")) this.options.dir = $e.prop("dir");
                    else if ($e.closest("[dir]").prop("dir")) this.options.dir = $e.closest("[dir]").prop("dir");
                    else this.options.dir = "ltr";
                }
                $e.prop("disabled", this.options.disabled);
                $e.prop("multiple", this.options.multiple);
                if (Utils.GetData($e[0], "select2Tags")) {
                    if (this.options.debug && window.console && console.warn) console.warn('Select2: The `data-select2-tags` attribute has been changed to use the `data-data` and `data-tags="true"` attributes and will be removed in future versions of Select2.');
                    Utils.StoreData($e[0], "data", Utils.GetData($e[0], "select2Tags"));
                    Utils.StoreData($e[0], "tags", true);
                }
                if (Utils.GetData($e[0], "ajaxUrl")) {
                    if (this.options.debug && window.console && console.warn) console.warn("Select2: The `data-ajax-url` attribute has been changed to `data-ajax--url` and support for the old attribute will be removed in future versions of Select2.");
                    $e.attr("ajax--url", Utils.GetData($e[0], "ajaxUrl"));
                    Utils.StoreData($e[0], "ajax-Url", Utils.GetData($e[0], "ajaxUrl"));
                }
                var dataset = {};
                function upperCaseLetter(_, letter) {
                    return letter.toUpperCase();
                }
                // Pre-load all of the attributes which are prefixed with `data-`
                for(var attr = 0; attr < $e[0].attributes.length; attr++){
                    var attributeName = $e[0].attributes[attr].name;
                    var prefix = "data-";
                    if (attributeName.substr(0, prefix.length) == prefix) {
                        // Get the contents of the attribute after `data-`
                        var dataName = attributeName.substring(prefix.length);
                        // Get the data contents from the consistent source
                        // This is more than likely the jQuery data helper
                        var dataValue = Utils.GetData($e[0], dataName);
                        // camelCase the attribute name to match the spec
                        var camelDataName = dataName.replace(/-([a-z])/g, upperCaseLetter);
                        // Store the data attribute contents into the dataset since
                        dataset[camelDataName] = dataValue;
                    }
                }
                // Prefer the element's `dataset` attribute if it exists
                // jQuery 1.x does not correctly handle data attributes with multiple dashes
                if ($1.fn.jquery && $1.fn.jquery.substr(0, 2) == "1." && $e[0].dataset) dataset = $1.extend(true, {}, $e[0].dataset, dataset);
                // Prefer our internal data cache if it exists
                var data = $1.extend(true, {}, Utils.GetData($e[0]), dataset);
                data = Utils._convertData(data);
                for(var key in data){
                    if (excludedData.indexOf(key) > -1) continue;
                    if ($1.isPlainObject(this.options[key])) $1.extend(this.options[key], data[key]);
                    else this.options[key] = data[key];
                }
                return this;
            };
            Options.prototype.get = function(key) {
                return this.options[key];
            };
            Options.prototype.set = function(key, val) {
                this.options[key] = val;
            };
            return Options;
        });
        S2.define("select2/core", [
            "jquery",
            "./options",
            "./utils",
            "./keys"
        ], function($1, Options, Utils, KEYS) {
            var Select2 = function($element, options) {
                if (Utils.GetData($element[0], "select2") != null) Utils.GetData($element[0], "select2").destroy();
                this.$element = $element;
                this.id = this._generateId($element);
                options = options || {};
                this.options = new Options(options, $element);
                Select2.__super__.constructor.call(this);
                // Set up the tabindex
                var tabindex = $element.attr("tabindex") || 0;
                Utils.StoreData($element[0], "old-tabindex", tabindex);
                $element.attr("tabindex", "-1");
                // Set up containers and adapters
                var DataAdapter = this.options.get("dataAdapter");
                this.dataAdapter = new DataAdapter($element, this.options);
                var $container = this.render();
                this._placeContainer($container);
                var SelectionAdapter = this.options.get("selectionAdapter");
                this.selection = new SelectionAdapter($element, this.options);
                this.$selection = this.selection.render();
                this.selection.position(this.$selection, $container);
                var DropdownAdapter = this.options.get("dropdownAdapter");
                this.dropdown = new DropdownAdapter($element, this.options);
                this.$dropdown = this.dropdown.render();
                this.dropdown.position(this.$dropdown, $container);
                var ResultsAdapter = this.options.get("resultsAdapter");
                this.results = new ResultsAdapter($element, this.options, this.dataAdapter);
                this.$results = this.results.render();
                this.results.position(this.$results, this.$dropdown);
                // Bind events
                var self = this;
                // Bind the container to all of the adapters
                this._bindAdapters();
                // Register any DOM event handlers
                this._registerDomEvents();
                // Register any internal event handlers
                this._registerDataEvents();
                this._registerSelectionEvents();
                this._registerDropdownEvents();
                this._registerResultsEvents();
                this._registerEvents();
                // Set the initial state
                this.dataAdapter.current(function(initialData) {
                    self.trigger("selection:update", {
                        data: initialData
                    });
                });
                // Hide the original select
                $element[0].classList.add("select2-hidden-accessible");
                $element.attr("aria-hidden", "true");
                // Synchronize any monitored attributes
                this._syncAttributes();
                Utils.StoreData($element[0], "select2", this);
                // Ensure backwards compatibility with $element.data('select2').
                $element.data("select2", this);
            };
            Utils.Extend(Select2, Utils.Observable);
            Select2.prototype._generateId = function($element) {
                var id = "";
                if ($element.attr("id") != null) id = $element.attr("id");
                else if ($element.attr("name") != null) id = $element.attr("name") + "-" + Utils.generateChars(2);
                else id = Utils.generateChars(4);
                id = id.replace(/(:|\.|\[|\]|,)/g, "");
                id = "select2-" + id;
                return id;
            };
            Select2.prototype._placeContainer = function($container) {
                $container.insertAfter(this.$element);
                var width = this._resolveWidth(this.$element, this.options.get("width"));
                if (width != null) $container.css("width", width);
            };
            Select2.prototype._resolveWidth = function($element, method) {
                var WIDTH = /^width:(([-+]?([0-9]*\.)?[0-9]+)(px|em|ex|%|in|cm|mm|pt|pc))/i;
                if (method == "resolve") {
                    var styleWidth = this._resolveWidth($element, "style");
                    if (styleWidth != null) return styleWidth;
                    return this._resolveWidth($element, "element");
                }
                if (method == "element") {
                    var elementWidth = $element.outerWidth(false);
                    if (elementWidth <= 0) return "auto";
                    return elementWidth + "px";
                }
                if (method == "style") {
                    var style = $element.attr("style");
                    if (typeof style !== "string") return null;
                    var attrs = style.split(";");
                    for(var i = 0, l = attrs.length; i < l; i = i + 1){
                        var attr = attrs[i].replace(/\s/g, "");
                        var matches = attr.match(WIDTH);
                        if (matches !== null && matches.length >= 1) return matches[1];
                    }
                    return null;
                }
                if (method == "computedstyle") {
                    var computedStyle = window.getComputedStyle($element[0]);
                    return computedStyle.width;
                }
                return method;
            };
            Select2.prototype._bindAdapters = function() {
                this.dataAdapter.bind(this, this.$container);
                this.selection.bind(this, this.$container);
                this.dropdown.bind(this, this.$container);
                this.results.bind(this, this.$container);
            };
            Select2.prototype._registerDomEvents = function() {
                var self = this;
                this.$element.on("change.select2", function() {
                    self.dataAdapter.current(function(data) {
                        self.trigger("selection:update", {
                            data: data
                        });
                    });
                });
                this.$element.on("focus.select2", function(evt) {
                    self.trigger("focus", evt);
                });
                this._syncA = Utils.bind(this._syncAttributes, this);
                this._syncS = Utils.bind(this._syncSubtree, this);
                this._observer = new window.MutationObserver(function(mutations) {
                    self._syncA();
                    self._syncS(mutations);
                });
                this._observer.observe(this.$element[0], {
                    attributes: true,
                    childList: true,
                    subtree: false
                });
            };
            Select2.prototype._registerDataEvents = function() {
                var self = this;
                this.dataAdapter.on("*", function(name, params) {
                    self.trigger(name, params);
                });
            };
            Select2.prototype._registerSelectionEvents = function() {
                var self = this;
                var nonRelayEvents = [
                    "toggle",
                    "focus"
                ];
                this.selection.on("toggle", function() {
                    self.toggleDropdown();
                });
                this.selection.on("focus", function(params) {
                    self.focus(params);
                });
                this.selection.on("*", function(name, params) {
                    if (nonRelayEvents.indexOf(name) !== -1) return;
                    self.trigger(name, params);
                });
            };
            Select2.prototype._registerDropdownEvents = function() {
                var self = this;
                this.dropdown.on("*", function(name, params) {
                    self.trigger(name, params);
                });
            };
            Select2.prototype._registerResultsEvents = function() {
                var self = this;
                this.results.on("*", function(name, params) {
                    self.trigger(name, params);
                });
            };
            Select2.prototype._registerEvents = function() {
                var self = this;
                this.on("open", function() {
                    self.$container[0].classList.add("select2-container--open");
                });
                this.on("close", function() {
                    self.$container[0].classList.remove("select2-container--open");
                });
                this.on("enable", function() {
                    self.$container[0].classList.remove("select2-container--disabled");
                });
                this.on("disable", function() {
                    self.$container[0].classList.add("select2-container--disabled");
                });
                this.on("blur", function() {
                    self.$container[0].classList.remove("select2-container--focus");
                });
                this.on("query", function(params) {
                    if (!self.isOpen()) self.trigger("open", {});
                    this.dataAdapter.query(params, function(data) {
                        self.trigger("results:all", {
                            data: data,
                            query: params
                        });
                    });
                });
                this.on("query:append", function(params) {
                    this.dataAdapter.query(params, function(data) {
                        self.trigger("results:append", {
                            data: data,
                            query: params
                        });
                    });
                });
                this.on("keypress", function(evt) {
                    var key = evt.which;
                    if (self.isOpen()) {
                        if (key === KEYS.ESC || key === KEYS.UP && evt.altKey) {
                            self.close(evt);
                            evt.preventDefault();
                        } else if (key === KEYS.ENTER || key === KEYS.TAB) {
                            self.trigger("results:select", {});
                            evt.preventDefault();
                        } else if (key === KEYS.SPACE && evt.ctrlKey) {
                            self.trigger("results:toggle", {});
                            evt.preventDefault();
                        } else if (key === KEYS.UP) {
                            self.trigger("results:previous", {});
                            evt.preventDefault();
                        } else if (key === KEYS.DOWN) {
                            self.trigger("results:next", {});
                            evt.preventDefault();
                        }
                    } else if (key === KEYS.ENTER || key === KEYS.SPACE || key === KEYS.DOWN && evt.altKey) {
                        self.open();
                        evt.preventDefault();
                    }
                });
            };
            Select2.prototype._syncAttributes = function() {
                this.options.set("disabled", this.$element.prop("disabled"));
                if (this.isDisabled()) {
                    if (this.isOpen()) this.close();
                    this.trigger("disable", {});
                } else this.trigger("enable", {});
            };
            Select2.prototype._isChangeMutation = function(mutations) {
                var self = this;
                if (mutations.addedNodes && mutations.addedNodes.length > 0) for(var n = 0; n < mutations.addedNodes.length; n++){
                    var node = mutations.addedNodes[n];
                    if (node.selected) return true;
                }
                else if (mutations.removedNodes && mutations.removedNodes.length > 0) return true;
                else if (Array.isArray(mutations)) return mutations.some(function(mutation) {
                    return self._isChangeMutation(mutation);
                });
                return false;
            };
            Select2.prototype._syncSubtree = function(mutations) {
                var changed = this._isChangeMutation(mutations);
                var self = this;
                // Only re-pull the data if we think there is a change
                if (changed) this.dataAdapter.current(function(currentData) {
                    self.trigger("selection:update", {
                        data: currentData
                    });
                });
            };
            /**
   * Override the trigger method to automatically trigger pre-events when
   * there are events that can be prevented.
   */ Select2.prototype.trigger = function(name, args) {
                var actualTrigger = Select2.__super__.trigger;
                var preTriggerMap = {
                    "open": "opening",
                    "close": "closing",
                    "select": "selecting",
                    "unselect": "unselecting",
                    "clear": "clearing"
                };
                if (args === undefined) args = {};
                if (name in preTriggerMap) {
                    var preTriggerName = preTriggerMap[name];
                    var preTriggerArgs = {
                        prevented: false,
                        name: name,
                        args: args
                    };
                    actualTrigger.call(this, preTriggerName, preTriggerArgs);
                    if (preTriggerArgs.prevented) {
                        args.prevented = true;
                        return;
                    }
                }
                actualTrigger.call(this, name, args);
            };
            Select2.prototype.toggleDropdown = function() {
                if (this.isDisabled()) return;
                if (this.isOpen()) this.close();
                else this.open();
            };
            Select2.prototype.open = function() {
                if (this.isOpen()) return;
                if (this.isDisabled()) return;
                this.trigger("query", {});
            };
            Select2.prototype.close = function(evt) {
                if (!this.isOpen()) return;
                this.trigger("close", {
                    originalEvent: evt
                });
            };
            /**
   * Helper method to abstract the "enabled" (not "disabled") state of this
   * object.
   *
   * @return {true} if the instance is not disabled.
   * @return {false} if the instance is disabled.
   */ Select2.prototype.isEnabled = function() {
                return !this.isDisabled();
            };
            /**
   * Helper method to abstract the "disabled" state of this object.
   *
   * @return {true} if the disabled option is true.
   * @return {false} if the disabled option is false.
   */ Select2.prototype.isDisabled = function() {
                return this.options.get("disabled");
            };
            Select2.prototype.isOpen = function() {
                return this.$container[0].classList.contains("select2-container--open");
            };
            Select2.prototype.hasFocus = function() {
                return this.$container[0].classList.contains("select2-container--focus");
            };
            Select2.prototype.focus = function(data) {
                // No need to re-trigger focus events if we are already focused
                if (this.hasFocus()) return;
                this.$container[0].classList.add("select2-container--focus");
                this.trigger("focus", {});
            };
            Select2.prototype.enable = function(args) {
                if (this.options.get("debug") && window.console && console.warn) console.warn('Select2: The `select2("enable")` method has been deprecated and will be removed in later Select2 versions. Use $element.prop("disabled") instead.');
                if (args == null || args.length === 0) args = [
                    true
                ];
                var disabled = !args[0];
                this.$element.prop("disabled", disabled);
            };
            Select2.prototype.data = function() {
                if (this.options.get("debug") && arguments.length > 0 && window.console && console.warn) console.warn('Select2: Data can no longer be set using `select2("data")`. You should consider setting the value instead using `$element.val()`.');
                var data = [];
                this.dataAdapter.current(function(currentData) {
                    data = currentData;
                });
                return data;
            };
            Select2.prototype.val = function(args) {
                if (this.options.get("debug") && window.console && console.warn) console.warn('Select2: The `select2("val")` method has been deprecated and will be removed in later Select2 versions. Use $element.val() instead.');
                if (args == null || args.length === 0) return this.$element.val();
                var newVal = args[0];
                if (Array.isArray(newVal)) newVal = newVal.map(function(obj) {
                    return obj.toString();
                });
                this.$element.val(newVal).trigger("input").trigger("change");
            };
            Select2.prototype.destroy = function() {
                Utils.RemoveData(this.$container[0]);
                this.$container.remove();
                this._observer.disconnect();
                this._observer = null;
                this._syncA = null;
                this._syncS = null;
                this.$element.off(".select2");
                this.$element.attr("tabindex", Utils.GetData(this.$element[0], "old-tabindex"));
                this.$element[0].classList.remove("select2-hidden-accessible");
                this.$element.attr("aria-hidden", "false");
                Utils.RemoveData(this.$element[0]);
                this.$element.removeData("select2");
                this.dataAdapter.destroy();
                this.selection.destroy();
                this.dropdown.destroy();
                this.results.destroy();
                this.dataAdapter = null;
                this.selection = null;
                this.dropdown = null;
                this.results = null;
            };
            Select2.prototype.render = function() {
                var $container = $1('<span class="select2 select2-container"><span class="selection"></span><span class="dropdown-wrapper" aria-hidden="true"></span></span>');
                $container.attr("dir", this.options.get("dir"));
                this.$container = $container;
                this.$container[0].classList.add("select2-container--" + this.options.get("theme"));
                Utils.StoreData($container[0], "element", this.$element);
                return $container;
            };
            return Select2;
        });
        S2.define("jquery-mousewheel", [
            "jquery"
        ], function($1) {
            // Used to shim jQuery.mousewheel for non-full builds.
            return $1;
        });
        S2.define("jquery.select2", [
            "jquery",
            "jquery-mousewheel",
            "./select2/core",
            "./select2/defaults",
            "./select2/utils"
        ], function($1, _, Select2, Defaults, Utils) {
            if ($1.fn.select2 == null) {
                // All methods that should return the element
                var thisMethods = [
                    "open",
                    "close",
                    "destroy"
                ];
                $1.fn.select2 = function(options) {
                    options = options || {};
                    if (typeof options === "object") {
                        this.each(function() {
                            var instanceOptions = $1.extend(true, {}, options);
                            var instance = new Select2($1(this), instanceOptions);
                        });
                        return this;
                    } else if (typeof options === "string") {
                        var ret;
                        var args = Array.prototype.slice.call(arguments, 1);
                        this.each(function() {
                            var instance = Utils.GetData(this, "select2");
                            if (instance == null && window.console && console.error) console.error("The select2('" + options + "') method was called on an " + "element that is not using Select2.");
                            ret = instance[options].apply(instance, args);
                        });
                        // Check if we should be returning `this`
                        if (thisMethods.indexOf(options) > -1) return this;
                        return ret;
                    } else throw new Error("Invalid arguments for Select2: " + options);
                };
            }
            if ($1.fn.select2.defaults == null) $1.fn.select2.defaults = Defaults;
            return Select2;
        });
        // Return the AMD loader configuration so it can be used outside of this file
        return {
            define: S2.define,
            require: S2.require
        };
    }();
    // Autoload the jQuery bindings
    // We know that all of the modules exist above this, so we're safe
    var select2 = S2.require("jquery.select2");
    // Hold the AMD module references on the jQuery function that was just loaded
    // This allows Select2 to use the internal loader outside of this file, such
    // as in the language files.
    jQuery1.fn.select2.amd = S2;
    // Return the Select2 instance for anyone who is importing it.
    return select2;
});

},{"a2c25c2384735c22":"9o0Tu"}],"gAJqK":[function(require,module,exports) {
/*!
 * 
 * Super simple wysiwyg editor v0.8.16
 * https://summernote.org
 * 
 * 
 * Copyright 2013- Alan Hong. and other contributors
 * summernote may be freely distributed under the MIT license.
 * 
 * Date: 2020-02-19T09:12Z
 * 
 */ (function webpackUniversalModuleDefinition(root, factory) {
    var a, i;
    module.exports = factory(require("8ea145335c4182e"));
})(window, function(__WEBPACK_EXTERNAL_MODULE__0__) {
    return /******/ function(modules) {
        /******/ // The module cache
        /******/ var installedModules = {};
        /******/ /******/ // The require function
        /******/ function __webpack_require__(moduleId) {
            /******/ /******/ // Check if module is in cache
            /******/ if (installedModules[moduleId]) /******/ return installedModules[moduleId].exports;
            /******/ // Create a new module (and put it into the cache)
            /******/ var module1 = installedModules[moduleId] = {
                /******/ i: moduleId,
                /******/ l: false,
                /******/ exports: {}
            };
            /******/ /******/ // Execute the module function
            /******/ modules[moduleId].call(module1.exports, module1, module1.exports, __webpack_require__);
            /******/ /******/ // Flag the module as loaded
            /******/ module1.l = true;
            /******/ /******/ // Return the exports of the module
            /******/ return module1.exports;
        /******/ }
        /******/ /******/ /******/ // expose the modules object (__webpack_modules__)
        /******/ __webpack_require__.m = modules;
        /******/ /******/ // expose the module cache
        /******/ __webpack_require__.c = installedModules;
        /******/ /******/ // define getter function for harmony exports
        /******/ __webpack_require__.d = function(exports, name, getter) {
            /******/ if (!__webpack_require__.o(exports, name)) /******/ Object.defineProperty(exports, name, {
                enumerable: true,
                get: getter
            });
        /******/ };
        /******/ /******/ // define __esModule on exports
        /******/ __webpack_require__.r = function(exports) {
            /******/ if (typeof Symbol !== "undefined" && Symbol.toStringTag) /******/ Object.defineProperty(exports, Symbol.toStringTag, {
                value: "Module"
            });
            /******/ Object.defineProperty(exports, "__esModule", {
                value: true
            });
        /******/ };
        /******/ /******/ // create a fake namespace object
        /******/ // mode & 1: value is a module id, require it
        /******/ // mode & 2: merge all properties of value into the ns
        /******/ // mode & 4: return value when already ns object
        /******/ // mode & 8|1: behave like require
        /******/ __webpack_require__.t = function(value, mode) {
            /******/ if (mode & 1) value = __webpack_require__(value);
            /******/ if (mode & 8) return value;
            /******/ if (mode & 4 && typeof value === "object" && value && value.__esModule) return value;
            /******/ var ns = Object.create(null);
            /******/ __webpack_require__.r(ns);
            /******/ Object.defineProperty(ns, "default", {
                enumerable: true,
                value: value
            });
            /******/ if (mode & 2 && typeof value != "string") for(var key in value)__webpack_require__.d(ns, key, (function(key) {
                return value[key];
            }).bind(null, key));
            /******/ return ns;
        /******/ };
        /******/ /******/ // getDefaultExport function for compatibility with non-harmony modules
        /******/ __webpack_require__.n = function(module1) {
            /******/ var getter = module1 && module1.__esModule ? /******/ function getDefault() {
                return module1["default"];
            } : /******/ function getModuleExports() {
                return module1;
            };
            /******/ __webpack_require__.d(getter, "a", getter);
            /******/ return getter;
        /******/ };
        /******/ /******/ // Object.prototype.hasOwnProperty.call
        /******/ __webpack_require__.o = function(object, property) {
            return Object.prototype.hasOwnProperty.call(object, property);
        };
        /******/ /******/ // __webpack_public_path__
        /******/ __webpack_require__.p = "";
        /******/ /******/ /******/ // Load entry module and return exports
        /******/ return __webpack_require__(__webpack_require__.s = 51);
    /******/ }({
        /***/ 0: /***/ function(module1, exports) {
            module1.exports = __WEBPACK_EXTERNAL_MODULE__0__;
        /***/ },
        /***/ 1: /***/ function(module1, __webpack_exports__, __webpack_require__) {
            "use strict";
            /* harmony import */ var jquery__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(0);
            /* harmony import */ var jquery__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/ __webpack_require__.n(jquery__WEBPACK_IMPORTED_MODULE_0__);
            function _typeof(obj) {
                if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") _typeof = function _typeof(obj) {
                    return typeof obj;
                };
                else _typeof = function _typeof(obj) {
                    return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
                };
                return _typeof(obj);
            }
            function _classCallCheck(instance, Constructor) {
                if (!(instance instanceof Constructor)) throw new TypeError("Cannot call a class as a function");
            }
            function _defineProperties(target, props) {
                for(var i = 0; i < props.length; i++){
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    descriptor.configurable = true;
                    if ("value" in descriptor) descriptor.writable = true;
                    Object.defineProperty(target, descriptor.key, descriptor);
                }
            }
            function _createClass(Constructor, protoProps, staticProps) {
                if (protoProps) _defineProperties(Constructor.prototype, protoProps);
                if (staticProps) _defineProperties(Constructor, staticProps);
                return Constructor;
            }
            var Renderer = /*#__PURE__*/ function() {
                function Renderer(markup, children, options, callback) {
                    _classCallCheck(this, Renderer);
                    this.markup = markup;
                    this.children = children;
                    this.options = options;
                    this.callback = callback;
                }
                _createClass(Renderer, [
                    {
                        key: "render",
                        value: function render($parent) {
                            var $node = jquery__WEBPACK_IMPORTED_MODULE_0___default()(this.markup);
                            if (this.options && this.options.contents) $node.html(this.options.contents);
                            if (this.options && this.options.className) $node.addClass(this.options.className);
                            if (this.options && this.options.data) jquery__WEBPACK_IMPORTED_MODULE_0___default.a.each(this.options.data, function(k, v) {
                                $node.attr("data-" + k, v);
                            });
                            if (this.options && this.options.click) $node.on("click", this.options.click);
                            if (this.children) {
                                var $container = $node.find(".note-children-container");
                                this.children.forEach(function(child) {
                                    child.render($container.length ? $container : $node);
                                });
                            }
                            if (this.callback) this.callback($node, this.options);
                            if (this.options && this.options.callback) this.options.callback($node);
                            if ($parent) $parent.append($node);
                            return $node;
                        }
                    }
                ]);
                return Renderer;
            }();
            /* harmony default export */ __webpack_exports__["a"] = {
                create: function create(markup, callback) {
                    return function() {
                        var options = _typeof(arguments[1]) === "object" ? arguments[1] : arguments[0];
                        var children = Array.isArray(arguments[0]) ? arguments[0] : [];
                        if (options && options.children) children = options.children;
                        return new Renderer(markup, children, options, callback);
                    };
                }
            };
        /***/ },
        /***/ 2: /***/ function(module1, exports) {
            /* WEBPACK VAR INJECTION */ (function(__webpack_amd_options__) {
                module1.exports = __webpack_amd_options__;
            /* WEBPACK VAR INJECTION */ }).call(this, {});
        /***/ },
        /***/ 3: /***/ function(module1, __webpack_exports__, __webpack_require__) {
            "use strict";
            // EXTERNAL MODULE: external {"root":"jQuery","commonjs2":"jquery","commonjs":"jquery","amd":"jquery"}
            var external_root_jQuery_commonjs2_jquery_commonjs_jquery_amd_jquery_ = __webpack_require__(0);
            var external_root_jQuery_commonjs2_jquery_commonjs_jquery_amd_jquery_default = /*#__PURE__*/ __webpack_require__.n(external_root_jQuery_commonjs2_jquery_commonjs_jquery_amd_jquery_);
            // CONCATENATED MODULE: ./src/js/base/summernote-en-US.js
            external_root_jQuery_commonjs2_jquery_commonjs_jquery_amd_jquery_default.a.summernote = external_root_jQuery_commonjs2_jquery_commonjs_jquery_amd_jquery_default.a.summernote || {
                lang: {}
            };
            external_root_jQuery_commonjs2_jquery_commonjs_jquery_amd_jquery_default.a.extend(external_root_jQuery_commonjs2_jquery_commonjs_jquery_amd_jquery_default.a.summernote.lang, {
                "en-US": {
                    font: {
                        bold: "Bold",
                        italic: "Italic",
                        underline: "Underline",
                        clear: "Remove Font Style",
                        height: "Line Height",
                        name: "Font Family",
                        strikethrough: "Strikethrough",
                        subscript: "Subscript",
                        superscript: "Superscript",
                        size: "Font Size",
                        sizeunit: "Font Size Unit"
                    },
                    image: {
                        image: "Picture",
                        insert: "Insert Image",
                        resizeFull: "Resize full",
                        resizeHalf: "Resize half",
                        resizeQuarter: "Resize quarter",
                        resizeNone: "Original size",
                        floatLeft: "Float Left",
                        floatRight: "Float Right",
                        floatNone: "Remove float",
                        shapeRounded: "Shape: Rounded",
                        shapeCircle: "Shape: Circle",
                        shapeThumbnail: "Shape: Thumbnail",
                        shapeNone: "Shape: None",
                        dragImageHere: "Drag image or text here",
                        dropImage: "Drop image or Text",
                        selectFromFiles: "Select from files",
                        maximumFileSize: "Maximum file size",
                        maximumFileSizeError: "Maximum file size exceeded.",
                        url: "Image URL",
                        remove: "Remove Image",
                        original: "Original"
                    },
                    video: {
                        video: "Video",
                        videoLink: "Video Link",
                        insert: "Insert Video",
                        url: "Video URL",
                        providers: "(YouTube, Vimeo, Vine, Instagram, DailyMotion or Youku)"
                    },
                    link: {
                        link: "Link",
                        insert: "Insert Link",
                        unlink: "Unlink",
                        edit: "Edit",
                        textToDisplay: "Text to display",
                        url: "To what URL should this link go?",
                        openInNewWindow: "Open in new window",
                        useProtocol: "Use default protocol"
                    },
                    table: {
                        table: "Table",
                        addRowAbove: "Add row above",
                        addRowBelow: "Add row below",
                        addColLeft: "Add column left",
                        addColRight: "Add column right",
                        delRow: "Delete row",
                        delCol: "Delete column",
                        delTable: "Delete table"
                    },
                    hr: {
                        insert: "Insert Horizontal Rule"
                    },
                    style: {
                        style: "Style",
                        p: "Normal",
                        blockquote: "Quote",
                        pre: "Code",
                        h1: "Header 1",
                        h2: "Header 2",
                        h3: "Header 3",
                        h4: "Header 4",
                        h5: "Header 5",
                        h6: "Header 6"
                    },
                    lists: {
                        unordered: "Unordered list",
                        ordered: "Ordered list"
                    },
                    options: {
                        help: "Help",
                        fullscreen: "Full Screen",
                        codeview: "Code View"
                    },
                    paragraph: {
                        paragraph: "Paragraph",
                        outdent: "Outdent",
                        indent: "Indent",
                        left: "Align left",
                        center: "Align center",
                        right: "Align right",
                        justify: "Justify full"
                    },
                    color: {
                        recent: "Recent Color",
                        more: "More Color",
                        background: "Background Color",
                        foreground: "Text Color",
                        transparent: "Transparent",
                        setTransparent: "Set transparent",
                        reset: "Reset",
                        resetToDefault: "Reset to default",
                        cpSelect: "Select"
                    },
                    shortcut: {
                        shortcuts: "Keyboard shortcuts",
                        close: "Close",
                        textFormatting: "Text formatting",
                        action: "Action",
                        paragraphFormatting: "Paragraph formatting",
                        documentStyle: "Document Style",
                        extraKeys: "Extra keys"
                    },
                    help: {
                        "insertParagraph": "Insert Paragraph",
                        "undo": "Undoes the last command",
                        "redo": "Redoes the last command",
                        "tab": "Tab",
                        "untab": "Untab",
                        "bold": "Set a bold style",
                        "italic": "Set a italic style",
                        "underline": "Set a underline style",
                        "strikethrough": "Set a strikethrough style",
                        "removeFormat": "Clean a style",
                        "justifyLeft": "Set left align",
                        "justifyCenter": "Set center align",
                        "justifyRight": "Set right align",
                        "justifyFull": "Set full align",
                        "insertUnorderedList": "Toggle unordered list",
                        "insertOrderedList": "Toggle ordered list",
                        "outdent": "Outdent on current paragraph",
                        "indent": "Indent on current paragraph",
                        "formatPara": "Change current block's format as a paragraph(P tag)",
                        "formatH1": "Change current block's format as H1",
                        "formatH2": "Change current block's format as H2",
                        "formatH3": "Change current block's format as H3",
                        "formatH4": "Change current block's format as H4",
                        "formatH5": "Change current block's format as H5",
                        "formatH6": "Change current block's format as H6",
                        "insertHorizontalRule": "Insert horizontal rule",
                        "linkDialog.show": "Show Link Dialog"
                    },
                    history: {
                        undo: "Undo",
                        redo: "Redo"
                    },
                    specialChar: {
                        specialChar: "SPECIAL CHARACTERS",
                        select: "Select Special characters"
                    },
                    output: {
                        noSelection: "No Selection Made!"
                    }
                }
            });
            // CONCATENATED MODULE: ./src/js/base/core/env.js
            var isSupportAmd = typeof define === "function" && __webpack_require__(2); // eslint-disable-line
            /**
 * returns whether font is installed or not.
 *
 * @param {String} fontName
 * @return {Boolean}
 */ var genericFontFamilies = [
                "sans-serif",
                "serif",
                "monospace",
                "cursive",
                "fantasy"
            ];
            function validFontName(fontName) {
                return external_root_jQuery_commonjs2_jquery_commonjs_jquery_amd_jquery_default.a.inArray(fontName.toLowerCase(), genericFontFamilies) === -1 ? "'".concat(fontName, "'") : fontName;
            }
            function env_isFontInstalled(fontName) {
                var testFontName = fontName === "Comic Sans MS" ? "Courier New" : "Comic Sans MS";
                var testText = "mmmmmmmmmmwwwww";
                var testSize = "200px";
                var canvas = document.createElement("canvas");
                var context = canvas.getContext("2d");
                context.font = testSize + " '" + testFontName + "'";
                var originalWidth = context.measureText(testText).width;
                context.font = testSize + " " + validFontName(fontName) + ', "' + testFontName + '"';
                var width = context.measureText(testText).width;
                return originalWidth !== width;
            }
            var userAgent = navigator.userAgent;
            var isMSIE = /MSIE|Trident/i.test(userAgent);
            var browserVersion;
            if (isMSIE) {
                var matches = /MSIE (\d+[.]\d+)/.exec(userAgent);
                if (matches) browserVersion = parseFloat(matches[1]);
                matches = /Trident\/.*rv:([0-9]{1,}[.0-9]{0,})/.exec(userAgent);
                if (matches) browserVersion = parseFloat(matches[1]);
            }
            var isEdge = /Edge\/\d+/.test(userAgent);
            var hasCodeMirror = !!window.CodeMirror;
            var isSupportTouch = "ontouchstart" in window || navigator.MaxTouchPoints > 0 || navigator.msMaxTouchPoints > 0; // [workaround] IE doesn't have input events for contentEditable
            // - see: https://goo.gl/4bfIvA
            var inputEventName = isMSIE ? "DOMCharacterDataModified DOMSubtreeModified DOMNodeInserted" : "input";
            /**
 * @class core.env
 *
 * Object which check platform and agent
 *
 * @singleton
 * @alternateClassName env
 */ /* harmony default export */ var env = {
                isMac: navigator.appVersion.indexOf("Mac") > -1,
                isMSIE: isMSIE,
                isEdge: isEdge,
                isFF: !isEdge && /firefox/i.test(userAgent),
                isPhantom: /PhantomJS/i.test(userAgent),
                isWebkit: !isEdge && /webkit/i.test(userAgent),
                isChrome: !isEdge && /chrome/i.test(userAgent),
                isSafari: !isEdge && /safari/i.test(userAgent) && !/chrome/i.test(userAgent),
                browserVersion: browserVersion,
                jqueryVersion: parseFloat(external_root_jQuery_commonjs2_jquery_commonjs_jquery_amd_jquery_default.a.fn.jquery),
                isSupportAmd: isSupportAmd,
                isSupportTouch: isSupportTouch,
                hasCodeMirror: hasCodeMirror,
                isFontInstalled: env_isFontInstalled,
                isW3CRangeSupport: !!document.createRange,
                inputEventName: inputEventName,
                genericFontFamilies: genericFontFamilies,
                validFontName: validFontName
            };
            // CONCATENATED MODULE: ./src/js/base/core/func.js
            /**
 * @class core.func
 *
 * func utils (for high-order func's arg)
 *
 * @singleton
 * @alternateClassName func
 */ function eq(itemA) {
                return function(itemB) {
                    return itemA === itemB;
                };
            }
            function eq2(itemA, itemB) {
                return itemA === itemB;
            }
            function peq2(propName) {
                return function(itemA, itemB) {
                    return itemA[propName] === itemB[propName];
                };
            }
            function ok() {
                return true;
            }
            function fail() {
                return false;
            }
            function not(f) {
                return function() {
                    return !f.apply(f, arguments);
                };
            }
            function and(fA, fB) {
                return function(item) {
                    return fA(item) && fB(item);
                };
            }
            function func_self(a) {
                return a;
            }
            function func_invoke(obj, method) {
                return function() {
                    return obj[method].apply(obj, arguments);
                };
            }
            var idCounter = 0;
            /**
 * reset globally-unique id
 *
 */ function resetUniqueId() {
                idCounter = 0;
            }
            /**
 * generate a globally-unique id
 *
 * @param {String} [prefix]
 */ function uniqueId(prefix) {
                var id = ++idCounter + "";
                return prefix ? prefix + id : id;
            }
            /**
 * returns bnd (bounds) from rect
 *
 * - IE Compatibility Issue: http://goo.gl/sRLOAo
 * - Scroll Issue: http://goo.gl/sNjUc
 *
 * @param {Rect} rect
 * @return {Object} bounds
 * @return {Number} bounds.top
 * @return {Number} bounds.left
 * @return {Number} bounds.width
 * @return {Number} bounds.height
 */ function rect2bnd(rect) {
                var $document = external_root_jQuery_commonjs2_jquery_commonjs_jquery_amd_jquery_default()(document);
                return {
                    top: rect.top + $document.scrollTop(),
                    left: rect.left + $document.scrollLeft(),
                    width: rect.right - rect.left,
                    height: rect.bottom - rect.top
                };
            }
            /**
 * returns a copy of the object where the keys have become the values and the values the keys.
 * @param {Object} obj
 * @return {Object}
 */ function invertObject(obj) {
                var inverted = {};
                for(var key in obj)if (Object.prototype.hasOwnProperty.call(obj, key)) inverted[obj[key]] = key;
                return inverted;
            }
            /**
 * @param {String} namespace
 * @param {String} [prefix]
 * @return {String}
 */ function namespaceToCamel(namespace, prefix) {
                prefix = prefix || "";
                return prefix + namespace.split(".").map(function(name) {
                    return name.substring(0, 1).toUpperCase() + name.substring(1);
                }).join("");
            }
            /**
 * Returns a function, that, as long as it continues to be invoked, will not
 * be triggered. The function will be called after it stops being called for
 * N milliseconds. If `immediate` is passed, trigger the function on the
 * leading edge, instead of the trailing.
 * @param {Function} func
 * @param {Number} wait
 * @param {Boolean} immediate
 * @return {Function}
 */ function debounce(func, wait, immediate) {
                var timeout;
                return function() {
                    var context = this;
                    var args = arguments;
                    var later = function later() {
                        timeout = null;
                        if (!immediate) func.apply(context, args);
                    };
                    var callNow = immediate && !timeout;
                    clearTimeout(timeout);
                    timeout = setTimeout(later, wait);
                    if (callNow) func.apply(context, args);
                };
            }
            /**
 *
 * @param {String} url
 * @return {Boolean}
 */ function isValidUrl(url) {
                var expression = /[-a-zA-Z0-9@:%._\+~#=]{2,256}\.[a-z]{2,6}\b([-a-zA-Z0-9@:%_\+.~#?&//=]*)/gi;
                return expression.test(url);
            }
            /* harmony default export */ var func = {
                eq: eq,
                eq2: eq2,
                peq2: peq2,
                ok: ok,
                fail: fail,
                self: func_self,
                not: not,
                and: and,
                invoke: func_invoke,
                resetUniqueId: resetUniqueId,
                uniqueId: uniqueId,
                rect2bnd: rect2bnd,
                invertObject: invertObject,
                namespaceToCamel: namespaceToCamel,
                debounce: debounce,
                isValidUrl: isValidUrl
            };
            // CONCATENATED MODULE: ./src/js/base/core/lists.js
            /**
 * returns the first item of an array.
 *
 * @param {Array} array
 */ function lists_head(array) {
                return array[0];
            }
            /**
 * returns the last item of an array.
 *
 * @param {Array} array
 */ function lists_last(array) {
                return array[array.length - 1];
            }
            /**
 * returns everything but the last entry of the array.
 *
 * @param {Array} array
 */ function initial(array) {
                return array.slice(0, array.length - 1);
            }
            /**
 * returns the rest of the items in an array.
 *
 * @param {Array} array
 */ function tail(array) {
                return array.slice(1);
            }
            /**
 * returns item of array
 */ function find(array, pred) {
                for(var idx = 0, len = array.length; idx < len; idx++){
                    var item = array[idx];
                    if (pred(item)) return item;
                }
            }
            /**
 * returns true if all of the values in the array pass the predicate truth test.
 */ function lists_all(array, pred) {
                for(var idx = 0, len = array.length; idx < len; idx++){
                    if (!pred(array[idx])) return false;
                }
                return true;
            }
            /**
 * returns true if the value is present in the list.
 */ function contains(array, item) {
                if (array && array.length && item) {
                    if (array.indexOf) return array.indexOf(item) !== -1;
                    else if (array.contains) // `DOMTokenList` doesn't implement `.indexOf`, but it implements `.contains`
                    return array.contains(item);
                }
                return false;
            }
            /**
 * get sum from a list
 *
 * @param {Array} array - array
 * @param {Function} fn - iterator
 */ function sum(array, fn) {
                fn = fn || func.self;
                return array.reduce(function(memo, v) {
                    return memo + fn(v);
                }, 0);
            }
            /**
 * returns a copy of the collection with array type.
 * @param {Collection} collection - collection eg) node.childNodes, ...
 */ function from(collection) {
                var result = [];
                var length = collection.length;
                var idx = -1;
                while(++idx < length)result[idx] = collection[idx];
                return result;
            }
            /**
 * returns whether list is empty or not
 */ function lists_isEmpty(array) {
                return !array || !array.length;
            }
            /**
 * cluster elements by predicate function.
 *
 * @param {Array} array - array
 * @param {Function} fn - predicate function for cluster rule
 * @param {Array[]}
 */ function clusterBy(array, fn) {
                if (!array.length) return [];
                var aTail = tail(array);
                return aTail.reduce(function(memo, v) {
                    var aLast = lists_last(memo);
                    if (fn(lists_last(aLast), v)) aLast[aLast.length] = v;
                    else memo[memo.length] = [
                        v
                    ];
                    return memo;
                }, [
                    [
                        lists_head(array)
                    ]
                ]);
            }
            /**
 * returns a copy of the array with all false values removed
 *
 * @param {Array} array - array
 * @param {Function} fn - predicate function for cluster rule
 */ function compact(array) {
                var aResult = [];
                for(var idx = 0, len = array.length; idx < len; idx++)if (array[idx]) aResult.push(array[idx]);
                return aResult;
            }
            /**
 * produces a duplicate-free version of the array
 *
 * @param {Array} array
 */ function unique(array) {
                var results = [];
                for(var idx = 0, len = array.length; idx < len; idx++)if (!contains(results, array[idx])) results.push(array[idx]);
                return results;
            }
            /**
 * returns next item.
 * @param {Array} array
 */ function lists_next(array, item) {
                if (array && array.length && item) {
                    var idx = array.indexOf(item);
                    return idx === -1 ? null : array[idx + 1];
                }
                return null;
            }
            /**
 * returns prev item.
 * @param {Array} array
 */ function prev(array, item) {
                if (array && array.length && item) {
                    var idx = array.indexOf(item);
                    return idx === -1 ? null : array[idx - 1];
                }
                return null;
            }
            /**
 * @class core.list
 *
 * list utils
 *
 * @singleton
 * @alternateClassName list
 */ /* harmony default export */ var lists = {
                head: lists_head,
                last: lists_last,
                initial: initial,
                tail: tail,
                prev: prev,
                next: lists_next,
                find: find,
                contains: contains,
                all: lists_all,
                sum: sum,
                from: from,
                isEmpty: lists_isEmpty,
                clusterBy: clusterBy,
                compact: compact,
                unique: unique
            };
            // CONCATENATED MODULE: ./src/js/base/core/dom.js
            var NBSP_CHAR = String.fromCharCode(160);
            var ZERO_WIDTH_NBSP_CHAR = "\uFEFF";
            /**
 * @method isEditable
 *
 * returns whether node is `note-editable` or not.
 *
 * @param {Node} node
 * @return {Boolean}
 */ function isEditable(node) {
                return node && external_root_jQuery_commonjs2_jquery_commonjs_jquery_amd_jquery_default()(node).hasClass("note-editable");
            }
            /**
 * @method isControlSizing
 *
 * returns whether node is `note-control-sizing` or not.
 *
 * @param {Node} node
 * @return {Boolean}
 */ function isControlSizing(node) {
                return node && external_root_jQuery_commonjs2_jquery_commonjs_jquery_amd_jquery_default()(node).hasClass("note-control-sizing");
            }
            /**
 * @method makePredByNodeName
 *
 * returns predicate which judge whether nodeName is same
 *
 * @param {String} nodeName
 * @return {Function}
 */ function makePredByNodeName(nodeName) {
                nodeName = nodeName.toUpperCase();
                return function(node) {
                    return node && node.nodeName.toUpperCase() === nodeName;
                };
            }
            /**
 * @method isText
 *
 *
 *
 * @param {Node} node
 * @return {Boolean} true if node's type is text(3)
 */ function isText(node) {
                return node && node.nodeType === 3;
            }
            /**
 * @method isElement
 *
 *
 *
 * @param {Node} node
 * @return {Boolean} true if node's type is element(1)
 */ function isElement(node) {
                return node && node.nodeType === 1;
            }
            /**
 * ex) br, col, embed, hr, img, input, ...
 * @see http://www.w3.org/html/wg/drafts/html/master/syntax.html#void-elements
 */ function isVoid(node) {
                return node && /^BR|^IMG|^HR|^IFRAME|^BUTTON|^INPUT|^AUDIO|^VIDEO|^EMBED/.test(node.nodeName.toUpperCase());
            }
            function isPara(node) {
                if (isEditable(node)) return false;
                 // Chrome(v31.0), FF(v25.0.1) use DIV for paragraph
                return node && /^DIV|^P|^LI|^H[1-7]/.test(node.nodeName.toUpperCase());
            }
            function isHeading(node) {
                return node && /^H[1-7]/.test(node.nodeName.toUpperCase());
            }
            var isPre = makePredByNodeName("PRE");
            var isLi = makePredByNodeName("LI");
            function isPurePara(node) {
                return isPara(node) && !isLi(node);
            }
            var isTable = makePredByNodeName("TABLE");
            var isData = makePredByNodeName("DATA");
            function dom_isInline(node) {
                return !isBodyContainer(node) && !isList(node) && !isHr(node) && !isPara(node) && !isTable(node) && !isBlockquote(node) && !isData(node);
            }
            function isList(node) {
                return node && /^UL|^OL/.test(node.nodeName.toUpperCase());
            }
            var isHr = makePredByNodeName("HR");
            function dom_isCell(node) {
                return node && /^TD|^TH/.test(node.nodeName.toUpperCase());
            }
            var isBlockquote = makePredByNodeName("BLOCKQUOTE");
            function isBodyContainer(node) {
                return dom_isCell(node) || isBlockquote(node) || isEditable(node);
            }
            var isAnchor = makePredByNodeName("A");
            function isParaInline(node) {
                return dom_isInline(node) && !!dom_ancestor(node, isPara);
            }
            function isBodyInline(node) {
                return dom_isInline(node) && !dom_ancestor(node, isPara);
            }
            var isBody = makePredByNodeName("BODY");
            /**
 * returns whether nodeB is closest sibling of nodeA
 *
 * @param {Node} nodeA
 * @param {Node} nodeB
 * @return {Boolean}
 */ function isClosestSibling(nodeA, nodeB) {
                return nodeA.nextSibling === nodeB || nodeA.previousSibling === nodeB;
            }
            /**
 * returns array of closest siblings with node
 *
 * @param {Node} node
 * @param {function} [pred] - predicate function
 * @return {Node[]}
 */ function withClosestSiblings(node, pred) {
                pred = pred || func.ok;
                var siblings = [];
                if (node.previousSibling && pred(node.previousSibling)) siblings.push(node.previousSibling);
                siblings.push(node);
                if (node.nextSibling && pred(node.nextSibling)) siblings.push(node.nextSibling);
                return siblings;
            }
            /**
 * blank HTML for cursor position
 * - [workaround] old IE only works with &nbsp;
 * - [workaround] IE11 and other browser works with bogus br
 */ var blankHTML = env.isMSIE && env.browserVersion < 11 ? "&nbsp;" : "<br>";
            /**
 * @method nodeLength
 *
 * returns #text's text size or element's childNodes size
 *
 * @param {Node} node
 */ function nodeLength(node) {
                if (isText(node)) return node.nodeValue.length;
                if (node) return node.childNodes.length;
                return 0;
            }
            /**
 * returns whether deepest child node is empty or not.
 *
 * @param {Node} node
 * @return {Boolean}
 */ function deepestChildIsEmpty(node) {
                do {
                    if (node.firstElementChild === null || node.firstElementChild.innerHTML === "") break;
                }while (node = node.firstElementChild);
                return dom_isEmpty(node);
            }
            /**
 * returns whether node is empty or not.
 *
 * @param {Node} node
 * @return {Boolean}
 */ function dom_isEmpty(node) {
                var len = nodeLength(node);
                if (len === 0) return true;
                else if (!isText(node) && len === 1 && node.innerHTML === blankHTML) // ex) <p><br></p>, <span><br></span>
                return true;
                else if (lists.all(node.childNodes, isText) && node.innerHTML === "") // ex) <p></p>, <span></span>
                return true;
                return false;
            }
            /**
 * padding blankHTML if node is empty (for cursor position)
 */ function paddingBlankHTML(node) {
                if (!isVoid(node) && !nodeLength(node)) node.innerHTML = blankHTML;
            }
            /**
 * find nearest ancestor predicate hit
 *
 * @param {Node} node
 * @param {Function} pred - predicate function
 */ function dom_ancestor(node, pred) {
                while(node){
                    if (pred(node)) return node;
                    if (isEditable(node)) break;
                    node = node.parentNode;
                }
                return null;
            }
            /**
 * find nearest ancestor only single child blood line and predicate hit
 *
 * @param {Node} node
 * @param {Function} pred - predicate function
 */ function singleChildAncestor(node, pred) {
                node = node.parentNode;
                while(node){
                    if (nodeLength(node) !== 1) break;
                    if (pred(node)) return node;
                    if (isEditable(node)) break;
                    node = node.parentNode;
                }
                return null;
            }
            /**
 * returns new array of ancestor nodes (until predicate hit).
 *
 * @param {Node} node
 * @param {Function} [optional] pred - predicate function
 */ function listAncestor(node, pred) {
                pred = pred || func.fail;
                var ancestors = [];
                dom_ancestor(node, function(el) {
                    if (!isEditable(el)) ancestors.push(el);
                    return pred(el);
                });
                return ancestors;
            }
            /**
 * find farthest ancestor predicate hit
 */ function lastAncestor(node, pred) {
                var ancestors = listAncestor(node);
                return lists.last(ancestors.filter(pred));
            }
            /**
 * returns common ancestor node between two nodes.
 *
 * @param {Node} nodeA
 * @param {Node} nodeB
 */ function dom_commonAncestor(nodeA, nodeB) {
                var ancestors = listAncestor(nodeA);
                for(var n = nodeB; n; n = n.parentNode){
                    if (ancestors.indexOf(n) > -1) return n;
                }
                return null; // difference document area
            }
            /**
 * listing all previous siblings (until predicate hit).
 *
 * @param {Node} node
 * @param {Function} [optional] pred - predicate function
 */ function listPrev(node, pred) {
                pred = pred || func.fail;
                var nodes = [];
                while(node){
                    if (pred(node)) break;
                    nodes.push(node);
                    node = node.previousSibling;
                }
                return nodes;
            }
            /**
 * listing next siblings (until predicate hit).
 *
 * @param {Node} node
 * @param {Function} [pred] - predicate function
 */ function listNext(node, pred) {
                pred = pred || func.fail;
                var nodes = [];
                while(node){
                    if (pred(node)) break;
                    nodes.push(node);
                    node = node.nextSibling;
                }
                return nodes;
            }
            /**
 * listing descendant nodes
 *
 * @param {Node} node
 * @param {Function} [pred] - predicate function
 */ function listDescendant(node, pred) {
                var descendants = [];
                pred = pred || func.ok; // start DFS(depth first search) with node
                (function fnWalk(current) {
                    if (node !== current && pred(current)) descendants.push(current);
                    for(var idx = 0, len = current.childNodes.length; idx < len; idx++)fnWalk(current.childNodes[idx]);
                })(node);
                return descendants;
            }
            /**
 * wrap node with new tag.
 *
 * @param {Node} node
 * @param {Node} tagName of wrapper
 * @return {Node} - wrapper
 */ function wrap(node, wrapperName) {
                var parent = node.parentNode;
                var wrapper = external_root_jQuery_commonjs2_jquery_commonjs_jquery_amd_jquery_default()("<" + wrapperName + ">")[0];
                parent.insertBefore(wrapper, node);
                wrapper.appendChild(node);
                return wrapper;
            }
            /**
 * insert node after preceding
 *
 * @param {Node} node
 * @param {Node} preceding - predicate function
 */ function insertAfter(node, preceding) {
                var next = preceding.nextSibling;
                var parent = preceding.parentNode;
                if (next) parent.insertBefore(node, next);
                else parent.appendChild(node);
                return node;
            }
            /**
 * append elements.
 *
 * @param {Node} node
 * @param {Collection} aChild
 */ function appendChildNodes(node, aChild) {
                external_root_jQuery_commonjs2_jquery_commonjs_jquery_amd_jquery_default.a.each(aChild, function(idx, child) {
                    node.appendChild(child);
                });
                return node;
            }
            /**
 * returns whether boundaryPoint is left edge or not.
 *
 * @param {BoundaryPoint} point
 * @return {Boolean}
 */ function isLeftEdgePoint(point) {
                return point.offset === 0;
            }
            /**
 * returns whether boundaryPoint is right edge or not.
 *
 * @param {BoundaryPoint} point
 * @return {Boolean}
 */ function isRightEdgePoint(point) {
                return point.offset === nodeLength(point.node);
            }
            /**
 * returns whether boundaryPoint is edge or not.
 *
 * @param {BoundaryPoint} point
 * @return {Boolean}
 */ function isEdgePoint(point) {
                return isLeftEdgePoint(point) || isRightEdgePoint(point);
            }
            /**
 * returns whether node is left edge of ancestor or not.
 *
 * @param {Node} node
 * @param {Node} ancestor
 * @return {Boolean}
 */ function dom_isLeftEdgeOf(node, ancestor) {
                while(node && node !== ancestor){
                    if (dom_position(node) !== 0) return false;
                    node = node.parentNode;
                }
                return true;
            }
            /**
 * returns whether node is right edge of ancestor or not.
 *
 * @param {Node} node
 * @param {Node} ancestor
 * @return {Boolean}
 */ function isRightEdgeOf(node, ancestor) {
                if (!ancestor) return false;
                while(node && node !== ancestor){
                    if (dom_position(node) !== nodeLength(node.parentNode) - 1) return false;
                    node = node.parentNode;
                }
                return true;
            }
            /**
 * returns whether point is left edge of ancestor or not.
 * @param {BoundaryPoint} point
 * @param {Node} ancestor
 * @return {Boolean}
 */ function isLeftEdgePointOf(point, ancestor) {
                return isLeftEdgePoint(point) && dom_isLeftEdgeOf(point.node, ancestor);
            }
            /**
 * returns whether point is right edge of ancestor or not.
 * @param {BoundaryPoint} point
 * @param {Node} ancestor
 * @return {Boolean}
 */ function isRightEdgePointOf(point, ancestor) {
                return isRightEdgePoint(point) && isRightEdgeOf(point.node, ancestor);
            }
            /**
 * returns offset from parent.
 *
 * @param {Node} node
 */ function dom_position(node) {
                var offset = 0;
                while(node = node.previousSibling)offset += 1;
                return offset;
            }
            function hasChildren(node) {
                return !!(node && node.childNodes && node.childNodes.length);
            }
            /**
 * returns previous boundaryPoint
 *
 * @param {BoundaryPoint} point
 * @param {Boolean} isSkipInnerOffset
 * @return {BoundaryPoint}
 */ function dom_prevPoint(point, isSkipInnerOffset) {
                var node;
                var offset;
                if (point.offset === 0) {
                    if (isEditable(point.node)) return null;
                    node = point.node.parentNode;
                    offset = dom_position(point.node);
                } else if (hasChildren(point.node)) {
                    node = point.node.childNodes[point.offset - 1];
                    offset = nodeLength(node);
                } else {
                    node = point.node;
                    offset = isSkipInnerOffset ? 0 : point.offset - 1;
                }
                return {
                    node: node,
                    offset: offset
                };
            }
            /**
 * returns next boundaryPoint
 *
 * @param {BoundaryPoint} point
 * @param {Boolean} isSkipInnerOffset
 * @return {BoundaryPoint}
 */ function dom_nextPoint(point, isSkipInnerOffset) {
                var node, offset;
                if (dom_isEmpty(point.node)) return null;
                if (nodeLength(point.node) === point.offset) {
                    if (isEditable(point.node)) return null;
                    node = point.node.parentNode;
                    offset = dom_position(point.node) + 1;
                } else if (hasChildren(point.node)) {
                    node = point.node.childNodes[point.offset];
                    offset = 0;
                    if (dom_isEmpty(node)) return null;
                } else {
                    node = point.node;
                    offset = isSkipInnerOffset ? nodeLength(point.node) : point.offset + 1;
                    if (dom_isEmpty(node)) return null;
                }
                return {
                    node: node,
                    offset: offset
                };
            }
            /**
 * returns whether pointA and pointB is same or not.
 *
 * @param {BoundaryPoint} pointA
 * @param {BoundaryPoint} pointB
 * @return {Boolean}
 */ function isSamePoint(pointA, pointB) {
                return pointA.node === pointB.node && pointA.offset === pointB.offset;
            }
            /**
 * returns whether point is visible (can set cursor) or not.
 *
 * @param {BoundaryPoint} point
 * @return {Boolean}
 */ function isVisiblePoint(point) {
                if (isText(point.node) || !hasChildren(point.node) || dom_isEmpty(point.node)) return true;
                var leftNode = point.node.childNodes[point.offset - 1];
                var rightNode = point.node.childNodes[point.offset];
                if ((!leftNode || isVoid(leftNode)) && (!rightNode || isVoid(rightNode))) return true;
                return false;
            }
            /**
 * @method prevPointUtil
 *
 * @param {BoundaryPoint} point
 * @param {Function} pred
 * @return {BoundaryPoint}
 */ function prevPointUntil(point, pred) {
                while(point){
                    if (pred(point)) return point;
                    point = dom_prevPoint(point);
                }
                return null;
            }
            /**
 * @method nextPointUntil
 *
 * @param {BoundaryPoint} point
 * @param {Function} pred
 * @return {BoundaryPoint}
 */ function nextPointUntil(point, pred) {
                while(point){
                    if (pred(point)) return point;
                    point = dom_nextPoint(point);
                }
                return null;
            }
            /**
 * returns whether point has character or not.
 *
 * @param {Point} point
 * @return {Boolean}
 */ function isCharPoint(point) {
                if (!isText(point.node)) return false;
                var ch = point.node.nodeValue.charAt(point.offset - 1);
                return ch && ch !== " " && ch !== NBSP_CHAR;
            }
            /**
 * returns whether point has space or not.
 *
 * @param {Point} point
 * @return {Boolean}
 */ function isSpacePoint(point) {
                if (!isText(point.node)) return false;
                var ch = point.node.nodeValue.charAt(point.offset - 1);
                return ch === " " || ch === NBSP_CHAR;
            }
            /**
 * @method walkPoint
 *
 * @param {BoundaryPoint} startPoint
 * @param {BoundaryPoint} endPoint
 * @param {Function} handler
 * @param {Boolean} isSkipInnerOffset
 */ function walkPoint(startPoint, endPoint, handler, isSkipInnerOffset) {
                var point = startPoint;
                while(point){
                    handler(point);
                    if (isSamePoint(point, endPoint)) break;
                    var isSkipOffset = isSkipInnerOffset && startPoint.node !== point.node && endPoint.node !== point.node;
                    point = dom_nextPoint(point, isSkipOffset);
                }
            }
            /**
 * @method makeOffsetPath
 *
 * return offsetPath(array of offset) from ancestor
 *
 * @param {Node} ancestor - ancestor node
 * @param {Node} node
 */ function makeOffsetPath(ancestor, node) {
                var ancestors = listAncestor(node, func.eq(ancestor));
                return ancestors.map(dom_position).reverse();
            }
            /**
 * @method fromOffsetPath
 *
 * return element from offsetPath(array of offset)
 *
 * @param {Node} ancestor - ancestor node
 * @param {array} offsets - offsetPath
 */ function fromOffsetPath(ancestor, offsets) {
                var current = ancestor;
                for(var i = 0, len = offsets.length; i < len; i++)if (current.childNodes.length <= offsets[i]) current = current.childNodes[current.childNodes.length - 1];
                else current = current.childNodes[offsets[i]];
                return current;
            }
            /**
 * @method splitNode
 *
 * split element or #text
 *
 * @param {BoundaryPoint} point
 * @param {Object} [options]
 * @param {Boolean} [options.isSkipPaddingBlankHTML] - default: false
 * @param {Boolean} [options.isNotSplitEdgePoint] - default: false
 * @param {Boolean} [options.isDiscardEmptySplits] - default: false
 * @return {Node} right node of boundaryPoint
 */ function splitNode(point, options) {
                var isSkipPaddingBlankHTML = options && options.isSkipPaddingBlankHTML;
                var isNotSplitEdgePoint = options && options.isNotSplitEdgePoint;
                var isDiscardEmptySplits = options && options.isDiscardEmptySplits;
                if (isDiscardEmptySplits) isSkipPaddingBlankHTML = true;
                 // edge case
                if (isEdgePoint(point) && (isText(point.node) || isNotSplitEdgePoint)) {
                    if (isLeftEdgePoint(point)) return point.node;
                    else if (isRightEdgePoint(point)) return point.node.nextSibling;
                } // split #text
                if (isText(point.node)) return point.node.splitText(point.offset);
                else {
                    var childNode = point.node.childNodes[point.offset];
                    var clone = insertAfter(point.node.cloneNode(false), point.node);
                    appendChildNodes(clone, listNext(childNode));
                    if (!isSkipPaddingBlankHTML) {
                        paddingBlankHTML(point.node);
                        paddingBlankHTML(clone);
                    }
                    if (isDiscardEmptySplits) {
                        if (dom_isEmpty(point.node)) remove(point.node);
                        if (dom_isEmpty(clone)) {
                            remove(clone);
                            return point.node.nextSibling;
                        }
                    }
                    return clone;
                }
            }
            /**
 * @method splitTree
 *
 * split tree by point
 *
 * @param {Node} root - split root
 * @param {BoundaryPoint} point
 * @param {Object} [options]
 * @param {Boolean} [options.isSkipPaddingBlankHTML] - default: false
 * @param {Boolean} [options.isNotSplitEdgePoint] - default: false
 * @return {Node} right node of boundaryPoint
 */ function splitTree(root, point, options) {
                // ex) [#text, <span>, <p>]
                var ancestors = listAncestor(point.node, func.eq(root));
                if (!ancestors.length) return null;
                else if (ancestors.length === 1) return splitNode(point, options);
                return ancestors.reduce(function(node, parent) {
                    if (node === point.node) node = splitNode(point, options);
                    return splitNode({
                        node: parent,
                        offset: node ? dom_position(node) : nodeLength(parent)
                    }, options);
                });
            }
            /**
 * split point
 *
 * @param {Point} point
 * @param {Boolean} isInline
 * @return {Object}
 */ function splitPoint(point, isInline) {
                // find splitRoot, container
                //  - inline: splitRoot is a child of paragraph
                //  - block: splitRoot is a child of bodyContainer
                var pred = isInline ? isPara : isBodyContainer;
                var ancestors = listAncestor(point.node, pred);
                var topAncestor = lists.last(ancestors) || point.node;
                var splitRoot, container;
                if (pred(topAncestor)) {
                    splitRoot = ancestors[ancestors.length - 2];
                    container = topAncestor;
                } else {
                    splitRoot = topAncestor;
                    container = splitRoot.parentNode;
                } // if splitRoot is exists, split with splitTree
                var pivot = splitRoot && splitTree(splitRoot, point, {
                    isSkipPaddingBlankHTML: isInline,
                    isNotSplitEdgePoint: isInline
                }); // if container is point.node, find pivot with point.offset
                if (!pivot && container === point.node) pivot = point.node.childNodes[point.offset];
                return {
                    rightNode: pivot,
                    container: container
                };
            }
            function dom_create(nodeName) {
                return document.createElement(nodeName);
            }
            function createText(text) {
                return document.createTextNode(text);
            }
            /**
 * @method remove
 *
 * remove node, (isRemoveChild: remove child or not)
 *
 * @param {Node} node
 * @param {Boolean} isRemoveChild
 */ function remove(node, isRemoveChild) {
                if (!node || !node.parentNode) return;
                if (node.removeNode) return node.removeNode(isRemoveChild);
                var parent = node.parentNode;
                if (!isRemoveChild) {
                    var nodes = [];
                    for(var i = 0, len = node.childNodes.length; i < len; i++)nodes.push(node.childNodes[i]);
                    for(var _i = 0, _len = nodes.length; _i < _len; _i++)parent.insertBefore(nodes[_i], node);
                }
                parent.removeChild(node);
            }
            /**
 * @method removeWhile
 *
 * @param {Node} node
 * @param {Function} pred
 */ function removeWhile(node, pred) {
                while(node){
                    if (isEditable(node) || !pred(node)) break;
                    var parent = node.parentNode;
                    remove(node);
                    node = parent;
                }
            }
            /**
 * @method replace
 *
 * replace node with provided nodeName
 *
 * @param {Node} node
 * @param {String} nodeName
 * @return {Node} - new node
 */ function dom_replace(node, nodeName) {
                if (node.nodeName.toUpperCase() === nodeName.toUpperCase()) return node;
                var newNode = dom_create(nodeName);
                if (node.style.cssText) newNode.style.cssText = node.style.cssText;
                appendChildNodes(newNode, lists.from(node.childNodes));
                insertAfter(newNode, node);
                remove(node);
                return newNode;
            }
            var isTextarea = makePredByNodeName("TEXTAREA");
            /**
 * @param {jQuery} $node
 * @param {Boolean} [stripLinebreaks] - default: false
 */ function dom_value($node, stripLinebreaks) {
                var val = isTextarea($node[0]) ? $node.val() : $node.html();
                if (stripLinebreaks) return val.replace(/[\n\r]/g, "");
                return val;
            }
            /**
 * @method html
 *
 * get the HTML contents of node
 *
 * @param {jQuery} $node
 * @param {Boolean} [isNewlineOnBlock]
 */ function dom_html($node, isNewlineOnBlock) {
                var markup = dom_value($node);
                if (isNewlineOnBlock) {
                    var regexTag = /<(\/?)(\b(?!!)[^>\s]*)(.*?)(\s*\/?>)/g;
                    markup = markup.replace(regexTag, function(match, endSlash, name) {
                        name = name.toUpperCase();
                        var isEndOfInlineContainer = /^DIV|^TD|^TH|^P|^LI|^H[1-7]/.test(name) && !!endSlash;
                        var isBlockNode = /^BLOCKQUOTE|^TABLE|^TBODY|^TR|^HR|^UL|^OL/.test(name);
                        return match + (isEndOfInlineContainer || isBlockNode ? "\n" : "");
                    });
                    markup = markup.trim();
                }
                return markup;
            }
            function posFromPlaceholder(placeholder) {
                var $placeholder = external_root_jQuery_commonjs2_jquery_commonjs_jquery_amd_jquery_default()(placeholder);
                var pos = $placeholder.offset();
                var height = $placeholder.outerHeight(true); // include margin
                return {
                    left: pos.left,
                    top: pos.top + height
                };
            }
            function attachEvents($node, events) {
                Object.keys(events).forEach(function(key) {
                    $node.on(key, events[key]);
                });
            }
            function detachEvents($node, events) {
                Object.keys(events).forEach(function(key) {
                    $node.off(key, events[key]);
                });
            }
            /**
 * @method isCustomStyleTag
 *
 * assert if a node contains a "note-styletag" class,
 * which implies that's a custom-made style tag node
 *
 * @param {Node} an HTML DOM node
 */ function isCustomStyleTag(node) {
                return node && !isText(node) && lists.contains(node.classList, "note-styletag");
            }
            /* harmony default export */ var dom = {
                /** @property {String} NBSP_CHAR */ NBSP_CHAR: NBSP_CHAR,
                /** @property {String} ZERO_WIDTH_NBSP_CHAR */ ZERO_WIDTH_NBSP_CHAR: ZERO_WIDTH_NBSP_CHAR,
                /** @property {String} blank */ blank: blankHTML,
                /** @property {String} emptyPara */ emptyPara: "<p>".concat(blankHTML, "</p>"),
                makePredByNodeName: makePredByNodeName,
                isEditable: isEditable,
                isControlSizing: isControlSizing,
                isText: isText,
                isElement: isElement,
                isVoid: isVoid,
                isPara: isPara,
                isPurePara: isPurePara,
                isHeading: isHeading,
                isInline: dom_isInline,
                isBlock: func.not(dom_isInline),
                isBodyInline: isBodyInline,
                isBody: isBody,
                isParaInline: isParaInline,
                isPre: isPre,
                isList: isList,
                isTable: isTable,
                isData: isData,
                isCell: dom_isCell,
                isBlockquote: isBlockquote,
                isBodyContainer: isBodyContainer,
                isAnchor: isAnchor,
                isDiv: makePredByNodeName("DIV"),
                isLi: isLi,
                isBR: makePredByNodeName("BR"),
                isSpan: makePredByNodeName("SPAN"),
                isB: makePredByNodeName("B"),
                isU: makePredByNodeName("U"),
                isS: makePredByNodeName("S"),
                isI: makePredByNodeName("I"),
                isImg: makePredByNodeName("IMG"),
                isTextarea: isTextarea,
                deepestChildIsEmpty: deepestChildIsEmpty,
                isEmpty: dom_isEmpty,
                isEmptyAnchor: func.and(isAnchor, dom_isEmpty),
                isClosestSibling: isClosestSibling,
                withClosestSiblings: withClosestSiblings,
                nodeLength: nodeLength,
                isLeftEdgePoint: isLeftEdgePoint,
                isRightEdgePoint: isRightEdgePoint,
                isEdgePoint: isEdgePoint,
                isLeftEdgeOf: dom_isLeftEdgeOf,
                isRightEdgeOf: isRightEdgeOf,
                isLeftEdgePointOf: isLeftEdgePointOf,
                isRightEdgePointOf: isRightEdgePointOf,
                prevPoint: dom_prevPoint,
                nextPoint: dom_nextPoint,
                isSamePoint: isSamePoint,
                isVisiblePoint: isVisiblePoint,
                prevPointUntil: prevPointUntil,
                nextPointUntil: nextPointUntil,
                isCharPoint: isCharPoint,
                isSpacePoint: isSpacePoint,
                walkPoint: walkPoint,
                ancestor: dom_ancestor,
                singleChildAncestor: singleChildAncestor,
                listAncestor: listAncestor,
                lastAncestor: lastAncestor,
                listNext: listNext,
                listPrev: listPrev,
                listDescendant: listDescendant,
                commonAncestor: dom_commonAncestor,
                wrap: wrap,
                insertAfter: insertAfter,
                appendChildNodes: appendChildNodes,
                position: dom_position,
                hasChildren: hasChildren,
                makeOffsetPath: makeOffsetPath,
                fromOffsetPath: fromOffsetPath,
                splitTree: splitTree,
                splitPoint: splitPoint,
                create: dom_create,
                createText: createText,
                remove: remove,
                removeWhile: removeWhile,
                replace: dom_replace,
                html: dom_html,
                value: dom_value,
                posFromPlaceholder: posFromPlaceholder,
                attachEvents: attachEvents,
                detachEvents: detachEvents,
                isCustomStyleTag: isCustomStyleTag
            };
            // CONCATENATED MODULE: ./src/js/base/Context.js
            function _classCallCheck(instance, Constructor) {
                if (!(instance instanceof Constructor)) throw new TypeError("Cannot call a class as a function");
            }
            function _defineProperties(target, props) {
                for(var i = 0; i < props.length; i++){
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    descriptor.configurable = true;
                    if ("value" in descriptor) descriptor.writable = true;
                    Object.defineProperty(target, descriptor.key, descriptor);
                }
            }
            function _createClass(Constructor, protoProps, staticProps) {
                if (protoProps) _defineProperties(Constructor.prototype, protoProps);
                if (staticProps) _defineProperties(Constructor, staticProps);
                return Constructor;
            }
            var Context_Context = /*#__PURE__*/ function() {
                /**
   * @param {jQuery} $note
   * @param {Object} options
   */ function Context($note, options) {
                    _classCallCheck(this, Context);
                    this.$note = $note;
                    this.memos = {};
                    this.modules = {};
                    this.layoutInfo = {};
                    this.options = external_root_jQuery_commonjs2_jquery_commonjs_jquery_amd_jquery_default.a.extend(true, {}, options); // init ui with options
                    external_root_jQuery_commonjs2_jquery_commonjs_jquery_amd_jquery_default.a.summernote.ui = external_root_jQuery_commonjs2_jquery_commonjs_jquery_amd_jquery_default.a.summernote.ui_template(this.options);
                    this.ui = external_root_jQuery_commonjs2_jquery_commonjs_jquery_amd_jquery_default.a.summernote.ui;
                    this.initialize();
                }
                /**
   * create layout and initialize modules and other resources
   */ _createClass(Context, [
                    {
                        key: "initialize",
                        value: function initialize() {
                            this.layoutInfo = this.ui.createLayout(this.$note);
                            this._initialize();
                            this.$note.hide();
                            return this;
                        }
                    },
                    {
                        key: "destroy",
                        value: function destroy() {
                            this._destroy();
                            this.$note.removeData("summernote");
                            this.ui.removeLayout(this.$note, this.layoutInfo);
                        }
                    },
                    {
                        key: "reset",
                        value: function reset() {
                            var disabled = this.isDisabled();
                            this.code(dom.emptyPara);
                            this._destroy();
                            this._initialize();
                            if (disabled) this.disable();
                        }
                    },
                    {
                        key: "_initialize",
                        value: function _initialize() {
                            var _this = this;
                            // set own id
                            this.options.id = func.uniqueId(external_root_jQuery_commonjs2_jquery_commonjs_jquery_amd_jquery_default.a.now()); // set default container for tooltips, popovers, and dialogs
                            this.options.container = this.options.container || this.layoutInfo.editor; // add optional buttons
                            var buttons = external_root_jQuery_commonjs2_jquery_commonjs_jquery_amd_jquery_default.a.extend({}, this.options.buttons);
                            Object.keys(buttons).forEach(function(key) {
                                _this.memo("button." + key, buttons[key]);
                            });
                            var modules = external_root_jQuery_commonjs2_jquery_commonjs_jquery_amd_jquery_default.a.extend({}, this.options.modules, external_root_jQuery_commonjs2_jquery_commonjs_jquery_amd_jquery_default.a.summernote.plugins || {}); // add and initialize modules
                            Object.keys(modules).forEach(function(key) {
                                _this.module(key, modules[key], true);
                            });
                            Object.keys(this.modules).forEach(function(key) {
                                _this.initializeModule(key);
                            });
                        }
                    },
                    {
                        key: "_destroy",
                        value: function _destroy() {
                            var _this2 = this;
                            // destroy modules with reversed order
                            Object.keys(this.modules).reverse().forEach(function(key) {
                                _this2.removeModule(key);
                            });
                            Object.keys(this.memos).forEach(function(key) {
                                _this2.removeMemo(key);
                            }); // trigger custom onDestroy callback
                            this.triggerEvent("destroy", this);
                        }
                    },
                    {
                        key: "code",
                        value: function code(html) {
                            var isActivated = this.invoke("codeview.isActivated");
                            if (html === undefined) {
                                this.invoke("codeview.sync");
                                return isActivated ? this.layoutInfo.codable.val() : this.layoutInfo.editable.html();
                            } else {
                                if (isActivated) this.layoutInfo.codable.val(html);
                                else this.layoutInfo.editable.html(html);
                                this.$note.val(html);
                                this.triggerEvent("change", html, this.layoutInfo.editable);
                            }
                        }
                    },
                    {
                        key: "isDisabled",
                        value: function isDisabled() {
                            return this.layoutInfo.editable.attr("contenteditable") === "false";
                        }
                    },
                    {
                        key: "enable",
                        value: function enable() {
                            this.layoutInfo.editable.attr("contenteditable", true);
                            this.invoke("toolbar.activate", true);
                            this.triggerEvent("disable", false);
                            this.options.editing = true;
                        }
                    },
                    {
                        key: "disable",
                        value: function disable() {
                            // close codeview if codeview is opend
                            if (this.invoke("codeview.isActivated")) this.invoke("codeview.deactivate");
                            this.layoutInfo.editable.attr("contenteditable", false);
                            this.options.editing = false;
                            this.invoke("toolbar.deactivate", true);
                            this.triggerEvent("disable", true);
                        }
                    },
                    {
                        key: "triggerEvent",
                        value: function triggerEvent() {
                            var namespace = lists.head(arguments);
                            var args = lists.tail(lists.from(arguments));
                            var callback = this.options.callbacks[func.namespaceToCamel(namespace, "on")];
                            if (callback) callback.apply(this.$note[0], args);
                            this.$note.trigger("summernote." + namespace, args);
                        }
                    },
                    {
                        key: "initializeModule",
                        value: function initializeModule(key) {
                            var module1 = this.modules[key];
                            module1.shouldInitialize = module1.shouldInitialize || func.ok;
                            if (!module1.shouldInitialize()) return;
                             // initialize module
                            if (module1.initialize) module1.initialize();
                             // attach events
                            if (module1.events) dom.attachEvents(this.$note, module1.events);
                        }
                    },
                    {
                        key: "module",
                        value: function module1(key, ModuleClass, withoutIntialize) {
                            if (arguments.length === 1) return this.modules[key];
                            this.modules[key] = new ModuleClass(this);
                            if (!withoutIntialize) this.initializeModule(key);
                        }
                    },
                    {
                        key: "removeModule",
                        value: function removeModule(key) {
                            var module1 = this.modules[key];
                            if (module1.shouldInitialize()) {
                                if (module1.events) dom.detachEvents(this.$note, module1.events);
                                if (module1.destroy) module1.destroy();
                            }
                            delete this.modules[key];
                        }
                    },
                    {
                        key: "memo",
                        value: function memo(key, obj) {
                            if (arguments.length === 1) return this.memos[key];
                            this.memos[key] = obj;
                        }
                    },
                    {
                        key: "removeMemo",
                        value: function removeMemo(key) {
                            if (this.memos[key] && this.memos[key].destroy) this.memos[key].destroy();
                            delete this.memos[key];
                        }
                    },
                    {
                        key: "createInvokeHandlerAndUpdateState",
                        value: function createInvokeHandlerAndUpdateState(namespace, value) {
                            var _this3 = this;
                            return function(event) {
                                _this3.createInvokeHandler(namespace, value)(event);
                                _this3.invoke("buttons.updateCurrentStyle");
                            };
                        }
                    },
                    {
                        key: "createInvokeHandler",
                        value: function createInvokeHandler(namespace, value) {
                            var _this4 = this;
                            return function(event) {
                                event.preventDefault();
                                var $target = external_root_jQuery_commonjs2_jquery_commonjs_jquery_amd_jquery_default()(event.target);
                                _this4.invoke(namespace, value || $target.closest("[data-value]").data("value"), $target);
                            };
                        }
                    },
                    {
                        key: "invoke",
                        value: function invoke() {
                            var namespace = lists.head(arguments);
                            var args = lists.tail(lists.from(arguments));
                            var splits = namespace.split(".");
                            var hasSeparator = splits.length > 1;
                            var moduleName = hasSeparator && lists.head(splits);
                            var methodName = hasSeparator ? lists.last(splits) : lists.head(splits);
                            var module1 = this.modules[moduleName || "editor"];
                            if (!moduleName && this[methodName]) return this[methodName].apply(this, args);
                            else if (module1 && module1[methodName] && module1.shouldInitialize()) return module1[methodName].apply(module1, args);
                        }
                    }
                ]);
                return Context;
            }();
            // CONCATENATED MODULE: ./src/js/summernote.js
            external_root_jQuery_commonjs2_jquery_commonjs_jquery_amd_jquery_default.a.fn.extend({
                /**
   * Summernote API
   *
   * @param {Object|String}
   * @return {this}
   */ summernote: function summernote() {
                    var type = external_root_jQuery_commonjs2_jquery_commonjs_jquery_amd_jquery_default.a.type(lists.head(arguments));
                    var isExternalAPICalled = type === "string";
                    var hasInitOptions = type === "object";
                    var options = external_root_jQuery_commonjs2_jquery_commonjs_jquery_amd_jquery_default.a.extend({}, external_root_jQuery_commonjs2_jquery_commonjs_jquery_amd_jquery_default.a.summernote.options, hasInitOptions ? lists.head(arguments) : {}); // Update options
                    options.langInfo = external_root_jQuery_commonjs2_jquery_commonjs_jquery_amd_jquery_default.a.extend(true, {}, external_root_jQuery_commonjs2_jquery_commonjs_jquery_amd_jquery_default.a.summernote.lang["en-US"], external_root_jQuery_commonjs2_jquery_commonjs_jquery_amd_jquery_default.a.summernote.lang[options.lang]);
                    options.icons = external_root_jQuery_commonjs2_jquery_commonjs_jquery_amd_jquery_default.a.extend(true, {}, external_root_jQuery_commonjs2_jquery_commonjs_jquery_amd_jquery_default.a.summernote.options.icons, options.icons);
                    options.tooltip = options.tooltip === "auto" ? !env.isSupportTouch : options.tooltip;
                    this.each(function(idx, note) {
                        var $note = external_root_jQuery_commonjs2_jquery_commonjs_jquery_amd_jquery_default()(note);
                        if (!$note.data("summernote")) {
                            var context = new Context_Context($note, options);
                            $note.data("summernote", context);
                            $note.data("summernote").triggerEvent("init", context.layoutInfo);
                        }
                    });
                    var $note = this.first();
                    if ($note.length) {
                        var context = $note.data("summernote");
                        if (isExternalAPICalled) return context.invoke.apply(context, lists.from(arguments));
                        else if (options.focus) context.invoke("editor.focus");
                    }
                    return this;
                }
            });
            // CONCATENATED MODULE: ./src/js/base/core/range.js
            function range_classCallCheck(instance, Constructor) {
                if (!(instance instanceof Constructor)) throw new TypeError("Cannot call a class as a function");
            }
            function range_defineProperties(target, props) {
                for(var i = 0; i < props.length; i++){
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    descriptor.configurable = true;
                    if ("value" in descriptor) descriptor.writable = true;
                    Object.defineProperty(target, descriptor.key, descriptor);
                }
            }
            function range_createClass(Constructor, protoProps, staticProps) {
                if (protoProps) range_defineProperties(Constructor.prototype, protoProps);
                if (staticProps) range_defineProperties(Constructor, staticProps);
                return Constructor;
            }
            /**
 * return boundaryPoint from TextRange, inspired by Andy Na's HuskyRange.js
 *
 * @param {TextRange} textRange
 * @param {Boolean} isStart
 * @return {BoundaryPoint}
 *
 * @see http://msdn.microsoft.com/en-us/library/ie/ms535872(v=vs.85).aspx
 */ function textRangeToPoint(textRange, isStart) {
                var container = textRange.parentElement();
                var offset;
                var tester = document.body.createTextRange();
                var prevContainer;
                var childNodes = lists.from(container.childNodes);
                for(offset = 0; offset < childNodes.length; offset++){
                    if (dom.isText(childNodes[offset])) continue;
                    tester.moveToElementText(childNodes[offset]);
                    if (tester.compareEndPoints("StartToStart", textRange) >= 0) break;
                    prevContainer = childNodes[offset];
                }
                if (offset !== 0 && dom.isText(childNodes[offset - 1])) {
                    var textRangeStart = document.body.createTextRange();
                    var curTextNode = null;
                    textRangeStart.moveToElementText(prevContainer || container);
                    textRangeStart.collapse(!prevContainer);
                    curTextNode = prevContainer ? prevContainer.nextSibling : container.firstChild;
                    var pointTester = textRange.duplicate();
                    pointTester.setEndPoint("StartToStart", textRangeStart);
                    var textCount = pointTester.text.replace(/[\r\n]/g, "").length;
                    while(textCount > curTextNode.nodeValue.length && curTextNode.nextSibling){
                        textCount -= curTextNode.nodeValue.length;
                        curTextNode = curTextNode.nextSibling;
                    } // [workaround] enforce IE to re-reference curTextNode, hack
                    var dummy = curTextNode.nodeValue; // eslint-disable-line
                    if (isStart && curTextNode.nextSibling && dom.isText(curTextNode.nextSibling) && textCount === curTextNode.nodeValue.length) {
                        textCount -= curTextNode.nodeValue.length;
                        curTextNode = curTextNode.nextSibling;
                    }
                    container = curTextNode;
                    offset = textCount;
                }
                return {
                    cont: container,
                    offset: offset
                };
            }
            /**
 * return TextRange from boundary point (inspired by google closure-library)
 * @param {BoundaryPoint} point
 * @return {TextRange}
 */ function pointToTextRange(point) {
                var textRangeInfo = function textRangeInfo(container, offset) {
                    var node, isCollapseToStart;
                    if (dom.isText(container)) {
                        var prevTextNodes = dom.listPrev(container, func.not(dom.isText));
                        var prevContainer = lists.last(prevTextNodes).previousSibling;
                        node = prevContainer || container.parentNode;
                        offset += lists.sum(lists.tail(prevTextNodes), dom.nodeLength);
                        isCollapseToStart = !prevContainer;
                    } else {
                        node = container.childNodes[offset] || container;
                        if (dom.isText(node)) return textRangeInfo(node, 0);
                        offset = 0;
                        isCollapseToStart = false;
                    }
                    return {
                        node: node,
                        collapseToStart: isCollapseToStart,
                        offset: offset
                    };
                };
                var textRange = document.body.createTextRange();
                var info = textRangeInfo(point.node, point.offset);
                textRange.moveToElementText(info.node);
                textRange.collapse(info.collapseToStart);
                textRange.moveStart("character", info.offset);
                return textRange;
            }
            /**
   * Wrapped Range
   *
   * @constructor
   * @param {Node} sc - start container
   * @param {Number} so - start offset
   * @param {Node} ec - end container
   * @param {Number} eo - end offset
   */ var range_WrappedRange = /*#__PURE__*/ function() {
                function WrappedRange(sc, so, ec, eo) {
                    range_classCallCheck(this, WrappedRange);
                    this.sc = sc;
                    this.so = so;
                    this.ec = ec;
                    this.eo = eo; // isOnEditable: judge whether range is on editable or not
                    this.isOnEditable = this.makeIsOn(dom.isEditable); // isOnList: judge whether range is on list node or not
                    this.isOnList = this.makeIsOn(dom.isList); // isOnAnchor: judge whether range is on anchor node or not
                    this.isOnAnchor = this.makeIsOn(dom.isAnchor); // isOnCell: judge whether range is on cell node or not
                    this.isOnCell = this.makeIsOn(dom.isCell); // isOnData: judge whether range is on data node or not
                    this.isOnData = this.makeIsOn(dom.isData);
                } // nativeRange: get nativeRange from sc, so, ec, eo
                range_createClass(WrappedRange, [
                    {
                        key: "nativeRange",
                        value: function nativeRange() {
                            if (env.isW3CRangeSupport) {
                                var w3cRange = document.createRange();
                                w3cRange.setStart(this.sc, this.sc.data && this.so > this.sc.data.length ? 0 : this.so);
                                w3cRange.setEnd(this.ec, this.sc.data ? Math.min(this.eo, this.sc.data.length) : this.eo);
                                return w3cRange;
                            } else {
                                var textRange = pointToTextRange({
                                    node: this.sc,
                                    offset: this.so
                                });
                                textRange.setEndPoint("EndToEnd", pointToTextRange({
                                    node: this.ec,
                                    offset: this.eo
                                }));
                                return textRange;
                            }
                        }
                    },
                    {
                        key: "getPoints",
                        value: function getPoints() {
                            return {
                                sc: this.sc,
                                so: this.so,
                                ec: this.ec,
                                eo: this.eo
                            };
                        }
                    },
                    {
                        key: "getStartPoint",
                        value: function getStartPoint() {
                            return {
                                node: this.sc,
                                offset: this.so
                            };
                        }
                    },
                    {
                        key: "getEndPoint",
                        value: function getEndPoint() {
                            return {
                                node: this.ec,
                                offset: this.eo
                            };
                        }
                    },
                    {
                        key: "select",
                        value: function select() {
                            var nativeRng = this.nativeRange();
                            if (env.isW3CRangeSupport) {
                                var selection = document.getSelection();
                                if (selection.rangeCount > 0) selection.removeAllRanges();
                                selection.addRange(nativeRng);
                            } else nativeRng.select();
                            return this;
                        }
                    },
                    {
                        key: "scrollIntoView",
                        value: function scrollIntoView(container) {
                            var height = external_root_jQuery_commonjs2_jquery_commonjs_jquery_amd_jquery_default()(container).height();
                            if (container.scrollTop + height < this.sc.offsetTop) container.scrollTop += Math.abs(container.scrollTop + height - this.sc.offsetTop);
                            return this;
                        }
                    },
                    {
                        key: "normalize",
                        value: function normalize() {
                            /**
       * @param {BoundaryPoint} point
       * @param {Boolean} isLeftToRight - true: prefer to choose right node
       *                                - false: prefer to choose left node
       * @return {BoundaryPoint}
       */ var getVisiblePoint = function getVisiblePoint(point, isLeftToRight) {
                                if (!point) return point;
                                 // Just use the given point [XXX:Adhoc]
                                //  - case 01. if the point is on the middle of the node
                                //  - case 02. if the point is on the right edge and prefer to choose left node
                                //  - case 03. if the point is on the left edge and prefer to choose right node
                                //  - case 04. if the point is on the right edge and prefer to choose right node but the node is void
                                //  - case 05. if the point is on the left edge and prefer to choose left node but the node is void
                                //  - case 06. if the point is on the block node and there is no children
                                if (dom.isVisiblePoint(point)) {
                                    if (!dom.isEdgePoint(point) || dom.isRightEdgePoint(point) && !isLeftToRight || dom.isLeftEdgePoint(point) && isLeftToRight || dom.isRightEdgePoint(point) && isLeftToRight && dom.isVoid(point.node.nextSibling) || dom.isLeftEdgePoint(point) && !isLeftToRight && dom.isVoid(point.node.previousSibling) || dom.isBlock(point.node) && dom.isEmpty(point.node)) return point;
                                } // point on block's edge
                                var block = dom.ancestor(point.node, dom.isBlock);
                                var hasRightNode = false;
                                if (!hasRightNode) {
                                    var prevPoint = dom.prevPoint(point) || {
                                        node: null
                                    };
                                    hasRightNode = (dom.isLeftEdgePointOf(point, block) || dom.isVoid(prevPoint.node)) && !isLeftToRight;
                                }
                                var hasLeftNode = false;
                                if (!hasLeftNode) {
                                    var _nextPoint = dom.nextPoint(point) || {
                                        node: null
                                    };
                                    hasLeftNode = (dom.isRightEdgePointOf(point, block) || dom.isVoid(_nextPoint.node)) && isLeftToRight;
                                }
                                if (hasRightNode || hasLeftNode) {
                                    // returns point already on visible point
                                    if (dom.isVisiblePoint(point)) return point;
                                     // reverse direction
                                    isLeftToRight = !isLeftToRight;
                                }
                                var nextPoint = isLeftToRight ? dom.nextPointUntil(dom.nextPoint(point), dom.isVisiblePoint) : dom.prevPointUntil(dom.prevPoint(point), dom.isVisiblePoint);
                                return nextPoint || point;
                            };
                            var endPoint = getVisiblePoint(this.getEndPoint(), false);
                            var startPoint = this.isCollapsed() ? endPoint : getVisiblePoint(this.getStartPoint(), true);
                            return new WrappedRange(startPoint.node, startPoint.offset, endPoint.node, endPoint.offset);
                        }
                    },
                    {
                        key: "nodes",
                        value: function nodes(pred, options) {
                            pred = pred || func.ok;
                            var includeAncestor = options && options.includeAncestor;
                            var fullyContains = options && options.fullyContains; // TODO compare points and sort
                            var startPoint = this.getStartPoint();
                            var endPoint = this.getEndPoint();
                            var nodes = [];
                            var leftEdgeNodes = [];
                            dom.walkPoint(startPoint, endPoint, function(point) {
                                if (dom.isEditable(point.node)) return;
                                var node;
                                if (fullyContains) {
                                    if (dom.isLeftEdgePoint(point)) leftEdgeNodes.push(point.node);
                                    if (dom.isRightEdgePoint(point) && lists.contains(leftEdgeNodes, point.node)) node = point.node;
                                } else if (includeAncestor) node = dom.ancestor(point.node, pred);
                                else node = point.node;
                                if (node && pred(node)) nodes.push(node);
                            }, true);
                            return lists.unique(nodes);
                        }
                    },
                    {
                        key: "commonAncestor",
                        value: function commonAncestor() {
                            return dom.commonAncestor(this.sc, this.ec);
                        }
                    },
                    {
                        key: "expand",
                        value: function expand(pred) {
                            var startAncestor = dom.ancestor(this.sc, pred);
                            var endAncestor = dom.ancestor(this.ec, pred);
                            if (!startAncestor && !endAncestor) return new WrappedRange(this.sc, this.so, this.ec, this.eo);
                            var boundaryPoints = this.getPoints();
                            if (startAncestor) {
                                boundaryPoints.sc = startAncestor;
                                boundaryPoints.so = 0;
                            }
                            if (endAncestor) {
                                boundaryPoints.ec = endAncestor;
                                boundaryPoints.eo = dom.nodeLength(endAncestor);
                            }
                            return new WrappedRange(boundaryPoints.sc, boundaryPoints.so, boundaryPoints.ec, boundaryPoints.eo);
                        }
                    },
                    {
                        key: "collapse",
                        value: function collapse(isCollapseToStart) {
                            if (isCollapseToStart) return new WrappedRange(this.sc, this.so, this.sc, this.so);
                            else return new WrappedRange(this.ec, this.eo, this.ec, this.eo);
                        }
                    },
                    {
                        key: "splitText",
                        value: function splitText() {
                            var isSameContainer = this.sc === this.ec;
                            var boundaryPoints = this.getPoints();
                            if (dom.isText(this.ec) && !dom.isEdgePoint(this.getEndPoint())) this.ec.splitText(this.eo);
                            if (dom.isText(this.sc) && !dom.isEdgePoint(this.getStartPoint())) {
                                boundaryPoints.sc = this.sc.splitText(this.so);
                                boundaryPoints.so = 0;
                                if (isSameContainer) {
                                    boundaryPoints.ec = boundaryPoints.sc;
                                    boundaryPoints.eo = this.eo - this.so;
                                }
                            }
                            return new WrappedRange(boundaryPoints.sc, boundaryPoints.so, boundaryPoints.ec, boundaryPoints.eo);
                        }
                    },
                    {
                        key: "deleteContents",
                        value: function deleteContents() {
                            if (this.isCollapsed()) return this;
                            var rng = this.splitText();
                            var nodes = rng.nodes(null, {
                                fullyContains: true
                            }); // find new cursor point
                            var point = dom.prevPointUntil(rng.getStartPoint(), function(point) {
                                return !lists.contains(nodes, point.node);
                            });
                            var emptyParents = [];
                            external_root_jQuery_commonjs2_jquery_commonjs_jquery_amd_jquery_default.a.each(nodes, function(idx, node) {
                                // find empty parents
                                var parent = node.parentNode;
                                if (point.node !== parent && dom.nodeLength(parent) === 1) emptyParents.push(parent);
                                dom.remove(node, false);
                            }); // remove empty parents
                            external_root_jQuery_commonjs2_jquery_commonjs_jquery_amd_jquery_default.a.each(emptyParents, function(idx, node) {
                                dom.remove(node, false);
                            });
                            return new WrappedRange(point.node, point.offset, point.node, point.offset).normalize();
                        }
                    },
                    {
                        key: "makeIsOn",
                        value: function makeIsOn(pred) {
                            return function() {
                                var ancestor = dom.ancestor(this.sc, pred);
                                return !!ancestor && ancestor === dom.ancestor(this.ec, pred);
                            };
                        }
                    },
                    {
                        key: "isLeftEdgeOf",
                        value: function isLeftEdgeOf(pred) {
                            if (!dom.isLeftEdgePoint(this.getStartPoint())) return false;
                            var node = dom.ancestor(this.sc, pred);
                            return node && dom.isLeftEdgeOf(this.sc, node);
                        }
                    },
                    {
                        key: "isCollapsed",
                        value: function isCollapsed() {
                            return this.sc === this.ec && this.so === this.eo;
                        }
                    },
                    {
                        key: "wrapBodyInlineWithPara",
                        value: function wrapBodyInlineWithPara() {
                            if (dom.isBodyContainer(this.sc) && dom.isEmpty(this.sc)) {
                                this.sc.innerHTML = dom.emptyPara;
                                return new WrappedRange(this.sc.firstChild, 0, this.sc.firstChild, 0);
                            }
                            /**
       * [workaround] firefox often create range on not visible point. so normalize here.
       *  - firefox: |<p>text</p>|
       *  - chrome: <p>|text|</p>
       */ var rng = this.normalize();
                            if (dom.isParaInline(this.sc) || dom.isPara(this.sc)) return rng;
                             // find inline top ancestor
                            var topAncestor;
                            if (dom.isInline(rng.sc)) {
                                var ancestors = dom.listAncestor(rng.sc, func.not(dom.isInline));
                                topAncestor = lists.last(ancestors);
                                if (!dom.isInline(topAncestor)) topAncestor = ancestors[ancestors.length - 2] || rng.sc.childNodes[rng.so];
                            } else topAncestor = rng.sc.childNodes[rng.so > 0 ? rng.so - 1 : 0];
                            if (topAncestor) {
                                // siblings not in paragraph
                                var inlineSiblings = dom.listPrev(topAncestor, dom.isParaInline).reverse();
                                inlineSiblings = inlineSiblings.concat(dom.listNext(topAncestor.nextSibling, dom.isParaInline)); // wrap with paragraph
                                if (inlineSiblings.length) {
                                    var para = dom.wrap(lists.head(inlineSiblings), "p");
                                    dom.appendChildNodes(para, lists.tail(inlineSiblings));
                                }
                            }
                            return this.normalize();
                        }
                    },
                    {
                        key: "insertNode",
                        value: function insertNode(node) {
                            var rng = this;
                            if (dom.isText(node) || dom.isInline(node)) rng = this.wrapBodyInlineWithPara().deleteContents();
                            var info = dom.splitPoint(rng.getStartPoint(), dom.isInline(node));
                            if (info.rightNode) info.rightNode.parentNode.insertBefore(node, info.rightNode);
                            else info.container.appendChild(node);
                            return node;
                        }
                    },
                    {
                        key: "pasteHTML",
                        value: function pasteHTML(markup) {
                            markup = external_root_jQuery_commonjs2_jquery_commonjs_jquery_amd_jquery_default.a.trim(markup);
                            var contentsContainer = external_root_jQuery_commonjs2_jquery_commonjs_jquery_amd_jquery_default()("<div></div>").html(markup)[0];
                            var childNodes = lists.from(contentsContainer.childNodes); // const rng = this.wrapBodyInlineWithPara().deleteContents();
                            var rng = this;
                            if (rng.so >= 0) childNodes = childNodes.reverse();
                            childNodes = childNodes.map(function(childNode) {
                                return rng.insertNode(childNode);
                            });
                            if (rng.so > 0) childNodes = childNodes.reverse();
                            return childNodes;
                        }
                    },
                    {
                        key: "toString",
                        value: function toString() {
                            var nativeRng = this.nativeRange();
                            return env.isW3CRangeSupport ? nativeRng.toString() : nativeRng.text;
                        }
                    },
                    {
                        key: "getWordRange",
                        value: function getWordRange(findAfter) {
                            var endPoint = this.getEndPoint();
                            if (!dom.isCharPoint(endPoint)) return this;
                            var startPoint = dom.prevPointUntil(endPoint, function(point) {
                                return !dom.isCharPoint(point);
                            });
                            if (findAfter) endPoint = dom.nextPointUntil(endPoint, function(point) {
                                return !dom.isCharPoint(point);
                            });
                            return new WrappedRange(startPoint.node, startPoint.offset, endPoint.node, endPoint.offset);
                        }
                    },
                    {
                        key: "getWordsRange",
                        value: function getWordsRange(findAfter) {
                            var endPoint = this.getEndPoint();
                            var isNotTextPoint = function isNotTextPoint(point) {
                                return !dom.isCharPoint(point) && !dom.isSpacePoint(point);
                            };
                            if (isNotTextPoint(endPoint)) return this;
                            var startPoint = dom.prevPointUntil(endPoint, isNotTextPoint);
                            if (findAfter) endPoint = dom.nextPointUntil(endPoint, isNotTextPoint);
                            return new WrappedRange(startPoint.node, startPoint.offset, endPoint.node, endPoint.offset);
                        }
                    },
                    {
                        key: "getWordsMatchRange",
                        value: function getWordsMatchRange(regex) {
                            var endPoint = this.getEndPoint();
                            var startPoint = dom.prevPointUntil(endPoint, function(point) {
                                if (!dom.isCharPoint(point) && !dom.isSpacePoint(point)) return true;
                                var rng = new WrappedRange(point.node, point.offset, endPoint.node, endPoint.offset);
                                var result = regex.exec(rng.toString());
                                return result && result.index === 0;
                            });
                            var rng = new WrappedRange(startPoint.node, startPoint.offset, endPoint.node, endPoint.offset);
                            var text = rng.toString();
                            var result = regex.exec(text);
                            if (result && result[0].length === text.length) return rng;
                            else return null;
                        }
                    },
                    {
                        key: "bookmark",
                        value: function bookmark(editable) {
                            return {
                                s: {
                                    path: dom.makeOffsetPath(editable, this.sc),
                                    offset: this.so
                                },
                                e: {
                                    path: dom.makeOffsetPath(editable, this.ec),
                                    offset: this.eo
                                }
                            };
                        }
                    },
                    {
                        key: "paraBookmark",
                        value: function paraBookmark(paras) {
                            return {
                                s: {
                                    path: lists.tail(dom.makeOffsetPath(lists.head(paras), this.sc)),
                                    offset: this.so
                                },
                                e: {
                                    path: lists.tail(dom.makeOffsetPath(lists.last(paras), this.ec)),
                                    offset: this.eo
                                }
                            };
                        }
                    },
                    {
                        key: "getClientRects",
                        value: function getClientRects() {
                            var nativeRng = this.nativeRange();
                            return nativeRng.getClientRects();
                        }
                    }
                ]);
                return WrappedRange;
            }();
            /**
 * Data structure
 *  * BoundaryPoint: a point of dom tree
 *  * BoundaryPoints: two boundaryPoints corresponding to the start and the end of the Range
 *
 * See to http://www.w3.org/TR/DOM-Level-2-Traversal-Range/ranges.html#Level-2-Range-Position
 */ /* harmony default export */ var range = {
                /**
   * create Range Object From arguments or Browser Selection
   *
   * @param {Node} sc - start container
   * @param {Number} so - start offset
   * @param {Node} ec - end container
   * @param {Number} eo - end offset
   * @return {WrappedRange}
   */ create: function create(sc, so, ec, eo) {
                    if (arguments.length === 4) return new range_WrappedRange(sc, so, ec, eo);
                    else if (arguments.length === 2) {
                        // collapsed
                        ec = sc;
                        eo = so;
                        return new range_WrappedRange(sc, so, ec, eo);
                    } else {
                        var wrappedRange = this.createFromSelection();
                        if (!wrappedRange && arguments.length === 1) {
                            var bodyElement = arguments[0];
                            if (dom.isEditable(bodyElement)) bodyElement = bodyElement.lastChild;
                            return this.createFromBodyElement(bodyElement, dom.emptyPara === arguments[0].innerHTML);
                        }
                        return wrappedRange;
                    }
                },
                createFromBodyElement: function createFromBodyElement(bodyElement) {
                    var isCollapseToStart = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
                    var wrappedRange = this.createFromNode(bodyElement);
                    return wrappedRange.collapse(isCollapseToStart);
                },
                createFromSelection: function createFromSelection() {
                    var sc, so, ec, eo;
                    if (env.isW3CRangeSupport) {
                        var selection = document.getSelection();
                        if (!selection || selection.rangeCount === 0) return null;
                        else if (dom.isBody(selection.anchorNode)) // Firefox: returns entire body as range on initialization.
                        // We won't never need it.
                        return null;
                        var nativeRng = selection.getRangeAt(0);
                        sc = nativeRng.startContainer;
                        so = nativeRng.startOffset;
                        ec = nativeRng.endContainer;
                        eo = nativeRng.endOffset;
                    } else {
                        // IE8: TextRange
                        var textRange = document.selection.createRange();
                        var textRangeEnd = textRange.duplicate();
                        textRangeEnd.collapse(false);
                        var textRangeStart = textRange;
                        textRangeStart.collapse(true);
                        var startPoint = textRangeToPoint(textRangeStart, true);
                        var endPoint = textRangeToPoint(textRangeEnd, false); // same visible point case: range was collapsed.
                        if (dom.isText(startPoint.node) && dom.isLeftEdgePoint(startPoint) && dom.isTextNode(endPoint.node) && dom.isRightEdgePoint(endPoint) && endPoint.node.nextSibling === startPoint.node) startPoint = endPoint;
                        sc = startPoint.cont;
                        so = startPoint.offset;
                        ec = endPoint.cont;
                        eo = endPoint.offset;
                    }
                    return new range_WrappedRange(sc, so, ec, eo);
                },
                /**
   * @method
   *
   * create WrappedRange from node
   *
   * @param {Node} node
   * @return {WrappedRange}
   */ createFromNode: function createFromNode(node) {
                    var sc = node;
                    var so = 0;
                    var ec = node;
                    var eo = dom.nodeLength(ec); // browsers can't target a picture or void node
                    if (dom.isVoid(sc)) {
                        so = dom.listPrev(sc).length - 1;
                        sc = sc.parentNode;
                    }
                    if (dom.isBR(ec)) {
                        eo = dom.listPrev(ec).length - 1;
                        ec = ec.parentNode;
                    } else if (dom.isVoid(ec)) {
                        eo = dom.listPrev(ec).length;
                        ec = ec.parentNode;
                    }
                    return this.create(sc, so, ec, eo);
                },
                /**
   * create WrappedRange from node after position
   *
   * @param {Node} node
   * @return {WrappedRange}
   */ createFromNodeBefore: function createFromNodeBefore(node) {
                    return this.createFromNode(node).collapse(true);
                },
                /**
   * create WrappedRange from node after position
   *
   * @param {Node} node
   * @return {WrappedRange}
   */ createFromNodeAfter: function createFromNodeAfter(node) {
                    return this.createFromNode(node).collapse();
                },
                /**
   * @method
   *
   * create WrappedRange from bookmark
   *
   * @param {Node} editable
   * @param {Object} bookmark
   * @return {WrappedRange}
   */ createFromBookmark: function createFromBookmark(editable, bookmark) {
                    var sc = dom.fromOffsetPath(editable, bookmark.s.path);
                    var so = bookmark.s.offset;
                    var ec = dom.fromOffsetPath(editable, bookmark.e.path);
                    var eo = bookmark.e.offset;
                    return new range_WrappedRange(sc, so, ec, eo);
                },
                /**
   * @method
   *
   * create WrappedRange from paraBookmark
   *
   * @param {Object} bookmark
   * @param {Node[]} paras
   * @return {WrappedRange}
   */ createFromParaBookmark: function createFromParaBookmark(bookmark, paras) {
                    var so = bookmark.s.offset;
                    var eo = bookmark.e.offset;
                    var sc = dom.fromOffsetPath(lists.head(paras), bookmark.s.path);
                    var ec = dom.fromOffsetPath(lists.last(paras), bookmark.e.path);
                    return new range_WrappedRange(sc, so, ec, eo);
                }
            };
            // CONCATENATED MODULE: ./src/js/base/core/key.js
            var KEY_MAP = {
                "BACKSPACE": 8,
                "TAB": 9,
                "ENTER": 13,
                "SPACE": 32,
                "DELETE": 46,
                // Arrow
                "LEFT": 37,
                "UP": 38,
                "RIGHT": 39,
                "DOWN": 40,
                // Number: 0-9
                "NUM0": 48,
                "NUM1": 49,
                "NUM2": 50,
                "NUM3": 51,
                "NUM4": 52,
                "NUM5": 53,
                "NUM6": 54,
                "NUM7": 55,
                "NUM8": 56,
                // Alphabet: a-z
                "B": 66,
                "E": 69,
                "I": 73,
                "J": 74,
                "K": 75,
                "L": 76,
                "R": 82,
                "S": 83,
                "U": 85,
                "V": 86,
                "Y": 89,
                "Z": 90,
                "SLASH": 191,
                "LEFTBRACKET": 219,
                "BACKSLASH": 220,
                "RIGHTBRACKET": 221,
                // Navigation
                "HOME": 36,
                "END": 35,
                "PAGEUP": 33,
                "PAGEDOWN": 34
            };
            /**
 * @class core.key
 *
 * Object for keycodes.
 *
 * @singleton
 * @alternateClassName key
 */ /* harmony default export */ var core_key = {
                /**
   * @method isEdit
   *
   * @param {Number} keyCode
   * @return {Boolean}
   */ isEdit: function isEdit(keyCode) {
                    return lists.contains([
                        KEY_MAP.BACKSPACE,
                        KEY_MAP.TAB,
                        KEY_MAP.ENTER,
                        KEY_MAP.SPACE,
                        KEY_MAP.DELETE
                    ], keyCode);
                },
                /**
   * @method isMove
   *
   * @param {Number} keyCode
   * @return {Boolean}
   */ isMove: function isMove(keyCode) {
                    return lists.contains([
                        KEY_MAP.LEFT,
                        KEY_MAP.UP,
                        KEY_MAP.RIGHT,
                        KEY_MAP.DOWN
                    ], keyCode);
                },
                /**
   * @method isNavigation
   *
   * @param {Number} keyCode
   * @return {Boolean}
   */ isNavigation: function isNavigation(keyCode) {
                    return lists.contains([
                        KEY_MAP.HOME,
                        KEY_MAP.END,
                        KEY_MAP.PAGEUP,
                        KEY_MAP.PAGEDOWN
                    ], keyCode);
                },
                /**
   * @property {Object} nameFromCode
   * @property {String} nameFromCode.8 "BACKSPACE"
   */ nameFromCode: func.invertObject(KEY_MAP),
                code: KEY_MAP
            };
            // CONCATENATED MODULE: ./src/js/base/core/async.js
            /**
 * @method readFileAsDataURL
 *
 * read contents of file as representing URL
 *
 * @param {File} file
 * @return {Promise} - then: dataUrl
 */ function readFileAsDataURL(file) {
                return external_root_jQuery_commonjs2_jquery_commonjs_jquery_amd_jquery_default.a.Deferred(function(deferred) {
                    external_root_jQuery_commonjs2_jquery_commonjs_jquery_amd_jquery_default.a.extend(new FileReader(), {
                        onload: function onload(e) {
                            var dataURL = e.target.result;
                            deferred.resolve(dataURL);
                        },
                        onerror: function onerror(err) {
                            deferred.reject(err);
                        }
                    }).readAsDataURL(file);
                }).promise();
            }
            /**
 * @method createImage
 *
 * create `<image>` from url string
 *
 * @param {String} url
 * @return {Promise} - then: $image
 */ function createImage(url) {
                return external_root_jQuery_commonjs2_jquery_commonjs_jquery_amd_jquery_default.a.Deferred(function(deferred) {
                    var $img = external_root_jQuery_commonjs2_jquery_commonjs_jquery_amd_jquery_default()("<img>");
                    $img.one("load", function() {
                        $img.off("error abort");
                        deferred.resolve($img);
                    }).one("error abort", function() {
                        $img.off("load").detach();
                        deferred.reject($img);
                    }).css({
                        display: "none"
                    }).appendTo(document.body).attr("src", url);
                }).promise();
            }
            // CONCATENATED MODULE: ./src/js/base/editing/History.js
            function History_classCallCheck(instance, Constructor) {
                if (!(instance instanceof Constructor)) throw new TypeError("Cannot call a class as a function");
            }
            function History_defineProperties(target, props) {
                for(var i = 0; i < props.length; i++){
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    descriptor.configurable = true;
                    if ("value" in descriptor) descriptor.writable = true;
                    Object.defineProperty(target, descriptor.key, descriptor);
                }
            }
            function History_createClass(Constructor, protoProps, staticProps) {
                if (protoProps) History_defineProperties(Constructor.prototype, protoProps);
                if (staticProps) History_defineProperties(Constructor, staticProps);
                return Constructor;
            }
            var History_History = /*#__PURE__*/ function() {
                function History(context) {
                    History_classCallCheck(this, History);
                    this.stack = [];
                    this.stackOffset = -1;
                    this.context = context;
                    this.$editable = context.layoutInfo.editable;
                    this.editable = this.$editable[0];
                }
                History_createClass(History, [
                    {
                        key: "makeSnapshot",
                        value: function makeSnapshot() {
                            var rng = range.create(this.editable);
                            var emptyBookmark = {
                                s: {
                                    path: [],
                                    offset: 0
                                },
                                e: {
                                    path: [],
                                    offset: 0
                                }
                            };
                            return {
                                contents: this.$editable.html(),
                                bookmark: rng && rng.isOnEditable() ? rng.bookmark(this.editable) : emptyBookmark
                            };
                        }
                    },
                    {
                        key: "applySnapshot",
                        value: function applySnapshot(snapshot) {
                            if (snapshot.contents !== null) this.$editable.html(snapshot.contents);
                            if (snapshot.bookmark !== null) range.createFromBookmark(this.editable, snapshot.bookmark).select();
                        }
                    },
                    {
                        key: "rewind",
                        value: function rewind() {
                            // Create snap shot if not yet recorded
                            if (this.$editable.html() !== this.stack[this.stackOffset].contents) this.recordUndo();
                             // Return to the first available snapshot.
                            this.stackOffset = 0; // Apply that snapshot.
                            this.applySnapshot(this.stack[this.stackOffset]);
                        }
                    },
                    {
                        key: "commit",
                        value: function commit() {
                            // Clear the stack.
                            this.stack = []; // Restore stackOffset to its original value.
                            this.stackOffset = -1; // Record our first snapshot (of nothing).
                            this.recordUndo();
                        }
                    },
                    {
                        key: "reset",
                        value: function reset() {
                            // Clear the stack.
                            this.stack = []; // Restore stackOffset to its original value.
                            this.stackOffset = -1; // Clear the editable area.
                            this.$editable.html(""); // Record our first snapshot (of nothing).
                            this.recordUndo();
                        }
                    },
                    {
                        key: "undo",
                        value: function undo() {
                            // Create snap shot if not yet recorded
                            if (this.$editable.html() !== this.stack[this.stackOffset].contents) this.recordUndo();
                            if (this.stackOffset > 0) {
                                this.stackOffset--;
                                this.applySnapshot(this.stack[this.stackOffset]);
                            }
                        }
                    },
                    {
                        key: "redo",
                        value: function redo() {
                            if (this.stack.length - 1 > this.stackOffset) {
                                this.stackOffset++;
                                this.applySnapshot(this.stack[this.stackOffset]);
                            }
                        }
                    },
                    {
                        key: "recordUndo",
                        value: function recordUndo() {
                            this.stackOffset++; // Wash out stack after stackOffset
                            if (this.stack.length > this.stackOffset) this.stack = this.stack.slice(0, this.stackOffset);
                             // Create new snapshot and push it to the end
                            this.stack.push(this.makeSnapshot()); // If the stack size reachs to the limit, then slice it
                            if (this.stack.length > this.context.options.historyLimit) {
                                this.stack.shift();
                                this.stackOffset -= 1;
                            }
                        }
                    }
                ]);
                return History;
            }();
            // CONCATENATED MODULE: ./src/js/base/editing/Style.js
            function Style_classCallCheck(instance, Constructor) {
                if (!(instance instanceof Constructor)) throw new TypeError("Cannot call a class as a function");
            }
            function Style_defineProperties(target, props) {
                for(var i = 0; i < props.length; i++){
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    descriptor.configurable = true;
                    if ("value" in descriptor) descriptor.writable = true;
                    Object.defineProperty(target, descriptor.key, descriptor);
                }
            }
            function Style_createClass(Constructor, protoProps, staticProps) {
                if (protoProps) Style_defineProperties(Constructor.prototype, protoProps);
                if (staticProps) Style_defineProperties(Constructor, staticProps);
                return Constructor;
            }
            var Style_Style = /*#__PURE__*/ function() {
                function Style() {
                    Style_classCallCheck(this, Style);
                }
                Style_createClass(Style, [
                    {
                        key: "jQueryCSS",
                        /**
     * @method jQueryCSS
     *
     * [workaround] for old jQuery
     * passing an array of style properties to .css()
     * will result in an object of property-value pairs.
     * (compability with version < 1.9)
     *
     * @private
     * @param  {jQuery} $obj
     * @param  {Array} propertyNames - An array of one or more CSS properties.
     * @return {Object}
     */ value: function jQueryCSS($obj, propertyNames) {
                            if (env.jqueryVersion < 1.9) {
                                var result = {};
                                external_root_jQuery_commonjs2_jquery_commonjs_jquery_amd_jquery_default.a.each(propertyNames, function(idx, propertyName) {
                                    result[propertyName] = $obj.css(propertyName);
                                });
                                return result;
                            }
                            return $obj.css(propertyNames);
                        }
                    },
                    {
                        key: "fromNode",
                        value: function fromNode($node) {
                            var properties = [
                                "font-family",
                                "font-size",
                                "text-align",
                                "list-style-type",
                                "line-height"
                            ];
                            var styleInfo = this.jQueryCSS($node, properties) || {};
                            var fontSize = $node[0].style.fontSize || styleInfo["font-size"];
                            styleInfo["font-size"] = parseInt(fontSize, 10);
                            styleInfo["font-size-unit"] = fontSize.match(/[a-z%]+$/);
                            return styleInfo;
                        }
                    },
                    {
                        key: "stylePara",
                        value: function stylePara(rng, styleInfo) {
                            external_root_jQuery_commonjs2_jquery_commonjs_jquery_amd_jquery_default.a.each(rng.nodes(dom.isPara, {
                                includeAncestor: true
                            }), function(idx, para) {
                                external_root_jQuery_commonjs2_jquery_commonjs_jquery_amd_jquery_default()(para).css(styleInfo);
                            });
                        }
                    },
                    {
                        key: "styleNodes",
                        value: function styleNodes(rng, options) {
                            rng = rng.splitText();
                            var nodeName = options && options.nodeName || "SPAN";
                            var expandClosestSibling = !!(options && options.expandClosestSibling);
                            var onlyPartialContains = !!(options && options.onlyPartialContains);
                            if (rng.isCollapsed()) return [
                                rng.insertNode(dom.create(nodeName))
                            ];
                            var pred = dom.makePredByNodeName(nodeName);
                            var nodes = rng.nodes(dom.isText, {
                                fullyContains: true
                            }).map(function(text) {
                                return dom.singleChildAncestor(text, pred) || dom.wrap(text, nodeName);
                            });
                            if (expandClosestSibling) {
                                if (onlyPartialContains) {
                                    var nodesInRange = rng.nodes(); // compose with partial contains predication
                                    pred = func.and(pred, function(node) {
                                        return lists.contains(nodesInRange, node);
                                    });
                                }
                                return nodes.map(function(node) {
                                    var siblings = dom.withClosestSiblings(node, pred);
                                    var head = lists.head(siblings);
                                    var tails = lists.tail(siblings);
                                    external_root_jQuery_commonjs2_jquery_commonjs_jquery_amd_jquery_default.a.each(tails, function(idx, elem) {
                                        dom.appendChildNodes(head, elem.childNodes);
                                        dom.remove(elem);
                                    });
                                    return lists.head(siblings);
                                });
                            } else return nodes;
                        }
                    },
                    {
                        key: "current",
                        value: function current(rng) {
                            var $cont = external_root_jQuery_commonjs2_jquery_commonjs_jquery_amd_jquery_default()(!dom.isElement(rng.sc) ? rng.sc.parentNode : rng.sc);
                            var styleInfo = this.fromNode($cont); // document.queryCommandState for toggle state
                            // [workaround] prevent Firefox nsresult: "0x80004005 (NS_ERROR_FAILURE)"
                            try {
                                styleInfo = external_root_jQuery_commonjs2_jquery_commonjs_jquery_amd_jquery_default.a.extend(styleInfo, {
                                    "font-bold": document.queryCommandState("bold") ? "bold" : "normal",
                                    "font-italic": document.queryCommandState("italic") ? "italic" : "normal",
                                    "font-underline": document.queryCommandState("underline") ? "underline" : "normal",
                                    "font-subscript": document.queryCommandState("subscript") ? "subscript" : "normal",
                                    "font-superscript": document.queryCommandState("superscript") ? "superscript" : "normal",
                                    "font-strikethrough": document.queryCommandState("strikethrough") ? "strikethrough" : "normal",
                                    "font-family": document.queryCommandValue("fontname") || styleInfo["font-family"]
                                });
                            } catch (e) {} // eslint-disable-next-line
                            // list-style-type to list-style(unordered, ordered)
                            if (!rng.isOnList()) styleInfo["list-style"] = "none";
                            else {
                                var orderedTypes = [
                                    "circle",
                                    "disc",
                                    "disc-leading-zero",
                                    "square"
                                ];
                                var isUnordered = orderedTypes.indexOf(styleInfo["list-style-type"]) > -1;
                                styleInfo["list-style"] = isUnordered ? "unordered" : "ordered";
                            }
                            var para = dom.ancestor(rng.sc, dom.isPara);
                            if (para && para.style["line-height"]) styleInfo["line-height"] = para.style.lineHeight;
                            else {
                                var lineHeight = parseInt(styleInfo["line-height"], 10) / parseInt(styleInfo["font-size"], 10);
                                styleInfo["line-height"] = lineHeight.toFixed(1);
                            }
                            styleInfo.anchor = rng.isOnAnchor() && dom.ancestor(rng.sc, dom.isAnchor);
                            styleInfo.ancestors = dom.listAncestor(rng.sc, dom.isEditable);
                            styleInfo.range = rng;
                            return styleInfo;
                        }
                    }
                ]);
                return Style;
            }();
            // CONCATENATED MODULE: ./src/js/base/editing/Bullet.js
            function Bullet_classCallCheck(instance, Constructor) {
                if (!(instance instanceof Constructor)) throw new TypeError("Cannot call a class as a function");
            }
            function Bullet_defineProperties(target, props) {
                for(var i = 0; i < props.length; i++){
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    descriptor.configurable = true;
                    if ("value" in descriptor) descriptor.writable = true;
                    Object.defineProperty(target, descriptor.key, descriptor);
                }
            }
            function Bullet_createClass(Constructor, protoProps, staticProps) {
                if (protoProps) Bullet_defineProperties(Constructor.prototype, protoProps);
                if (staticProps) Bullet_defineProperties(Constructor, staticProps);
                return Constructor;
            }
            var Bullet_Bullet = /*#__PURE__*/ function() {
                function Bullet() {
                    Bullet_classCallCheck(this, Bullet);
                }
                Bullet_createClass(Bullet, [
                    {
                        key: "insertOrderedList",
                        /**
     * toggle ordered list
     */ value: function insertOrderedList(editable) {
                            this.toggleList("OL", editable);
                        }
                    },
                    {
                        key: "insertUnorderedList",
                        value: function insertUnorderedList(editable) {
                            this.toggleList("UL", editable);
                        }
                    },
                    {
                        key: "indent",
                        value: function indent(editable) {
                            var _this = this;
                            var rng = range.create(editable).wrapBodyInlineWithPara();
                            var paras = rng.nodes(dom.isPara, {
                                includeAncestor: true
                            });
                            var clustereds = lists.clusterBy(paras, func.peq2("parentNode"));
                            external_root_jQuery_commonjs2_jquery_commonjs_jquery_amd_jquery_default.a.each(clustereds, function(idx, paras) {
                                var head = lists.head(paras);
                                if (dom.isLi(head)) {
                                    var previousList = _this.findList(head.previousSibling);
                                    if (previousList) paras.map(function(para) {
                                        return previousList.appendChild(para);
                                    });
                                    else {
                                        _this.wrapList(paras, head.parentNode.nodeName);
                                        paras.map(function(para) {
                                            return para.parentNode;
                                        }).map(function(para) {
                                            return _this.appendToPrevious(para);
                                        });
                                    }
                                } else external_root_jQuery_commonjs2_jquery_commonjs_jquery_amd_jquery_default.a.each(paras, function(idx, para) {
                                    external_root_jQuery_commonjs2_jquery_commonjs_jquery_amd_jquery_default()(para).css("marginLeft", function(idx, val) {
                                        return (parseInt(val, 10) || 0) + 25;
                                    });
                                });
                            });
                            rng.select();
                        }
                    },
                    {
                        key: "outdent",
                        value: function outdent(editable) {
                            var _this2 = this;
                            var rng = range.create(editable).wrapBodyInlineWithPara();
                            var paras = rng.nodes(dom.isPara, {
                                includeAncestor: true
                            });
                            var clustereds = lists.clusterBy(paras, func.peq2("parentNode"));
                            external_root_jQuery_commonjs2_jquery_commonjs_jquery_amd_jquery_default.a.each(clustereds, function(idx, paras) {
                                var head = lists.head(paras);
                                if (dom.isLi(head)) _this2.releaseList([
                                    paras
                                ]);
                                else external_root_jQuery_commonjs2_jquery_commonjs_jquery_amd_jquery_default.a.each(paras, function(idx, para) {
                                    external_root_jQuery_commonjs2_jquery_commonjs_jquery_amd_jquery_default()(para).css("marginLeft", function(idx, val) {
                                        val = parseInt(val, 10) || 0;
                                        return val > 25 ? val - 25 : "";
                                    });
                                });
                            });
                            rng.select();
                        }
                    },
                    {
                        key: "toggleList",
                        value: function toggleList(listName, editable) {
                            var _this3 = this;
                            var rng = range.create(editable).wrapBodyInlineWithPara();
                            var paras = rng.nodes(dom.isPara, {
                                includeAncestor: true
                            });
                            var bookmark = rng.paraBookmark(paras);
                            var clustereds = lists.clusterBy(paras, func.peq2("parentNode")); // paragraph to list
                            if (lists.find(paras, dom.isPurePara)) {
                                var wrappedParas = [];
                                external_root_jQuery_commonjs2_jquery_commonjs_jquery_amd_jquery_default.a.each(clustereds, function(idx, paras) {
                                    wrappedParas = wrappedParas.concat(_this3.wrapList(paras, listName));
                                });
                                paras = wrappedParas; // list to paragraph or change list style
                            } else {
                                var diffLists = rng.nodes(dom.isList, {
                                    includeAncestor: true
                                }).filter(function(listNode) {
                                    return !external_root_jQuery_commonjs2_jquery_commonjs_jquery_amd_jquery_default.a.nodeName(listNode, listName);
                                });
                                if (diffLists.length) external_root_jQuery_commonjs2_jquery_commonjs_jquery_amd_jquery_default.a.each(diffLists, function(idx, listNode) {
                                    dom.replace(listNode, listName);
                                });
                                else paras = this.releaseList(clustereds, true);
                            }
                            range.createFromParaBookmark(bookmark, paras).select();
                        }
                    },
                    {
                        key: "wrapList",
                        value: function wrapList(paras, listName) {
                            var head = lists.head(paras);
                            var last = lists.last(paras);
                            var prevList = dom.isList(head.previousSibling) && head.previousSibling;
                            var nextList = dom.isList(last.nextSibling) && last.nextSibling;
                            var listNode = prevList || dom.insertAfter(dom.create(listName || "UL"), last); // P to LI
                            paras = paras.map(function(para) {
                                return dom.isPurePara(para) ? dom.replace(para, "LI") : para;
                            }); // append to list(<ul>, <ol>)
                            dom.appendChildNodes(listNode, paras);
                            if (nextList) {
                                dom.appendChildNodes(listNode, lists.from(nextList.childNodes));
                                dom.remove(nextList);
                            }
                            return paras;
                        }
                    },
                    {
                        key: "releaseList",
                        value: function releaseList(clustereds, isEscapseToBody) {
                            var _this4 = this;
                            var releasedParas = [];
                            external_root_jQuery_commonjs2_jquery_commonjs_jquery_amd_jquery_default.a.each(clustereds, function(idx, paras) {
                                var head = lists.head(paras);
                                var last = lists.last(paras);
                                var headList = isEscapseToBody ? dom.lastAncestor(head, dom.isList) : head.parentNode;
                                var parentItem = headList.parentNode;
                                if (headList.parentNode.nodeName === "LI") {
                                    paras.map(function(para) {
                                        var newList = _this4.findNextSiblings(para);
                                        if (parentItem.nextSibling) parentItem.parentNode.insertBefore(para, parentItem.nextSibling);
                                        else parentItem.parentNode.appendChild(para);
                                        if (newList.length) {
                                            _this4.wrapList(newList, headList.nodeName);
                                            para.appendChild(newList[0].parentNode);
                                        }
                                    });
                                    if (headList.children.length === 0) parentItem.removeChild(headList);
                                    if (parentItem.childNodes.length === 0) parentItem.parentNode.removeChild(parentItem);
                                } else {
                                    var lastList = headList.childNodes.length > 1 ? dom.splitTree(headList, {
                                        node: last.parentNode,
                                        offset: dom.position(last) + 1
                                    }, {
                                        isSkipPaddingBlankHTML: true
                                    }) : null;
                                    var middleList = dom.splitTree(headList, {
                                        node: head.parentNode,
                                        offset: dom.position(head)
                                    }, {
                                        isSkipPaddingBlankHTML: true
                                    });
                                    paras = isEscapseToBody ? dom.listDescendant(middleList, dom.isLi) : lists.from(middleList.childNodes).filter(dom.isLi); // LI to P
                                    if (isEscapseToBody || !dom.isList(headList.parentNode)) paras = paras.map(function(para) {
                                        return dom.replace(para, "P");
                                    });
                                    external_root_jQuery_commonjs2_jquery_commonjs_jquery_amd_jquery_default.a.each(lists.from(paras).reverse(), function(idx, para) {
                                        dom.insertAfter(para, headList);
                                    }); // remove empty lists
                                    var rootLists = lists.compact([
                                        headList,
                                        middleList,
                                        lastList
                                    ]);
                                    external_root_jQuery_commonjs2_jquery_commonjs_jquery_amd_jquery_default.a.each(rootLists, function(idx, rootList) {
                                        var listNodes = [
                                            rootList
                                        ].concat(dom.listDescendant(rootList, dom.isList));
                                        external_root_jQuery_commonjs2_jquery_commonjs_jquery_amd_jquery_default.a.each(listNodes.reverse(), function(idx, listNode) {
                                            if (!dom.nodeLength(listNode)) dom.remove(listNode, true);
                                        });
                                    });
                                }
                                releasedParas = releasedParas.concat(paras);
                            });
                            return releasedParas;
                        }
                    },
                    {
                        key: "appendToPrevious",
                        value: function appendToPrevious(node) {
                            return node.previousSibling ? dom.appendChildNodes(node.previousSibling, [
                                node
                            ]) : this.wrapList([
                                node
                            ], "LI");
                        }
                    },
                    {
                        key: "findList",
                        value: function findList(node) {
                            return node ? lists.find(node.children, function(child) {
                                return [
                                    "OL",
                                    "UL"
                                ].indexOf(child.nodeName) > -1;
                            }) : null;
                        }
                    },
                    {
                        key: "findNextSiblings",
                        value: function findNextSiblings(node) {
                            var siblings = [];
                            while(node.nextSibling){
                                siblings.push(node.nextSibling);
                                node = node.nextSibling;
                            }
                            return siblings;
                        }
                    }
                ]);
                return Bullet;
            }();
            // CONCATENATED MODULE: ./src/js/base/editing/Typing.js
            function Typing_classCallCheck(instance, Constructor) {
                if (!(instance instanceof Constructor)) throw new TypeError("Cannot call a class as a function");
            }
            function Typing_defineProperties(target, props) {
                for(var i = 0; i < props.length; i++){
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    descriptor.configurable = true;
                    if ("value" in descriptor) descriptor.writable = true;
                    Object.defineProperty(target, descriptor.key, descriptor);
                }
            }
            function Typing_createClass(Constructor, protoProps, staticProps) {
                if (protoProps) Typing_defineProperties(Constructor.prototype, protoProps);
                if (staticProps) Typing_defineProperties(Constructor, staticProps);
                return Constructor;
            }
            /**
 * @class editing.Typing
 *
 * Typing
 *
 */ var Typing_Typing = /*#__PURE__*/ function() {
                function Typing(context) {
                    Typing_classCallCheck(this, Typing);
                    // a Bullet instance to toggle lists off
                    this.bullet = new Bullet_Bullet();
                    this.options = context.options;
                }
                /**
   * insert tab
   *
   * @param {WrappedRange} rng
   * @param {Number} tabsize
   */ Typing_createClass(Typing, [
                    {
                        key: "insertTab",
                        value: function insertTab(rng, tabsize) {
                            var tab = dom.createText(new Array(tabsize + 1).join(dom.NBSP_CHAR));
                            rng = rng.deleteContents();
                            rng.insertNode(tab, true);
                            rng = range.create(tab, tabsize);
                            rng.select();
                        }
                    },
                    {
                        key: "insertParagraph",
                        value: function insertParagraph(editable, rng) {
                            rng = rng || range.create(editable); // deleteContents on range.
                            rng = rng.deleteContents(); // Wrap range if it needs to be wrapped by paragraph
                            rng = rng.wrapBodyInlineWithPara(); // finding paragraph
                            var splitRoot = dom.ancestor(rng.sc, dom.isPara);
                            var nextPara; // on paragraph: split paragraph
                            if (splitRoot) {
                                // if it is an empty line with li
                                if (dom.isLi(splitRoot) && (dom.isEmpty(splitRoot) || dom.deepestChildIsEmpty(splitRoot))) {
                                    // toogle UL/OL and escape
                                    this.bullet.toggleList(splitRoot.parentNode.nodeName);
                                    return;
                                } else {
                                    var blockquote = null;
                                    if (this.options.blockquoteBreakingLevel === 1) blockquote = dom.ancestor(splitRoot, dom.isBlockquote);
                                    else if (this.options.blockquoteBreakingLevel === 2) blockquote = dom.lastAncestor(splitRoot, dom.isBlockquote);
                                    if (blockquote) {
                                        // We're inside a blockquote and options ask us to break it
                                        nextPara = external_root_jQuery_commonjs2_jquery_commonjs_jquery_amd_jquery_default()(dom.emptyPara)[0]; // If the split is right before a <br>, remove it so that there's no "empty line"
                                        // after the split in the new blockquote created
                                        if (dom.isRightEdgePoint(rng.getStartPoint()) && dom.isBR(rng.sc.nextSibling)) external_root_jQuery_commonjs2_jquery_commonjs_jquery_amd_jquery_default()(rng.sc.nextSibling).remove();
                                        var split = dom.splitTree(blockquote, rng.getStartPoint(), {
                                            isDiscardEmptySplits: true
                                        });
                                        if (split) split.parentNode.insertBefore(nextPara, split);
                                        else dom.insertAfter(nextPara, blockquote); // There's no split if we were at the end of the blockquote
                                    } else {
                                        nextPara = dom.splitTree(splitRoot, rng.getStartPoint()); // not a blockquote, just insert the paragraph
                                        var emptyAnchors = dom.listDescendant(splitRoot, dom.isEmptyAnchor);
                                        emptyAnchors = emptyAnchors.concat(dom.listDescendant(nextPara, dom.isEmptyAnchor));
                                        external_root_jQuery_commonjs2_jquery_commonjs_jquery_amd_jquery_default.a.each(emptyAnchors, function(idx, anchor) {
                                            dom.remove(anchor);
                                        }); // replace empty heading, pre or custom-made styleTag with P tag
                                        if ((dom.isHeading(nextPara) || dom.isPre(nextPara) || dom.isCustomStyleTag(nextPara)) && dom.isEmpty(nextPara)) nextPara = dom.replace(nextPara, "p");
                                    }
                                } // no paragraph: insert empty paragraph
                            } else {
                                var next = rng.sc.childNodes[rng.so];
                                nextPara = external_root_jQuery_commonjs2_jquery_commonjs_jquery_amd_jquery_default()(dom.emptyPara)[0];
                                if (next) rng.sc.insertBefore(nextPara, next);
                                else rng.sc.appendChild(nextPara);
                            }
                            range.create(nextPara, 0).normalize().select().scrollIntoView(editable);
                        }
                    }
                ]);
                return Typing;
            }();
            // CONCATENATED MODULE: ./src/js/base/editing/Table.js
            function Table_classCallCheck(instance, Constructor) {
                if (!(instance instanceof Constructor)) throw new TypeError("Cannot call a class as a function");
            }
            function Table_defineProperties(target, props) {
                for(var i = 0; i < props.length; i++){
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    descriptor.configurable = true;
                    if ("value" in descriptor) descriptor.writable = true;
                    Object.defineProperty(target, descriptor.key, descriptor);
                }
            }
            function Table_createClass(Constructor, protoProps, staticProps) {
                if (protoProps) Table_defineProperties(Constructor.prototype, protoProps);
                if (staticProps) Table_defineProperties(Constructor, staticProps);
                return Constructor;
            }
            /**
 * @class Create a virtual table to create what actions to do in change.
 * @param {object} startPoint Cell selected to apply change.
 * @param {enum} where  Where change will be applied Row or Col. Use enum: TableResultAction.where
 * @param {enum} action Action to be applied. Use enum: TableResultAction.requestAction
 * @param {object} domTable Dom element of table to make changes.
 */ var TableResultAction = function TableResultAction(startPoint, where, action, domTable) {
                var _startPoint = {
                    "colPos": 0,
                    "rowPos": 0
                };
                var _virtualTable = [];
                var _actionCellList = []; /// ///////////////////////////////////////////
                // Private functions
                /// ///////////////////////////////////////////
                /**
   * Set the startPoint of action.
   */ function setStartPoint() {
                    if (!startPoint || !startPoint.tagName || startPoint.tagName.toLowerCase() !== "td" && startPoint.tagName.toLowerCase() !== "th") // Impossible to identify start Cell point
                    return;
                    _startPoint.colPos = startPoint.cellIndex;
                    if (!startPoint.parentElement || !startPoint.parentElement.tagName || startPoint.parentElement.tagName.toLowerCase() !== "tr") // Impossible to identify start Row point
                    return;
                    _startPoint.rowPos = startPoint.parentElement.rowIndex;
                }
                /**
   * Define virtual table position info object.
   *
   * @param {int} rowIndex Index position in line of virtual table.
   * @param {int} cellIndex Index position in column of virtual table.
   * @param {object} baseRow Row affected by this position.
   * @param {object} baseCell Cell affected by this position.
   * @param {bool} isSpan Inform if it is an span cell/row.
   */ function setVirtualTablePosition(rowIndex, cellIndex, baseRow, baseCell, isRowSpan, isColSpan, isVirtualCell) {
                    var objPosition = {
                        "baseRow": baseRow,
                        "baseCell": baseCell,
                        "isRowSpan": isRowSpan,
                        "isColSpan": isColSpan,
                        "isVirtual": isVirtualCell
                    };
                    if (!_virtualTable[rowIndex]) _virtualTable[rowIndex] = [];
                    _virtualTable[rowIndex][cellIndex] = objPosition;
                }
                /**
   * Create action cell object.
   *
   * @param {object} virtualTableCellObj Object of specific position on virtual table.
   * @param {enum} resultAction Action to be applied in that item.
   */ function getActionCell(virtualTableCellObj, resultAction, virtualRowPosition, virtualColPosition) {
                    return {
                        "baseCell": virtualTableCellObj.baseCell,
                        "action": resultAction,
                        "virtualTable": {
                            "rowIndex": virtualRowPosition,
                            "cellIndex": virtualColPosition
                        }
                    };
                }
                /**
   * Recover free index of row to append Cell.
   *
   * @param {int} rowIndex Index of row to find free space.
   * @param {int} cellIndex Index of cell to find free space in table.
   */ function recoverCellIndex(rowIndex, cellIndex) {
                    if (!_virtualTable[rowIndex]) return cellIndex;
                    if (!_virtualTable[rowIndex][cellIndex]) return cellIndex;
                    var newCellIndex = cellIndex;
                    while(_virtualTable[rowIndex][newCellIndex]){
                        newCellIndex++;
                        if (!_virtualTable[rowIndex][newCellIndex]) return newCellIndex;
                    }
                }
                /**
   * Recover info about row and cell and add information to virtual table.
   *
   * @param {object} row Row to recover information.
   * @param {object} cell Cell to recover information.
   */ function addCellInfoToVirtual(row, cell) {
                    var cellIndex = recoverCellIndex(row.rowIndex, cell.cellIndex);
                    var cellHasColspan = cell.colSpan > 1;
                    var cellHasRowspan = cell.rowSpan > 1;
                    var isThisSelectedCell = row.rowIndex === _startPoint.rowPos && cell.cellIndex === _startPoint.colPos;
                    setVirtualTablePosition(row.rowIndex, cellIndex, row, cell, cellHasRowspan, cellHasColspan, false); // Add span rows to virtual Table.
                    var rowspanNumber = cell.attributes.rowSpan ? parseInt(cell.attributes.rowSpan.value, 10) : 0;
                    if (rowspanNumber > 1) for(var rp = 1; rp < rowspanNumber; rp++){
                        var rowspanIndex = row.rowIndex + rp;
                        adjustStartPoint(rowspanIndex, cellIndex, cell, isThisSelectedCell);
                        setVirtualTablePosition(rowspanIndex, cellIndex, row, cell, true, cellHasColspan, true);
                    }
                     // Add span cols to virtual table.
                    var colspanNumber = cell.attributes.colSpan ? parseInt(cell.attributes.colSpan.value, 10) : 0;
                    if (colspanNumber > 1) for(var cp = 1; cp < colspanNumber; cp++){
                        var cellspanIndex = recoverCellIndex(row.rowIndex, cellIndex + cp);
                        adjustStartPoint(row.rowIndex, cellspanIndex, cell, isThisSelectedCell);
                        setVirtualTablePosition(row.rowIndex, cellspanIndex, row, cell, cellHasRowspan, true, true);
                    }
                }
                /**
   * Process validation and adjust of start point if needed
   *
   * @param {int} rowIndex
   * @param {int} cellIndex
   * @param {object} cell
   * @param {bool} isSelectedCell
   */ function adjustStartPoint(rowIndex, cellIndex, cell, isSelectedCell) {
                    if (rowIndex === _startPoint.rowPos && _startPoint.colPos >= cell.cellIndex && cell.cellIndex <= cellIndex && !isSelectedCell) _startPoint.colPos++;
                }
                /**
   * Create virtual table of cells with all cells, including span cells.
   */ function createVirtualTable() {
                    var rows = domTable.rows;
                    for(var rowIndex = 0; rowIndex < rows.length; rowIndex++){
                        var cells = rows[rowIndex].cells;
                        for(var cellIndex = 0; cellIndex < cells.length; cellIndex++)addCellInfoToVirtual(rows[rowIndex], cells[cellIndex]);
                    }
                }
                /**
   * Get action to be applied on the cell.
   *
   * @param {object} cell virtual table cell to apply action
   */ function getDeleteResultActionToCell(cell) {
                    switch(where){
                        case TableResultAction.where.Column:
                            if (cell.isColSpan) return TableResultAction.resultAction.SubtractSpanCount;
                            break;
                        case TableResultAction.where.Row:
                            if (!cell.isVirtual && cell.isRowSpan) return TableResultAction.resultAction.AddCell;
                            else if (cell.isRowSpan) return TableResultAction.resultAction.SubtractSpanCount;
                            break;
                    }
                    return TableResultAction.resultAction.RemoveCell;
                }
                /**
   * Get action to be applied on the cell.
   *
   * @param {object} cell virtual table cell to apply action
   */ function getAddResultActionToCell(cell) {
                    switch(where){
                        case TableResultAction.where.Column:
                            if (cell.isColSpan) return TableResultAction.resultAction.SumSpanCount;
                            else if (cell.isRowSpan && cell.isVirtual) return TableResultAction.resultAction.Ignore;
                            break;
                        case TableResultAction.where.Row:
                            if (cell.isRowSpan) return TableResultAction.resultAction.SumSpanCount;
                            else if (cell.isColSpan && cell.isVirtual) return TableResultAction.resultAction.Ignore;
                            break;
                    }
                    return TableResultAction.resultAction.AddCell;
                }
                function init() {
                    setStartPoint();
                    createVirtualTable();
                } /// ///////////////////////////////////////////
                // Public functions
                /// ///////////////////////////////////////////
                /**
   * Recover array os what to do in table.
   */ this.getActionList = function() {
                    var fixedRow = where === TableResultAction.where.Row ? _startPoint.rowPos : -1;
                    var fixedCol = where === TableResultAction.where.Column ? _startPoint.colPos : -1;
                    var actualPosition = 0;
                    var canContinue = true;
                    while(canContinue){
                        var rowPosition = fixedRow >= 0 ? fixedRow : actualPosition;
                        var colPosition = fixedCol >= 0 ? fixedCol : actualPosition;
                        var row = _virtualTable[rowPosition];
                        if (!row) {
                            canContinue = false;
                            return _actionCellList;
                        }
                        var cell = row[colPosition];
                        if (!cell) {
                            canContinue = false;
                            return _actionCellList;
                        } // Define action to be applied in this cell
                        var resultAction = TableResultAction.resultAction.Ignore;
                        switch(action){
                            case TableResultAction.requestAction.Add:
                                resultAction = getAddResultActionToCell(cell);
                                break;
                            case TableResultAction.requestAction.Delete:
                                resultAction = getDeleteResultActionToCell(cell);
                                break;
                        }
                        _actionCellList.push(getActionCell(cell, resultAction, rowPosition, colPosition));
                        actualPosition++;
                    }
                    return _actionCellList;
                };
                init();
            };
            /**
*
* Where action occours enum.
*/ TableResultAction.where = {
                "Row": 0,
                "Column": 1
            };
            /**
*
* Requested action to apply enum.
*/ TableResultAction.requestAction = {
                "Add": 0,
                "Delete": 1
            };
            /**
*
* Result action to be executed enum.
*/ TableResultAction.resultAction = {
                "Ignore": 0,
                "SubtractSpanCount": 1,
                "RemoveCell": 2,
                "AddCell": 3,
                "SumSpanCount": 4
            };
            /**
 *
 * @class editing.Table
 *
 * Table
 *
 */ var Table_Table = /*#__PURE__*/ function() {
                function Table() {
                    Table_classCallCheck(this, Table);
                }
                Table_createClass(Table, [
                    {
                        key: "tab",
                        /**
     * handle tab key
     *
     * @param {WrappedRange} rng
     * @param {Boolean} isShift
     */ value: function tab(rng, isShift) {
                            var cell = dom.ancestor(rng.commonAncestor(), dom.isCell);
                            var table = dom.ancestor(cell, dom.isTable);
                            var cells = dom.listDescendant(table, dom.isCell);
                            var nextCell = lists[isShift ? "prev" : "next"](cells, cell);
                            if (nextCell) range.create(nextCell, 0).select();
                        }
                    },
                    {
                        key: "addRow",
                        value: function addRow(rng, position) {
                            var cell = dom.ancestor(rng.commonAncestor(), dom.isCell);
                            var currentTr = external_root_jQuery_commonjs2_jquery_commonjs_jquery_amd_jquery_default()(cell).closest("tr");
                            var trAttributes = this.recoverAttributes(currentTr);
                            var html = external_root_jQuery_commonjs2_jquery_commonjs_jquery_amd_jquery_default()("<tr" + trAttributes + "></tr>");
                            var vTable = new TableResultAction(cell, TableResultAction.where.Row, TableResultAction.requestAction.Add, external_root_jQuery_commonjs2_jquery_commonjs_jquery_amd_jquery_default()(currentTr).closest("table")[0]);
                            var actions = vTable.getActionList();
                            for(var idCell = 0; idCell < actions.length; idCell++){
                                var currentCell = actions[idCell];
                                var tdAttributes = this.recoverAttributes(currentCell.baseCell);
                                switch(currentCell.action){
                                    case TableResultAction.resultAction.AddCell:
                                        html.append("<td" + tdAttributes + ">" + dom.blank + "</td>");
                                        break;
                                    case TableResultAction.resultAction.SumSpanCount:
                                        if (position === "top") {
                                            var baseCellTr = currentCell.baseCell.parent;
                                            var isTopFromRowSpan = (!baseCellTr ? 0 : currentCell.baseCell.closest("tr").rowIndex) <= currentTr[0].rowIndex;
                                            if (isTopFromRowSpan) {
                                                var newTd = external_root_jQuery_commonjs2_jquery_commonjs_jquery_amd_jquery_default()("<div></div>").append(external_root_jQuery_commonjs2_jquery_commonjs_jquery_amd_jquery_default()("<td" + tdAttributes + ">" + dom.blank + "</td>").removeAttr("rowspan")).html();
                                                html.append(newTd);
                                                break;
                                            }
                                        }
                                        var rowspanNumber = parseInt(currentCell.baseCell.rowSpan, 10);
                                        rowspanNumber++;
                                        currentCell.baseCell.setAttribute("rowSpan", rowspanNumber);
                                        break;
                                }
                            }
                            if (position === "top") currentTr.before(html);
                            else {
                                var cellHasRowspan = cell.rowSpan > 1;
                                if (cellHasRowspan) {
                                    var lastTrIndex = currentTr[0].rowIndex + (cell.rowSpan - 2);
                                    external_root_jQuery_commonjs2_jquery_commonjs_jquery_amd_jquery_default()(external_root_jQuery_commonjs2_jquery_commonjs_jquery_amd_jquery_default()(currentTr).parent().find("tr")[lastTrIndex]).after(external_root_jQuery_commonjs2_jquery_commonjs_jquery_amd_jquery_default()(html));
                                    return;
                                }
                                currentTr.after(html);
                            }
                        }
                    },
                    {
                        key: "addCol",
                        value: function addCol(rng, position) {
                            var cell = dom.ancestor(rng.commonAncestor(), dom.isCell);
                            var row = external_root_jQuery_commonjs2_jquery_commonjs_jquery_amd_jquery_default()(cell).closest("tr");
                            var rowsGroup = external_root_jQuery_commonjs2_jquery_commonjs_jquery_amd_jquery_default()(row).siblings();
                            rowsGroup.push(row);
                            var vTable = new TableResultAction(cell, TableResultAction.where.Column, TableResultAction.requestAction.Add, external_root_jQuery_commonjs2_jquery_commonjs_jquery_amd_jquery_default()(row).closest("table")[0]);
                            var actions = vTable.getActionList();
                            for(var actionIndex = 0; actionIndex < actions.length; actionIndex++){
                                var currentCell = actions[actionIndex];
                                var tdAttributes = this.recoverAttributes(currentCell.baseCell);
                                switch(currentCell.action){
                                    case TableResultAction.resultAction.AddCell:
                                        if (position === "right") external_root_jQuery_commonjs2_jquery_commonjs_jquery_amd_jquery_default()(currentCell.baseCell).after("<td" + tdAttributes + ">" + dom.blank + "</td>");
                                        else external_root_jQuery_commonjs2_jquery_commonjs_jquery_amd_jquery_default()(currentCell.baseCell).before("<td" + tdAttributes + ">" + dom.blank + "</td>");
                                        break;
                                    case TableResultAction.resultAction.SumSpanCount:
                                        if (position === "right") {
                                            var colspanNumber = parseInt(currentCell.baseCell.colSpan, 10);
                                            colspanNumber++;
                                            currentCell.baseCell.setAttribute("colSpan", colspanNumber);
                                        } else external_root_jQuery_commonjs2_jquery_commonjs_jquery_amd_jquery_default()(currentCell.baseCell).before("<td" + tdAttributes + ">" + dom.blank + "</td>");
                                        break;
                                }
                            }
                        }
                    },
                    {
                        key: "recoverAttributes",
                        value: function recoverAttributes(el) {
                            var resultStr = "";
                            if (!el) return resultStr;
                            var attrList = el.attributes || [];
                            for(var i = 0; i < attrList.length; i++){
                                if (attrList[i].name.toLowerCase() === "id") continue;
                                if (attrList[i].specified) resultStr += " " + attrList[i].name + "='" + attrList[i].value + "'";
                            }
                            return resultStr;
                        }
                    },
                    {
                        key: "deleteRow",
                        value: function deleteRow(rng) {
                            var cell = dom.ancestor(rng.commonAncestor(), dom.isCell);
                            var row = external_root_jQuery_commonjs2_jquery_commonjs_jquery_amd_jquery_default()(cell).closest("tr");
                            var cellPos = row.children("td, th").index(external_root_jQuery_commonjs2_jquery_commonjs_jquery_amd_jquery_default()(cell));
                            var rowPos = row[0].rowIndex;
                            var vTable = new TableResultAction(cell, TableResultAction.where.Row, TableResultAction.requestAction.Delete, external_root_jQuery_commonjs2_jquery_commonjs_jquery_amd_jquery_default()(row).closest("table")[0]);
                            var actions = vTable.getActionList();
                            for(var actionIndex = 0; actionIndex < actions.length; actionIndex++){
                                if (!actions[actionIndex]) continue;
                                var baseCell = actions[actionIndex].baseCell;
                                var virtualPosition = actions[actionIndex].virtualTable;
                                var hasRowspan = baseCell.rowSpan && baseCell.rowSpan > 1;
                                var rowspanNumber = hasRowspan ? parseInt(baseCell.rowSpan, 10) : 0;
                                switch(actions[actionIndex].action){
                                    case TableResultAction.resultAction.Ignore:
                                        continue;
                                    case TableResultAction.resultAction.AddCell:
                                        var nextRow = row.next("tr")[0];
                                        if (!nextRow) continue;
                                        var cloneRow = row[0].cells[cellPos];
                                        if (hasRowspan) {
                                            if (rowspanNumber > 2) {
                                                rowspanNumber--;
                                                nextRow.insertBefore(cloneRow, nextRow.cells[cellPos]);
                                                nextRow.cells[cellPos].setAttribute("rowSpan", rowspanNumber);
                                                nextRow.cells[cellPos].innerHTML = "";
                                            } else if (rowspanNumber === 2) {
                                                nextRow.insertBefore(cloneRow, nextRow.cells[cellPos]);
                                                nextRow.cells[cellPos].removeAttribute("rowSpan");
                                                nextRow.cells[cellPos].innerHTML = "";
                                            }
                                        }
                                        continue;
                                    case TableResultAction.resultAction.SubtractSpanCount:
                                        if (hasRowspan) {
                                            if (rowspanNumber > 2) {
                                                rowspanNumber--;
                                                baseCell.setAttribute("rowSpan", rowspanNumber);
                                                if (virtualPosition.rowIndex !== rowPos && baseCell.cellIndex === cellPos) baseCell.innerHTML = "";
                                            } else if (rowspanNumber === 2) {
                                                baseCell.removeAttribute("rowSpan");
                                                if (virtualPosition.rowIndex !== rowPos && baseCell.cellIndex === cellPos) baseCell.innerHTML = "";
                                            }
                                        }
                                        continue;
                                    case TableResultAction.resultAction.RemoveCell:
                                        continue;
                                }
                            }
                            row.remove();
                        }
                    },
                    {
                        key: "deleteCol",
                        value: function deleteCol(rng) {
                            var cell = dom.ancestor(rng.commonAncestor(), dom.isCell);
                            var row = external_root_jQuery_commonjs2_jquery_commonjs_jquery_amd_jquery_default()(cell).closest("tr");
                            var cellPos = row.children("td, th").index(external_root_jQuery_commonjs2_jquery_commonjs_jquery_amd_jquery_default()(cell));
                            var vTable = new TableResultAction(cell, TableResultAction.where.Column, TableResultAction.requestAction.Delete, external_root_jQuery_commonjs2_jquery_commonjs_jquery_amd_jquery_default()(row).closest("table")[0]);
                            var actions = vTable.getActionList();
                            for(var actionIndex = 0; actionIndex < actions.length; actionIndex++){
                                if (!actions[actionIndex]) continue;
                                switch(actions[actionIndex].action){
                                    case TableResultAction.resultAction.Ignore:
                                        continue;
                                    case TableResultAction.resultAction.SubtractSpanCount:
                                        var baseCell = actions[actionIndex].baseCell;
                                        var hasColspan = baseCell.colSpan && baseCell.colSpan > 1;
                                        if (hasColspan) {
                                            var colspanNumber = baseCell.colSpan ? parseInt(baseCell.colSpan, 10) : 0;
                                            if (colspanNumber > 2) {
                                                colspanNumber--;
                                                baseCell.setAttribute("colSpan", colspanNumber);
                                                if (baseCell.cellIndex === cellPos) baseCell.innerHTML = "";
                                            } else if (colspanNumber === 2) {
                                                baseCell.removeAttribute("colSpan");
                                                if (baseCell.cellIndex === cellPos) baseCell.innerHTML = "";
                                            }
                                        }
                                        continue;
                                    case TableResultAction.resultAction.RemoveCell:
                                        dom.remove(actions[actionIndex].baseCell, true);
                                        continue;
                                }
                            }
                        }
                    },
                    {
                        key: "createTable",
                        value: function createTable(colCount, rowCount, options) {
                            var tds = [];
                            var tdHTML;
                            for(var idxCol = 0; idxCol < colCount; idxCol++)tds.push("<td>" + dom.blank + "</td>");
                            tdHTML = tds.join("");
                            var trs = [];
                            var trHTML;
                            for(var idxRow = 0; idxRow < rowCount; idxRow++)trs.push("<tr>" + tdHTML + "</tr>");
                            trHTML = trs.join("");
                            var $table = external_root_jQuery_commonjs2_jquery_commonjs_jquery_amd_jquery_default()("<table>" + trHTML + "</table>");
                            if (options && options.tableClassName) $table.addClass(options.tableClassName);
                            return $table[0];
                        }
                    },
                    {
                        key: "deleteTable",
                        value: function deleteTable(rng) {
                            var cell = dom.ancestor(rng.commonAncestor(), dom.isCell);
                            external_root_jQuery_commonjs2_jquery_commonjs_jquery_amd_jquery_default()(cell).closest("table").remove();
                        }
                    }
                ]);
                return Table;
            }();
            // CONCATENATED MODULE: ./src/js/base/module/Editor.js
            function Editor_classCallCheck(instance, Constructor) {
                if (!(instance instanceof Constructor)) throw new TypeError("Cannot call a class as a function");
            }
            function Editor_defineProperties(target, props) {
                for(var i = 0; i < props.length; i++){
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    descriptor.configurable = true;
                    if ("value" in descriptor) descriptor.writable = true;
                    Object.defineProperty(target, descriptor.key, descriptor);
                }
            }
            function Editor_createClass(Constructor, protoProps, staticProps) {
                if (protoProps) Editor_defineProperties(Constructor.prototype, protoProps);
                if (staticProps) Editor_defineProperties(Constructor, staticProps);
                return Constructor;
            }
            var KEY_BOGUS = "bogus";
            /**
 * @class Editor
 */ var Editor_Editor = /*#__PURE__*/ function() {
                function Editor(context) {
                    var _this = this;
                    Editor_classCallCheck(this, Editor);
                    this.context = context;
                    this.$note = context.layoutInfo.note;
                    this.$editor = context.layoutInfo.editor;
                    this.$editable = context.layoutInfo.editable;
                    this.options = context.options;
                    this.lang = this.options.langInfo;
                    this.editable = this.$editable[0];
                    this.lastRange = null;
                    this.snapshot = null;
                    this.style = new Style_Style();
                    this.table = new Table_Table();
                    this.typing = new Typing_Typing(context);
                    this.bullet = new Bullet_Bullet();
                    this.history = new History_History(context);
                    this.context.memo("help.undo", this.lang.help.undo);
                    this.context.memo("help.redo", this.lang.help.redo);
                    this.context.memo("help.tab", this.lang.help.tab);
                    this.context.memo("help.untab", this.lang.help.untab);
                    this.context.memo("help.insertParagraph", this.lang.help.insertParagraph);
                    this.context.memo("help.insertOrderedList", this.lang.help.insertOrderedList);
                    this.context.memo("help.insertUnorderedList", this.lang.help.insertUnorderedList);
                    this.context.memo("help.indent", this.lang.help.indent);
                    this.context.memo("help.outdent", this.lang.help.outdent);
                    this.context.memo("help.formatPara", this.lang.help.formatPara);
                    this.context.memo("help.insertHorizontalRule", this.lang.help.insertHorizontalRule);
                    this.context.memo("help.fontName", this.lang.help.fontName); // native commands(with execCommand), generate function for execCommand
                    var commands = [
                        "bold",
                        "italic",
                        "underline",
                        "strikethrough",
                        "superscript",
                        "subscript",
                        "justifyLeft",
                        "justifyCenter",
                        "justifyRight",
                        "justifyFull",
                        "formatBlock",
                        "removeFormat",
                        "backColor"
                    ];
                    for(var idx = 0, len = commands.length; idx < len; idx++){
                        this[commands[idx]] = function(sCmd) {
                            return function(value) {
                                _this.beforeCommand();
                                document.execCommand(sCmd, false, value);
                                _this.afterCommand(true);
                            };
                        }(commands[idx]);
                        this.context.memo("help." + commands[idx], this.lang.help[commands[idx]]);
                    }
                    this.fontName = this.wrapCommand(function(value) {
                        return _this.fontStyling("font-family", env.validFontName(value));
                    });
                    this.fontSize = this.wrapCommand(function(value) {
                        var unit = _this.currentStyle()["font-size-unit"];
                        return _this.fontStyling("font-size", value + unit);
                    });
                    this.fontSizeUnit = this.wrapCommand(function(value) {
                        var size = _this.currentStyle()["font-size"];
                        return _this.fontStyling("font-size", size + value);
                    });
                    for(var _idx = 1; _idx <= 6; _idx++){
                        this["formatH" + _idx] = function(idx) {
                            return function() {
                                _this.formatBlock("H" + idx);
                            };
                        }(_idx);
                        this.context.memo("help.formatH" + _idx, this.lang.help["formatH" + _idx]);
                    }
                    this.insertParagraph = this.wrapCommand(function() {
                        _this.typing.insertParagraph(_this.editable);
                    });
                    this.insertOrderedList = this.wrapCommand(function() {
                        _this.bullet.insertOrderedList(_this.editable);
                    });
                    this.insertUnorderedList = this.wrapCommand(function() {
                        _this.bullet.insertUnorderedList(_this.editable);
                    });
                    this.indent = this.wrapCommand(function() {
                        _this.bullet.indent(_this.editable);
                    });
                    this.outdent = this.wrapCommand(function() {
                        _this.bullet.outdent(_this.editable);
                    });
                    /**
     * insertNode
     * insert node
     * @param {Node} node
     */ this.insertNode = this.wrapCommand(function(node) {
                        if (_this.isLimited(external_root_jQuery_commonjs2_jquery_commonjs_jquery_amd_jquery_default()(node).text().length)) return;
                        var rng = _this.getLastRange();
                        rng.insertNode(node);
                        _this.setLastRange(range.createFromNodeAfter(node).select());
                    });
                    /**
     * insert text
     * @param {String} text
     */ this.insertText = this.wrapCommand(function(text) {
                        if (_this.isLimited(text.length)) return;
                        var rng = _this.getLastRange();
                        var textNode = rng.insertNode(dom.createText(text));
                        _this.setLastRange(range.create(textNode, dom.nodeLength(textNode)).select());
                    });
                    /**
     * paste HTML
     * @param {String} markup
     */ this.pasteHTML = this.wrapCommand(function(markup) {
                        if (_this.isLimited(markup.length)) return;
                        markup = _this.context.invoke("codeview.purify", markup);
                        var contents = _this.getLastRange().pasteHTML(markup);
                        _this.setLastRange(range.createFromNodeAfter(lists.last(contents)).select());
                    });
                    /**
     * formatBlock
     *
     * @param {String} tagName
     */ this.formatBlock = this.wrapCommand(function(tagName, $target) {
                        var onApplyCustomStyle = _this.options.callbacks.onApplyCustomStyle;
                        if (onApplyCustomStyle) onApplyCustomStyle.call(_this, $target, _this.context, _this.onFormatBlock);
                        else _this.onFormatBlock(tagName, $target);
                    });
                    /**
     * insert horizontal rule
     */ this.insertHorizontalRule = this.wrapCommand(function() {
                        var hrNode = _this.getLastRange().insertNode(dom.create("HR"));
                        if (hrNode.nextSibling) _this.setLastRange(range.create(hrNode.nextSibling, 0).normalize().select());
                    });
                    /**
     * lineHeight
     * @param {String} value
     */ this.lineHeight = this.wrapCommand(function(value) {
                        _this.style.stylePara(_this.getLastRange(), {
                            lineHeight: value
                        });
                    });
                    /**
     * create link (command)
     *
     * @param {Object} linkInfo
     */ this.createLink = this.wrapCommand(function(linkInfo) {
                        var linkUrl = linkInfo.url;
                        var linkText = linkInfo.text;
                        var isNewWindow = linkInfo.isNewWindow;
                        var checkProtocol = linkInfo.checkProtocol;
                        var rng = linkInfo.range || _this.getLastRange();
                        var additionalTextLength = linkText.length - rng.toString().length;
                        if (additionalTextLength > 0 && _this.isLimited(additionalTextLength)) return;
                        var isTextChanged = rng.toString() !== linkText; // handle spaced urls from input
                        if (typeof linkUrl === "string") linkUrl = linkUrl.trim();
                        if (_this.options.onCreateLink) linkUrl = _this.options.onCreateLink(linkUrl);
                        else if (checkProtocol) // if url doesn't have any protocol and not even a relative or a label, use http:// as default
                        linkUrl = /^([A-Za-z][A-Za-z0-9+-.]*\:|#|\/)/.test(linkUrl) ? linkUrl : _this.options.defaultProtocol + linkUrl;
                        var anchors = [];
                        if (isTextChanged) {
                            rng = rng.deleteContents();
                            var anchor = rng.insertNode(external_root_jQuery_commonjs2_jquery_commonjs_jquery_amd_jquery_default()("<A>" + linkText + "</A>")[0]);
                            anchors.push(anchor);
                        } else anchors = _this.style.styleNodes(rng, {
                            nodeName: "A",
                            expandClosestSibling: true,
                            onlyPartialContains: true
                        });
                        external_root_jQuery_commonjs2_jquery_commonjs_jquery_amd_jquery_default.a.each(anchors, function(idx, anchor) {
                            external_root_jQuery_commonjs2_jquery_commonjs_jquery_amd_jquery_default()(anchor).attr("href", linkUrl);
                            if (isNewWindow) external_root_jQuery_commonjs2_jquery_commonjs_jquery_amd_jquery_default()(anchor).attr("target", "_blank");
                            else external_root_jQuery_commonjs2_jquery_commonjs_jquery_amd_jquery_default()(anchor).removeAttr("target");
                        });
                        var startRange = range.createFromNodeBefore(lists.head(anchors));
                        var startPoint = startRange.getStartPoint();
                        var endRange = range.createFromNodeAfter(lists.last(anchors));
                        var endPoint = endRange.getEndPoint();
                        _this.setLastRange(range.create(startPoint.node, startPoint.offset, endPoint.node, endPoint.offset).select());
                    });
                    /**
     * setting color
     *
     * @param {Object} sObjColor  color code
     * @param {String} sObjColor.foreColor foreground color
     * @param {String} sObjColor.backColor background color
     */ this.color = this.wrapCommand(function(colorInfo) {
                        var foreColor = colorInfo.foreColor;
                        var backColor = colorInfo.backColor;
                        if (foreColor) document.execCommand("foreColor", false, foreColor);
                        if (backColor) document.execCommand("backColor", false, backColor);
                    });
                    /**
     * Set foreground color
     *
     * @param {String} colorCode foreground color code
     */ this.foreColor = this.wrapCommand(function(colorInfo) {
                        document.execCommand("foreColor", false, colorInfo);
                    });
                    /**
     * insert Table
     *
     * @param {String} dimension of table (ex : "5x5")
     */ this.insertTable = this.wrapCommand(function(dim) {
                        var dimension = dim.split("x");
                        var rng = _this.getLastRange().deleteContents();
                        rng.insertNode(_this.table.createTable(dimension[0], dimension[1], _this.options));
                    });
                    /**
     * remove media object and Figure Elements if media object is img with Figure.
     */ this.removeMedia = this.wrapCommand(function() {
                        var $target = external_root_jQuery_commonjs2_jquery_commonjs_jquery_amd_jquery_default()(_this.restoreTarget()).parent();
                        if ($target.closest("figure").length) $target.closest("figure").remove();
                        else $target = external_root_jQuery_commonjs2_jquery_commonjs_jquery_amd_jquery_default()(_this.restoreTarget()).detach();
                        _this.context.triggerEvent("media.delete", $target, _this.$editable);
                    });
                    /**
     * float me
     *
     * @param {String} value
     */ this.floatMe = this.wrapCommand(function(value) {
                        var $target = external_root_jQuery_commonjs2_jquery_commonjs_jquery_amd_jquery_default()(_this.restoreTarget());
                        $target.toggleClass("note-float-left", value === "left");
                        $target.toggleClass("note-float-right", value === "right");
                        $target.css("float", value === "none" ? "" : value);
                    });
                    /**
     * resize overlay element
     * @param {String} value
     */ this.resize = this.wrapCommand(function(value) {
                        var $target = external_root_jQuery_commonjs2_jquery_commonjs_jquery_amd_jquery_default()(_this.restoreTarget());
                        value = parseFloat(value);
                        if (value === 0) $target.css("width", "");
                        else $target.css({
                            width: value * 100 + "%",
                            height: ""
                        });
                    });
                }
                Editor_createClass(Editor, [
                    {
                        key: "initialize",
                        value: function initialize() {
                            var _this2 = this;
                            // bind custom events
                            this.$editable.on("keydown", function(event) {
                                if (event.keyCode === core_key.code.ENTER) _this2.context.triggerEvent("enter", event);
                                _this2.context.triggerEvent("keydown", event); // keep a snapshot to limit text on input event
                                _this2.snapshot = _this2.history.makeSnapshot();
                                _this2.hasKeyShortCut = false;
                                if (!event.isDefaultPrevented()) {
                                    if (_this2.options.shortcuts) _this2.hasKeyShortCut = _this2.handleKeyMap(event);
                                    else _this2.preventDefaultEditableShortCuts(event);
                                }
                                if (_this2.isLimited(1, event)) {
                                    var lastRange = _this2.getLastRange();
                                    if (lastRange.eo - lastRange.so === 0) return false;
                                }
                                _this2.setLastRange(); // record undo in the key event except keyMap.
                                if (_this2.options.recordEveryKeystroke) {
                                    if (_this2.hasKeyShortCut === false) _this2.history.recordUndo();
                                }
                            }).on("keyup", function(event) {
                                _this2.setLastRange();
                                _this2.context.triggerEvent("keyup", event);
                            }).on("focus", function(event) {
                                _this2.setLastRange();
                                _this2.context.triggerEvent("focus", event);
                            }).on("blur", function(event) {
                                _this2.context.triggerEvent("blur", event);
                            }).on("mousedown", function(event) {
                                _this2.context.triggerEvent("mousedown", event);
                            }).on("mouseup", function(event) {
                                _this2.setLastRange();
                                _this2.history.recordUndo();
                                _this2.context.triggerEvent("mouseup", event);
                            }).on("scroll", function(event) {
                                _this2.context.triggerEvent("scroll", event);
                            }).on("paste", function(event) {
                                _this2.setLastRange();
                                _this2.context.triggerEvent("paste", event);
                            }).on("input", function() {
                                // To limit composition characters (e.g. Korean)
                                if (_this2.isLimited(0) && _this2.snapshot) _this2.history.applySnapshot(_this2.snapshot);
                            });
                            this.$editable.attr("spellcheck", this.options.spellCheck);
                            this.$editable.attr("autocorrect", this.options.spellCheck);
                            if (this.options.disableGrammar) this.$editable.attr("data-gramm", false);
                             // init content before set event
                            this.$editable.html(dom.html(this.$note) || dom.emptyPara);
                            this.$editable.on(env.inputEventName, func.debounce(function() {
                                _this2.context.triggerEvent("change", _this2.$editable.html(), _this2.$editable);
                            }, 10));
                            this.$editable.on("focusin", function(event) {
                                _this2.context.triggerEvent("focusin", event);
                            }).on("focusout", function(event) {
                                _this2.context.triggerEvent("focusout", event);
                            });
                            if (this.options.airMode) {
                                if (this.options.overrideContextMenu) this.$editor.on("contextmenu", function(event) {
                                    _this2.context.triggerEvent("contextmenu", event);
                                    return false;
                                });
                            } else {
                                if (this.options.width) this.$editor.outerWidth(this.options.width);
                                if (this.options.height) this.$editable.outerHeight(this.options.height);
                                if (this.options.maxHeight) this.$editable.css("max-height", this.options.maxHeight);
                                if (this.options.minHeight) this.$editable.css("min-height", this.options.minHeight);
                            }
                            this.history.recordUndo();
                            this.setLastRange();
                        }
                    },
                    {
                        key: "destroy",
                        value: function destroy() {
                            this.$editable.off();
                        }
                    },
                    {
                        key: "handleKeyMap",
                        value: function handleKeyMap(event) {
                            var keyMap = this.options.keyMap[env.isMac ? "mac" : "pc"];
                            var keys = [];
                            if (event.metaKey) keys.push("CMD");
                            if (event.ctrlKey && !event.altKey) keys.push("CTRL");
                            if (event.shiftKey) keys.push("SHIFT");
                            var keyName = core_key.nameFromCode[event.keyCode];
                            if (keyName) keys.push(keyName);
                            var eventName = keyMap[keys.join("+")];
                            if (keyName === "TAB" && !this.options.tabDisable) this.afterCommand();
                            else if (eventName) {
                                if (this.context.invoke(eventName) !== false) {
                                    event.preventDefault(); // if keyMap action was invoked
                                    return true;
                                }
                            } else if (core_key.isEdit(event.keyCode)) this.afterCommand();
                            return false;
                        }
                    },
                    {
                        key: "preventDefaultEditableShortCuts",
                        value: function preventDefaultEditableShortCuts(event) {
                            // B(Bold, 66) / I(Italic, 73) / U(Underline, 85)
                            if ((event.ctrlKey || event.metaKey) && lists.contains([
                                66,
                                73,
                                85
                            ], event.keyCode)) event.preventDefault();
                        }
                    },
                    {
                        key: "isLimited",
                        value: function isLimited(pad, event) {
                            pad = pad || 0;
                            if (typeof event !== "undefined") {
                                if (core_key.isMove(event.keyCode) || core_key.isNavigation(event.keyCode) || event.ctrlKey || event.metaKey || lists.contains([
                                    core_key.code.BACKSPACE,
                                    core_key.code.DELETE
                                ], event.keyCode)) return false;
                            }
                            if (this.options.maxTextLength > 0) {
                                if (this.$editable.text().length + pad > this.options.maxTextLength) return true;
                            }
                            return false;
                        }
                    },
                    {
                        key: "createRange",
                        value: function createRange() {
                            this.focus();
                            this.setLastRange();
                            return this.getLastRange();
                        }
                    },
                    {
                        key: "setLastRange",
                        value: function setLastRange(rng) {
                            if (rng) this.lastRange = rng;
                            else {
                                this.lastRange = range.create(this.editable);
                                if (external_root_jQuery_commonjs2_jquery_commonjs_jquery_amd_jquery_default()(this.lastRange.sc).closest(".note-editable").length === 0) this.lastRange = range.createFromBodyElement(this.editable);
                            }
                        }
                    },
                    {
                        key: "getLastRange",
                        value: function getLastRange() {
                            if (!this.lastRange) this.setLastRange();
                            return this.lastRange;
                        }
                    },
                    {
                        key: "saveRange",
                        value: function saveRange(thenCollapse) {
                            if (thenCollapse) this.getLastRange().collapse().select();
                        }
                    },
                    {
                        key: "restoreRange",
                        value: function restoreRange() {
                            if (this.lastRange) {
                                this.lastRange.select();
                                this.focus();
                            }
                        }
                    },
                    {
                        key: "saveTarget",
                        value: function saveTarget(node) {
                            this.$editable.data("target", node);
                        }
                    },
                    {
                        key: "clearTarget",
                        value: function clearTarget() {
                            this.$editable.removeData("target");
                        }
                    },
                    {
                        key: "restoreTarget",
                        value: function restoreTarget() {
                            return this.$editable.data("target");
                        }
                    },
                    {
                        key: "currentStyle",
                        value: function currentStyle() {
                            var rng = range.create();
                            if (rng) rng = rng.normalize();
                            return rng ? this.style.current(rng) : this.style.fromNode(this.$editable);
                        }
                    },
                    {
                        key: "styleFromNode",
                        value: function styleFromNode($node) {
                            return this.style.fromNode($node);
                        }
                    },
                    {
                        key: "undo",
                        value: function undo() {
                            this.context.triggerEvent("before.command", this.$editable.html());
                            this.history.undo();
                            this.context.triggerEvent("change", this.$editable.html(), this.$editable);
                        }
                    },
                    {
                        key: "commit",
                        value: function commit() {
                            this.context.triggerEvent("before.command", this.$editable.html());
                            this.history.commit();
                            this.context.triggerEvent("change", this.$editable.html(), this.$editable);
                        }
                    },
                    {
                        key: "redo",
                        value: function redo() {
                            this.context.triggerEvent("before.command", this.$editable.html());
                            this.history.redo();
                            this.context.triggerEvent("change", this.$editable.html(), this.$editable);
                        }
                    },
                    {
                        key: "beforeCommand",
                        value: function beforeCommand() {
                            this.context.triggerEvent("before.command", this.$editable.html()); // Set styleWithCSS before run a command
                            document.execCommand("styleWithCSS", false, this.options.styleWithCSS); // keep focus on editable before command execution
                            this.focus();
                        }
                    },
                    {
                        key: "afterCommand",
                        value: function afterCommand(isPreventTrigger) {
                            this.normalizeContent();
                            this.history.recordUndo();
                            if (!isPreventTrigger) this.context.triggerEvent("change", this.$editable.html(), this.$editable);
                        }
                    },
                    {
                        key: "tab",
                        value: function tab() {
                            var rng = this.getLastRange();
                            if (rng.isCollapsed() && rng.isOnCell()) this.table.tab(rng);
                            else {
                                if (this.options.tabSize === 0) return false;
                                if (!this.isLimited(this.options.tabSize)) {
                                    this.beforeCommand();
                                    this.typing.insertTab(rng, this.options.tabSize);
                                    this.afterCommand();
                                }
                            }
                        }
                    },
                    {
                        key: "untab",
                        value: function untab() {
                            var rng = this.getLastRange();
                            if (rng.isCollapsed() && rng.isOnCell()) this.table.tab(rng, true);
                            else {
                                if (this.options.tabSize === 0) return false;
                            }
                        }
                    },
                    {
                        key: "wrapCommand",
                        value: function wrapCommand(fn) {
                            return function() {
                                this.beforeCommand();
                                fn.apply(this, arguments);
                                this.afterCommand();
                            };
                        }
                    },
                    {
                        key: "insertImage",
                        value: function insertImage(src, param) {
                            var _this3 = this;
                            return createImage(src, param).then(function($image) {
                                _this3.beforeCommand();
                                if (typeof param === "function") param($image);
                                else {
                                    if (typeof param === "string") $image.attr("data-filename", param);
                                    $image.css("width", Math.min(_this3.$editable.width(), $image.width()));
                                }
                                $image.show();
                                _this3.getLastRange().insertNode($image[0]);
                                _this3.setLastRange(range.createFromNodeAfter($image[0]).select());
                                _this3.afterCommand();
                            }).fail(function(e) {
                                _this3.context.triggerEvent("image.upload.error", e);
                            });
                        }
                    },
                    {
                        key: "insertImagesAsDataURL",
                        value: function insertImagesAsDataURL(files) {
                            var _this4 = this;
                            external_root_jQuery_commonjs2_jquery_commonjs_jquery_amd_jquery_default.a.each(files, function(idx, file) {
                                var filename = file.name;
                                if (_this4.options.maximumImageFileSize && _this4.options.maximumImageFileSize < file.size) _this4.context.triggerEvent("image.upload.error", _this4.lang.image.maximumFileSizeError);
                                else readFileAsDataURL(file).then(function(dataURL) {
                                    return _this4.insertImage(dataURL, filename);
                                }).fail(function() {
                                    _this4.context.triggerEvent("image.upload.error");
                                });
                            });
                        }
                    },
                    {
                        key: "insertImagesOrCallback",
                        value: function insertImagesOrCallback(files) {
                            var callbacks = this.options.callbacks; // If onImageUpload set,
                            if (callbacks.onImageUpload) this.context.triggerEvent("image.upload", files); // else insert Image as dataURL
                            else this.insertImagesAsDataURL(files);
                        }
                    },
                    {
                        key: "getSelectedText",
                        value: function getSelectedText() {
                            var rng = this.getLastRange(); // if range on anchor, expand range with anchor
                            if (rng.isOnAnchor()) rng = range.createFromNode(dom.ancestor(rng.sc, dom.isAnchor));
                            return rng.toString();
                        }
                    },
                    {
                        key: "onFormatBlock",
                        value: function onFormatBlock(tagName, $target) {
                            // [workaround] for MSIE, IE need `<`
                            document.execCommand("FormatBlock", false, env.isMSIE ? "<" + tagName + ">" : tagName); // support custom class
                            if ($target && $target.length) {
                                // find the exact element has given tagName
                                if ($target[0].tagName.toUpperCase() !== tagName.toUpperCase()) $target = $target.find(tagName);
                                if ($target && $target.length) {
                                    var className = $target[0].className || "";
                                    if (className) {
                                        var currentRange = this.createRange();
                                        var $parent = external_root_jQuery_commonjs2_jquery_commonjs_jquery_amd_jquery_default()([
                                            currentRange.sc,
                                            currentRange.ec
                                        ]).closest(tagName);
                                        $parent.addClass(className);
                                    }
                                }
                            }
                        }
                    },
                    {
                        key: "formatPara",
                        value: function formatPara() {
                            this.formatBlock("P");
                        }
                    },
                    {
                        key: "fontStyling",
                        value: function fontStyling(target, value) {
                            var rng = this.getLastRange();
                            if (rng !== "") {
                                var spans = this.style.styleNodes(rng);
                                this.$editor.find(".note-status-output").html("");
                                external_root_jQuery_commonjs2_jquery_commonjs_jquery_amd_jquery_default()(spans).css(target, value); // [workaround] added styled bogus span for style
                                //  - also bogus character needed for cursor position
                                if (rng.isCollapsed()) {
                                    var firstSpan = lists.head(spans);
                                    if (firstSpan && !dom.nodeLength(firstSpan)) {
                                        firstSpan.innerHTML = dom.ZERO_WIDTH_NBSP_CHAR;
                                        range.createFromNodeAfter(firstSpan.firstChild).select();
                                        this.setLastRange();
                                        this.$editable.data(KEY_BOGUS, firstSpan);
                                    }
                                }
                            } else {
                                var noteStatusOutput = external_root_jQuery_commonjs2_jquery_commonjs_jquery_amd_jquery_default.a.now();
                                this.$editor.find(".note-status-output").html('<div id="note-status-output-' + noteStatusOutput + '" class="alert alert-info">' + this.lang.output.noSelection + "</div>");
                                setTimeout(function() {
                                    external_root_jQuery_commonjs2_jquery_commonjs_jquery_amd_jquery_default()("#note-status-output-" + noteStatusOutput).remove();
                                }, 5000);
                            }
                        }
                    },
                    {
                        key: "unlink",
                        value: function unlink() {
                            var rng = this.getLastRange();
                            if (rng.isOnAnchor()) {
                                var anchor = dom.ancestor(rng.sc, dom.isAnchor);
                                rng = range.createFromNode(anchor);
                                rng.select();
                                this.setLastRange();
                                this.beforeCommand();
                                document.execCommand("unlink");
                                this.afterCommand();
                            }
                        }
                    },
                    {
                        key: "getLinkInfo",
                        value: function getLinkInfo() {
                            var rng = this.getLastRange().expand(dom.isAnchor); // Get the first anchor on range(for edit).
                            var $anchor = external_root_jQuery_commonjs2_jquery_commonjs_jquery_amd_jquery_default()(lists.head(rng.nodes(dom.isAnchor)));
                            var linkInfo = {
                                range: rng,
                                text: rng.toString(),
                                url: $anchor.length ? $anchor.attr("href") : ""
                            }; // When anchor exists,
                            if ($anchor.length) // Set isNewWindow by checking its target.
                            linkInfo.isNewWindow = $anchor.attr("target") === "_blank";
                            return linkInfo;
                        }
                    },
                    {
                        key: "addRow",
                        value: function addRow(position) {
                            var rng = this.getLastRange(this.$editable);
                            if (rng.isCollapsed() && rng.isOnCell()) {
                                this.beforeCommand();
                                this.table.addRow(rng, position);
                                this.afterCommand();
                            }
                        }
                    },
                    {
                        key: "addCol",
                        value: function addCol(position) {
                            var rng = this.getLastRange(this.$editable);
                            if (rng.isCollapsed() && rng.isOnCell()) {
                                this.beforeCommand();
                                this.table.addCol(rng, position);
                                this.afterCommand();
                            }
                        }
                    },
                    {
                        key: "deleteRow",
                        value: function deleteRow() {
                            var rng = this.getLastRange(this.$editable);
                            if (rng.isCollapsed() && rng.isOnCell()) {
                                this.beforeCommand();
                                this.table.deleteRow(rng);
                                this.afterCommand();
                            }
                        }
                    },
                    {
                        key: "deleteCol",
                        value: function deleteCol() {
                            var rng = this.getLastRange(this.$editable);
                            if (rng.isCollapsed() && rng.isOnCell()) {
                                this.beforeCommand();
                                this.table.deleteCol(rng);
                                this.afterCommand();
                            }
                        }
                    },
                    {
                        key: "deleteTable",
                        value: function deleteTable() {
                            var rng = this.getLastRange(this.$editable);
                            if (rng.isCollapsed() && rng.isOnCell()) {
                                this.beforeCommand();
                                this.table.deleteTable(rng);
                                this.afterCommand();
                            }
                        }
                    },
                    {
                        key: "resizeTo",
                        value: function resizeTo(pos, $target, bKeepRatio) {
                            var imageSize;
                            if (bKeepRatio) {
                                var newRatio = pos.y / pos.x;
                                var ratio = $target.data("ratio");
                                imageSize = {
                                    width: ratio > newRatio ? pos.x : pos.y / ratio,
                                    height: ratio > newRatio ? pos.x * ratio : pos.y
                                };
                            } else imageSize = {
                                width: pos.x,
                                height: pos.y
                            };
                            $target.css(imageSize);
                        }
                    },
                    {
                        key: "hasFocus",
                        value: function hasFocus() {
                            return this.$editable.is(":focus");
                        }
                    },
                    {
                        key: "focus",
                        value: function focus() {
                            // [workaround] Screen will move when page is scolled in IE.
                            //  - do focus when not focused
                            if (!this.hasFocus()) this.$editable.focus();
                        }
                    },
                    {
                        key: "isEmpty",
                        value: function isEmpty() {
                            return dom.isEmpty(this.$editable[0]) || dom.emptyPara === this.$editable.html();
                        }
                    },
                    {
                        key: "empty",
                        value: function empty() {
                            this.context.invoke("code", dom.emptyPara);
                        }
                    },
                    {
                        key: "normalizeContent",
                        value: function normalizeContent() {
                            this.$editable[0].normalize();
                        }
                    }
                ]);
                return Editor;
            }();
            // CONCATENATED MODULE: ./src/js/base/module/Clipboard.js
            function Clipboard_classCallCheck(instance, Constructor) {
                if (!(instance instanceof Constructor)) throw new TypeError("Cannot call a class as a function");
            }
            function Clipboard_defineProperties(target, props) {
                for(var i = 0; i < props.length; i++){
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    descriptor.configurable = true;
                    if ("value" in descriptor) descriptor.writable = true;
                    Object.defineProperty(target, descriptor.key, descriptor);
                }
            }
            function Clipboard_createClass(Constructor, protoProps, staticProps) {
                if (protoProps) Clipboard_defineProperties(Constructor.prototype, protoProps);
                if (staticProps) Clipboard_defineProperties(Constructor, staticProps);
                return Constructor;
            }
            var Clipboard_Clipboard = /*#__PURE__*/ function() {
                function Clipboard(context) {
                    Clipboard_classCallCheck(this, Clipboard);
                    this.context = context;
                    this.$editable = context.layoutInfo.editable;
                }
                Clipboard_createClass(Clipboard, [
                    {
                        key: "initialize",
                        value: function initialize() {
                            this.$editable.on("paste", this.pasteByEvent.bind(this));
                        }
                    },
                    {
                        key: "pasteByEvent",
                        value: function pasteByEvent(event) {
                            var _this = this;
                            var clipboardData = event.originalEvent.clipboardData;
                            if (clipboardData && clipboardData.items && clipboardData.items.length) {
                                var item = clipboardData.items.length > 1 ? clipboardData.items[1] : lists.head(clipboardData.items);
                                if (item.kind === "file" && item.type.indexOf("image/") !== -1) {
                                    // paste img file
                                    this.context.invoke("editor.insertImagesOrCallback", [
                                        item.getAsFile()
                                    ]);
                                    event.preventDefault();
                                } else if (item.kind === "string") // paste text with maxTextLength check
                                {
                                    if (this.context.invoke("editor.isLimited", clipboardData.getData("Text").length)) event.preventDefault();
                                }
                            } else if (window.clipboardData) {
                                // for IE
                                var text = window.clipboardData.getData("text");
                                if (this.context.invoke("editor.isLimited", text.length)) event.preventDefault();
                            } // Call editor.afterCommand after proceeding default event handler
                            setTimeout(function() {
                                _this.context.invoke("editor.afterCommand");
                            }, 10);
                        }
                    }
                ]);
                return Clipboard;
            }();
            // CONCATENATED MODULE: ./src/js/base/module/Dropzone.js
            function Dropzone_classCallCheck(instance, Constructor) {
                if (!(instance instanceof Constructor)) throw new TypeError("Cannot call a class as a function");
            }
            function Dropzone_defineProperties(target, props) {
                for(var i = 0; i < props.length; i++){
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    descriptor.configurable = true;
                    if ("value" in descriptor) descriptor.writable = true;
                    Object.defineProperty(target, descriptor.key, descriptor);
                }
            }
            function Dropzone_createClass(Constructor, protoProps, staticProps) {
                if (protoProps) Dropzone_defineProperties(Constructor.prototype, protoProps);
                if (staticProps) Dropzone_defineProperties(Constructor, staticProps);
                return Constructor;
            }
            var Dropzone_Dropzone = /*#__PURE__*/ function() {
                function Dropzone(context) {
                    Dropzone_classCallCheck(this, Dropzone);
                    this.context = context;
                    this.$eventListener = external_root_jQuery_commonjs2_jquery_commonjs_jquery_amd_jquery_default()(document);
                    this.$editor = context.layoutInfo.editor;
                    this.$editable = context.layoutInfo.editable;
                    this.options = context.options;
                    this.lang = this.options.langInfo;
                    this.documentEventHandlers = {};
                    this.$dropzone = external_root_jQuery_commonjs2_jquery_commonjs_jquery_amd_jquery_default()([
                        '<div class="note-dropzone">',
                        '<div class="note-dropzone-message"/>',
                        "</div>"
                    ].join("")).prependTo(this.$editor);
                }
                /**
   * attach Drag and Drop Events
   */ Dropzone_createClass(Dropzone, [
                    {
                        key: "initialize",
                        value: function initialize() {
                            if (this.options.disableDragAndDrop) {
                                // prevent default drop event
                                this.documentEventHandlers.onDrop = function(e) {
                                    e.preventDefault();
                                }; // do not consider outside of dropzone
                                this.$eventListener = this.$dropzone;
                                this.$eventListener.on("drop", this.documentEventHandlers.onDrop);
                            } else this.attachDragAndDropEvent();
                        }
                    },
                    {
                        key: "attachDragAndDropEvent",
                        value: function attachDragAndDropEvent() {
                            var _this = this;
                            var collection = external_root_jQuery_commonjs2_jquery_commonjs_jquery_amd_jquery_default()();
                            var $dropzoneMessage = this.$dropzone.find(".note-dropzone-message");
                            this.documentEventHandlers.onDragenter = function(e) {
                                var isCodeview = _this.context.invoke("codeview.isActivated");
                                var hasEditorSize = _this.$editor.width() > 0 && _this.$editor.height() > 0;
                                if (!isCodeview && !collection.length && hasEditorSize) {
                                    _this.$editor.addClass("dragover");
                                    _this.$dropzone.width(_this.$editor.width());
                                    _this.$dropzone.height(_this.$editor.height());
                                    $dropzoneMessage.text(_this.lang.image.dragImageHere);
                                }
                                collection = collection.add(e.target);
                            };
                            this.documentEventHandlers.onDragleave = function(e) {
                                collection = collection.not(e.target); // If nodeName is BODY, then just make it over (fix for IE)
                                if (!collection.length || e.target.nodeName === "BODY") {
                                    collection = external_root_jQuery_commonjs2_jquery_commonjs_jquery_amd_jquery_default()();
                                    _this.$editor.removeClass("dragover");
                                }
                            };
                            this.documentEventHandlers.onDrop = function() {
                                collection = external_root_jQuery_commonjs2_jquery_commonjs_jquery_amd_jquery_default()();
                                _this.$editor.removeClass("dragover");
                            }; // show dropzone on dragenter when dragging a object to document
                            // -but only if the editor is visible, i.e. has a positive width and height
                            this.$eventListener.on("dragenter", this.documentEventHandlers.onDragenter).on("dragleave", this.documentEventHandlers.onDragleave).on("drop", this.documentEventHandlers.onDrop); // change dropzone's message on hover.
                            this.$dropzone.on("dragenter", function() {
                                _this.$dropzone.addClass("hover");
                                $dropzoneMessage.text(_this.lang.image.dropImage);
                            }).on("dragleave", function() {
                                _this.$dropzone.removeClass("hover");
                                $dropzoneMessage.text(_this.lang.image.dragImageHere);
                            }); // attach dropImage
                            this.$dropzone.on("drop", function(event) {
                                var dataTransfer = event.originalEvent.dataTransfer; // stop the browser from opening the dropped content
                                event.preventDefault();
                                if (dataTransfer && dataTransfer.files && dataTransfer.files.length) {
                                    _this.$editable.focus();
                                    _this.context.invoke("editor.insertImagesOrCallback", dataTransfer.files);
                                } else external_root_jQuery_commonjs2_jquery_commonjs_jquery_amd_jquery_default.a.each(dataTransfer.types, function(idx, type) {
                                    // skip moz-specific types
                                    if (type.toLowerCase().indexOf("_moz_") > -1) return;
                                    var content = dataTransfer.getData(type);
                                    if (type.toLowerCase().indexOf("text") > -1) _this.context.invoke("editor.pasteHTML", content);
                                    else external_root_jQuery_commonjs2_jquery_commonjs_jquery_amd_jquery_default()(content).each(function(idx, item) {
                                        _this.context.invoke("editor.insertNode", item);
                                    });
                                });
                            }).on("dragover", false); // prevent default dragover event
                        }
                    },
                    {
                        key: "destroy",
                        value: function destroy() {
                            var _this2 = this;
                            Object.keys(this.documentEventHandlers).forEach(function(key) {
                                _this2.$eventListener.off(key.substr(2).toLowerCase(), _this2.documentEventHandlers[key]);
                            });
                            this.documentEventHandlers = {};
                        }
                    }
                ]);
                return Dropzone;
            }();
            // CONCATENATED MODULE: ./src/js/base/module/Codeview.js
            function Codeview_classCallCheck(instance, Constructor) {
                if (!(instance instanceof Constructor)) throw new TypeError("Cannot call a class as a function");
            }
            function Codeview_defineProperties(target, props) {
                for(var i = 0; i < props.length; i++){
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    descriptor.configurable = true;
                    if ("value" in descriptor) descriptor.writable = true;
                    Object.defineProperty(target, descriptor.key, descriptor);
                }
            }
            function Codeview_createClass(Constructor, protoProps, staticProps) {
                if (protoProps) Codeview_defineProperties(Constructor.prototype, protoProps);
                if (staticProps) Codeview_defineProperties(Constructor, staticProps);
                return Constructor;
            }
            var CodeMirror;
            if (env.hasCodeMirror) CodeMirror = window.CodeMirror;
            /**
 * @class Codeview
 */ var Codeview_CodeView = /*#__PURE__*/ function() {
                function CodeView(context) {
                    Codeview_classCallCheck(this, CodeView);
                    this.context = context;
                    this.$editor = context.layoutInfo.editor;
                    this.$editable = context.layoutInfo.editable;
                    this.$codable = context.layoutInfo.codable;
                    this.options = context.options;
                }
                Codeview_createClass(CodeView, [
                    {
                        key: "sync",
                        value: function sync() {
                            var isCodeview = this.isActivated();
                            if (isCodeview && env.hasCodeMirror) this.$codable.data("cmEditor").save();
                        }
                    },
                    {
                        key: "isActivated",
                        value: function isActivated() {
                            return this.$editor.hasClass("codeview");
                        }
                    },
                    {
                        key: "toggle",
                        value: function toggle() {
                            if (this.isActivated()) this.deactivate();
                            else this.activate();
                            this.context.triggerEvent("codeview.toggled");
                        }
                    },
                    {
                        key: "purify",
                        value: function purify(value) {
                            if (this.options.codeviewFilter) {
                                // filter code view regex
                                value = value.replace(this.options.codeviewFilterRegex, ""); // allow specific iframe tag
                                if (this.options.codeviewIframeFilter) {
                                    var whitelist = this.options.codeviewIframeWhitelistSrc.concat(this.options.codeviewIframeWhitelistSrcBase);
                                    value = value.replace(/(<iframe.*?>.*?(?:<\/iframe>)?)/gi, function(tag) {
                                        // remove if src attribute is duplicated
                                        if (/<.+src(?==?('|"|\s)?)[\s\S]+src(?=('|"|\s)?)[^>]*?>/i.test(tag)) return "";
                                        var _iteratorNormalCompletion = true;
                                        var _didIteratorError = false;
                                        var _iteratorError = undefined;
                                        try {
                                            for(var _iterator = whitelist[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
                                                var src = _step.value;
                                                // pass if src is trusted
                                                if (new RegExp('src="(https?:)?//' + src.replace(/[-\/\\^$*+?.()|[\]{}]/g, "\\$&") + '/(.+)"').test(tag)) return tag;
                                            }
                                        } catch (err) {
                                            _didIteratorError = true;
                                            _iteratorError = err;
                                        } finally{
                                            try {
                                                if (!_iteratorNormalCompletion && _iterator["return"] != null) _iterator["return"]();
                                            } finally{
                                                if (_didIteratorError) throw _iteratorError;
                                            }
                                        }
                                        return "";
                                    });
                                }
                            }
                            return value;
                        }
                    },
                    {
                        key: "activate",
                        value: function activate() {
                            var _this = this;
                            this.$codable.val(dom.html(this.$editable, this.options.prettifyHtml));
                            this.$codable.height(this.$editable.height());
                            this.context.invoke("toolbar.updateCodeview", true);
                            this.$editor.addClass("codeview");
                            this.$codable.focus(); // activate CodeMirror as codable
                            if (env.hasCodeMirror) {
                                var cmEditor = CodeMirror.fromTextArea(this.$codable[0], this.options.codemirror); // CodeMirror TernServer
                                if (this.options.codemirror.tern) {
                                    var server = new CodeMirror.TernServer(this.options.codemirror.tern);
                                    cmEditor.ternServer = server;
                                    cmEditor.on("cursorActivity", function(cm) {
                                        server.updateArgHints(cm);
                                    });
                                }
                                cmEditor.on("blur", function(event) {
                                    _this.context.triggerEvent("blur.codeview", cmEditor.getValue(), event);
                                });
                                cmEditor.on("change", function() {
                                    _this.context.triggerEvent("change.codeview", cmEditor.getValue(), cmEditor);
                                }); // CodeMirror hasn't Padding.
                                cmEditor.setSize(null, this.$editable.outerHeight());
                                this.$codable.data("cmEditor", cmEditor);
                            } else {
                                this.$codable.on("blur", function(event) {
                                    _this.context.triggerEvent("blur.codeview", _this.$codable.val(), event);
                                });
                                this.$codable.on("input", function() {
                                    _this.context.triggerEvent("change.codeview", _this.$codable.val(), _this.$codable);
                                });
                            }
                        }
                    },
                    {
                        key: "deactivate",
                        value: function deactivate() {
                            // deactivate CodeMirror as codable
                            if (env.hasCodeMirror) {
                                var cmEditor = this.$codable.data("cmEditor");
                                this.$codable.val(cmEditor.getValue());
                                cmEditor.toTextArea();
                            }
                            var value = this.purify(dom.value(this.$codable, this.options.prettifyHtml) || dom.emptyPara);
                            var isChange = this.$editable.html() !== value;
                            this.$editable.html(value);
                            this.$editable.height(this.options.height ? this.$codable.height() : "auto");
                            this.$editor.removeClass("codeview");
                            if (isChange) this.context.triggerEvent("change", this.$editable.html(), this.$editable);
                            this.$editable.focus();
                            this.context.invoke("toolbar.updateCodeview", false);
                        }
                    },
                    {
                        key: "destroy",
                        value: function destroy() {
                            if (this.isActivated()) this.deactivate();
                        }
                    }
                ]);
                return CodeView;
            }();
            // CONCATENATED MODULE: ./src/js/base/module/Statusbar.js
            function Statusbar_classCallCheck(instance, Constructor) {
                if (!(instance instanceof Constructor)) throw new TypeError("Cannot call a class as a function");
            }
            function Statusbar_defineProperties(target, props) {
                for(var i = 0; i < props.length; i++){
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    descriptor.configurable = true;
                    if ("value" in descriptor) descriptor.writable = true;
                    Object.defineProperty(target, descriptor.key, descriptor);
                }
            }
            function Statusbar_createClass(Constructor, protoProps, staticProps) {
                if (protoProps) Statusbar_defineProperties(Constructor.prototype, protoProps);
                if (staticProps) Statusbar_defineProperties(Constructor, staticProps);
                return Constructor;
            }
            var EDITABLE_PADDING = 24;
            var Statusbar_Statusbar = /*#__PURE__*/ function() {
                function Statusbar(context) {
                    Statusbar_classCallCheck(this, Statusbar);
                    this.$document = external_root_jQuery_commonjs2_jquery_commonjs_jquery_amd_jquery_default()(document);
                    this.$statusbar = context.layoutInfo.statusbar;
                    this.$editable = context.layoutInfo.editable;
                    this.options = context.options;
                }
                Statusbar_createClass(Statusbar, [
                    {
                        key: "initialize",
                        value: function initialize() {
                            var _this = this;
                            if (this.options.airMode || this.options.disableResizeEditor) {
                                this.destroy();
                                return;
                            }
                            this.$statusbar.on("mousedown", function(event) {
                                event.preventDefault();
                                event.stopPropagation();
                                var editableTop = _this.$editable.offset().top - _this.$document.scrollTop();
                                var onMouseMove = function onMouseMove(event) {
                                    var height = event.clientY - (editableTop + EDITABLE_PADDING);
                                    height = _this.options.minheight > 0 ? Math.max(height, _this.options.minheight) : height;
                                    height = _this.options.maxHeight > 0 ? Math.min(height, _this.options.maxHeight) : height;
                                    _this.$editable.height(height);
                                };
                                _this.$document.on("mousemove", onMouseMove).one("mouseup", function() {
                                    _this.$document.off("mousemove", onMouseMove);
                                });
                            });
                        }
                    },
                    {
                        key: "destroy",
                        value: function destroy() {
                            this.$statusbar.off();
                            this.$statusbar.addClass("locked");
                        }
                    }
                ]);
                return Statusbar;
            }();
            // CONCATENATED MODULE: ./src/js/base/module/Fullscreen.js
            function Fullscreen_classCallCheck(instance, Constructor) {
                if (!(instance instanceof Constructor)) throw new TypeError("Cannot call a class as a function");
            }
            function Fullscreen_defineProperties(target, props) {
                for(var i = 0; i < props.length; i++){
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    descriptor.configurable = true;
                    if ("value" in descriptor) descriptor.writable = true;
                    Object.defineProperty(target, descriptor.key, descriptor);
                }
            }
            function Fullscreen_createClass(Constructor, protoProps, staticProps) {
                if (protoProps) Fullscreen_defineProperties(Constructor.prototype, protoProps);
                if (staticProps) Fullscreen_defineProperties(Constructor, staticProps);
                return Constructor;
            }
            var Fullscreen_Fullscreen = /*#__PURE__*/ function() {
                function Fullscreen(context) {
                    var _this = this;
                    Fullscreen_classCallCheck(this, Fullscreen);
                    this.context = context;
                    this.$editor = context.layoutInfo.editor;
                    this.$toolbar = context.layoutInfo.toolbar;
                    this.$editable = context.layoutInfo.editable;
                    this.$codable = context.layoutInfo.codable;
                    this.$window = external_root_jQuery_commonjs2_jquery_commonjs_jquery_amd_jquery_default()(window);
                    this.$scrollbar = external_root_jQuery_commonjs2_jquery_commonjs_jquery_amd_jquery_default()("html, body");
                    this.onResize = function() {
                        _this.resizeTo({
                            h: _this.$window.height() - _this.$toolbar.outerHeight()
                        });
                    };
                }
                Fullscreen_createClass(Fullscreen, [
                    {
                        key: "resizeTo",
                        value: function resizeTo(size) {
                            this.$editable.css("height", size.h);
                            this.$codable.css("height", size.h);
                            if (this.$codable.data("cmeditor")) this.$codable.data("cmeditor").setsize(null, size.h);
                        }
                    },
                    {
                        key: "toggle",
                        value: function toggle() {
                            this.$editor.toggleClass("fullscreen");
                            if (this.isFullscreen()) {
                                this.$editable.data("orgHeight", this.$editable.css("height"));
                                this.$editable.data("orgMaxHeight", this.$editable.css("maxHeight"));
                                this.$editable.css("maxHeight", "");
                                this.$window.on("resize", this.onResize).trigger("resize");
                                this.$scrollbar.css("overflow", "hidden");
                            } else {
                                this.$window.off("resize", this.onResize);
                                this.resizeTo({
                                    h: this.$editable.data("orgHeight")
                                });
                                this.$editable.css("maxHeight", this.$editable.css("orgMaxHeight"));
                                this.$scrollbar.css("overflow", "visible");
                            }
                            this.context.invoke("toolbar.updateFullscreen", this.isFullscreen());
                        }
                    },
                    {
                        key: "isFullscreen",
                        value: function isFullscreen() {
                            return this.$editor.hasClass("fullscreen");
                        }
                    }
                ]);
                return Fullscreen;
            }();
            // CONCATENATED MODULE: ./src/js/base/module/Handle.js
            function Handle_classCallCheck(instance, Constructor) {
                if (!(instance instanceof Constructor)) throw new TypeError("Cannot call a class as a function");
            }
            function Handle_defineProperties(target, props) {
                for(var i = 0; i < props.length; i++){
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    descriptor.configurable = true;
                    if ("value" in descriptor) descriptor.writable = true;
                    Object.defineProperty(target, descriptor.key, descriptor);
                }
            }
            function Handle_createClass(Constructor, protoProps, staticProps) {
                if (protoProps) Handle_defineProperties(Constructor.prototype, protoProps);
                if (staticProps) Handle_defineProperties(Constructor, staticProps);
                return Constructor;
            }
            var Handle_Handle = /*#__PURE__*/ function() {
                function Handle(context) {
                    var _this = this;
                    Handle_classCallCheck(this, Handle);
                    this.context = context;
                    this.$document = external_root_jQuery_commonjs2_jquery_commonjs_jquery_amd_jquery_default()(document);
                    this.$editingArea = context.layoutInfo.editingArea;
                    this.options = context.options;
                    this.lang = this.options.langInfo;
                    this.events = {
                        "summernote.mousedown": function summernoteMousedown(we, e) {
                            if (_this.update(e.target, e)) e.preventDefault();
                        },
                        "summernote.keyup summernote.scroll summernote.change summernote.dialog.shown": function summernoteKeyupSummernoteScrollSummernoteChangeSummernoteDialogShown() {
                            _this.update();
                        },
                        "summernote.disable summernote.blur": function summernoteDisableSummernoteBlur() {
                            _this.hide();
                        },
                        "summernote.codeview.toggled": function summernoteCodeviewToggled() {
                            _this.update();
                        }
                    };
                }
                Handle_createClass(Handle, [
                    {
                        key: "initialize",
                        value: function initialize() {
                            var _this2 = this;
                            this.$handle = external_root_jQuery_commonjs2_jquery_commonjs_jquery_amd_jquery_default()([
                                '<div class="note-handle">',
                                '<div class="note-control-selection">',
                                '<div class="note-control-selection-bg"></div>',
                                '<div class="note-control-holder note-control-nw"></div>',
                                '<div class="note-control-holder note-control-ne"></div>',
                                '<div class="note-control-holder note-control-sw"></div>',
                                '<div class="',
                                this.options.disableResizeImage ? "note-control-holder" : "note-control-sizing",
                                ' note-control-se"></div>',
                                this.options.disableResizeImage ? "" : '<div class="note-control-selection-info"></div>',
                                "</div>",
                                "</div>"
                            ].join("")).prependTo(this.$editingArea);
                            this.$handle.on("mousedown", function(event) {
                                if (dom.isControlSizing(event.target)) {
                                    event.preventDefault();
                                    event.stopPropagation();
                                    var $target = _this2.$handle.find(".note-control-selection").data("target");
                                    var posStart = $target.offset();
                                    var scrollTop = _this2.$document.scrollTop();
                                    var onMouseMove = function onMouseMove(event) {
                                        _this2.context.invoke("editor.resizeTo", {
                                            x: event.clientX - posStart.left,
                                            y: event.clientY - (posStart.top - scrollTop)
                                        }, $target, !event.shiftKey);
                                        _this2.update($target[0], event);
                                    };
                                    _this2.$document.on("mousemove", onMouseMove).one("mouseup", function(e) {
                                        e.preventDefault();
                                        _this2.$document.off("mousemove", onMouseMove);
                                        _this2.context.invoke("editor.afterCommand");
                                    });
                                    if (!$target.data("ratio")) // original ratio.
                                    $target.data("ratio", $target.height() / $target.width());
                                }
                            }); // Listen for scrolling on the handle overlay.
                            this.$handle.on("wheel", function(e) {
                                e.preventDefault();
                                _this2.update();
                            });
                        }
                    },
                    {
                        key: "destroy",
                        value: function destroy() {
                            this.$handle.remove();
                        }
                    },
                    {
                        key: "update",
                        value: function update(target, event) {
                            if (this.context.isDisabled()) return false;
                            var isImage = dom.isImg(target);
                            var $selection = this.$handle.find(".note-control-selection");
                            this.context.invoke("imagePopover.update", target, event);
                            if (isImage) {
                                var $image = external_root_jQuery_commonjs2_jquery_commonjs_jquery_amd_jquery_default()(target);
                                var position = $image.position();
                                var pos = {
                                    left: position.left + parseInt($image.css("marginLeft"), 10),
                                    top: position.top + parseInt($image.css("marginTop"), 10)
                                }; // exclude margin
                                var imageSize = {
                                    w: $image.outerWidth(false),
                                    h: $image.outerHeight(false)
                                };
                                $selection.css({
                                    display: "block",
                                    left: pos.left,
                                    top: pos.top,
                                    width: imageSize.w,
                                    height: imageSize.h
                                }).data("target", $image); // save current image element.
                                var origImageObj = new Image();
                                origImageObj.src = $image.attr("src");
                                var sizingText = imageSize.w + "x" + imageSize.h + " (" + this.lang.image.original + ": " + origImageObj.width + "x" + origImageObj.height + ")";
                                $selection.find(".note-control-selection-info").text(sizingText);
                                this.context.invoke("editor.saveTarget", target);
                            } else this.hide();
                            return isImage;
                        }
                    },
                    {
                        key: "hide",
                        value: function hide() {
                            this.context.invoke("editor.clearTarget");
                            this.$handle.children().hide();
                        }
                    }
                ]);
                return Handle;
            }();
            // CONCATENATED MODULE: ./src/js/base/module/AutoLink.js
            function AutoLink_classCallCheck(instance, Constructor) {
                if (!(instance instanceof Constructor)) throw new TypeError("Cannot call a class as a function");
            }
            function AutoLink_defineProperties(target, props) {
                for(var i = 0; i < props.length; i++){
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    descriptor.configurable = true;
                    if ("value" in descriptor) descriptor.writable = true;
                    Object.defineProperty(target, descriptor.key, descriptor);
                }
            }
            function AutoLink_createClass(Constructor, protoProps, staticProps) {
                if (protoProps) AutoLink_defineProperties(Constructor.prototype, protoProps);
                if (staticProps) AutoLink_defineProperties(Constructor, staticProps);
                return Constructor;
            }
            var defaultScheme = "http://";
            var linkPattern = /^([A-Za-z][A-Za-z0-9+-.]*\:[\/]{2}|tel:|mailto:[A-Z0-9._%+-]+@)?(www\.)?(.+)$/i;
            var AutoLink_AutoLink = /*#__PURE__*/ function() {
                function AutoLink(context) {
                    var _this = this;
                    AutoLink_classCallCheck(this, AutoLink);
                    this.context = context;
                    this.events = {
                        "summernote.keyup": function summernoteKeyup(we, e) {
                            if (!e.isDefaultPrevented()) _this.handleKeyup(e);
                        },
                        "summernote.keydown": function summernoteKeydown(we, e) {
                            _this.handleKeydown(e);
                        }
                    };
                }
                AutoLink_createClass(AutoLink, [
                    {
                        key: "initialize",
                        value: function initialize() {
                            this.lastWordRange = null;
                        }
                    },
                    {
                        key: "destroy",
                        value: function destroy() {
                            this.lastWordRange = null;
                        }
                    },
                    {
                        key: "replace",
                        value: function replace() {
                            if (!this.lastWordRange) return;
                            var keyword = this.lastWordRange.toString();
                            var match = keyword.match(linkPattern);
                            if (match && (match[1] || match[2])) {
                                var link = match[1] ? keyword : defaultScheme + keyword;
                                var urlText = keyword.replace(/^(?:https?:\/\/)?(?:tel?:?)?(?:mailto?:?)?(?:www\.)?/i, "").split("/")[0];
                                var node = external_root_jQuery_commonjs2_jquery_commonjs_jquery_amd_jquery_default()("<a />").html(urlText).attr("href", link)[0];
                                if (this.context.options.linkTargetBlank) external_root_jQuery_commonjs2_jquery_commonjs_jquery_amd_jquery_default()(node).attr("target", "_blank");
                                this.lastWordRange.insertNode(node);
                                this.lastWordRange = null;
                                this.context.invoke("editor.focus");
                            }
                        }
                    },
                    {
                        key: "handleKeydown",
                        value: function handleKeydown(e) {
                            if (lists.contains([
                                core_key.code.ENTER,
                                core_key.code.SPACE
                            ], e.keyCode)) {
                                var wordRange = this.context.invoke("editor.createRange").getWordRange();
                                this.lastWordRange = wordRange;
                            }
                        }
                    },
                    {
                        key: "handleKeyup",
                        value: function handleKeyup(e) {
                            if (lists.contains([
                                core_key.code.ENTER,
                                core_key.code.SPACE
                            ], e.keyCode)) this.replace();
                        }
                    }
                ]);
                return AutoLink;
            }();
            // CONCATENATED MODULE: ./src/js/base/module/AutoSync.js
            function AutoSync_classCallCheck(instance, Constructor) {
                if (!(instance instanceof Constructor)) throw new TypeError("Cannot call a class as a function");
            }
            function AutoSync_defineProperties(target, props) {
                for(var i = 0; i < props.length; i++){
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    descriptor.configurable = true;
                    if ("value" in descriptor) descriptor.writable = true;
                    Object.defineProperty(target, descriptor.key, descriptor);
                }
            }
            function AutoSync_createClass(Constructor, protoProps, staticProps) {
                if (protoProps) AutoSync_defineProperties(Constructor.prototype, protoProps);
                if (staticProps) AutoSync_defineProperties(Constructor, staticProps);
                return Constructor;
            }
            /**
 * textarea auto sync.
 */ var AutoSync_AutoSync = /*#__PURE__*/ function() {
                function AutoSync(context) {
                    var _this = this;
                    AutoSync_classCallCheck(this, AutoSync);
                    this.$note = context.layoutInfo.note;
                    this.events = {
                        "summernote.change": function summernoteChange() {
                            _this.$note.val(context.invoke("code"));
                        }
                    };
                }
                AutoSync_createClass(AutoSync, [
                    {
                        key: "shouldInitialize",
                        value: function shouldInitialize() {
                            return dom.isTextarea(this.$note[0]);
                        }
                    }
                ]);
                return AutoSync;
            }();
            // CONCATENATED MODULE: ./src/js/base/module/AutoReplace.js
            function AutoReplace_classCallCheck(instance, Constructor) {
                if (!(instance instanceof Constructor)) throw new TypeError("Cannot call a class as a function");
            }
            function AutoReplace_defineProperties(target, props) {
                for(var i = 0; i < props.length; i++){
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    descriptor.configurable = true;
                    if ("value" in descriptor) descriptor.writable = true;
                    Object.defineProperty(target, descriptor.key, descriptor);
                }
            }
            function AutoReplace_createClass(Constructor, protoProps, staticProps) {
                if (protoProps) AutoReplace_defineProperties(Constructor.prototype, protoProps);
                if (staticProps) AutoReplace_defineProperties(Constructor, staticProps);
                return Constructor;
            }
            var AutoReplace_AutoReplace = /*#__PURE__*/ function() {
                function AutoReplace(context) {
                    var _this = this;
                    AutoReplace_classCallCheck(this, AutoReplace);
                    this.context = context;
                    this.options = context.options.replace || {};
                    this.keys = [
                        core_key.code.ENTER,
                        core_key.code.SPACE,
                        core_key.code.PERIOD,
                        core_key.code.COMMA,
                        core_key.code.SEMICOLON,
                        core_key.code.SLASH
                    ];
                    this.previousKeydownCode = null;
                    this.events = {
                        "summernote.keyup": function summernoteKeyup(we, e) {
                            if (!e.isDefaultPrevented()) _this.handleKeyup(e);
                        },
                        "summernote.keydown": function summernoteKeydown(we, e) {
                            _this.handleKeydown(e);
                        }
                    };
                }
                AutoReplace_createClass(AutoReplace, [
                    {
                        key: "shouldInitialize",
                        value: function shouldInitialize() {
                            return !!this.options.match;
                        }
                    },
                    {
                        key: "initialize",
                        value: function initialize() {
                            this.lastWord = null;
                        }
                    },
                    {
                        key: "destroy",
                        value: function destroy() {
                            this.lastWord = null;
                        }
                    },
                    {
                        key: "replace",
                        value: function replace() {
                            if (!this.lastWord) return;
                            var self = this;
                            var keyword = this.lastWord.toString();
                            this.options.match(keyword, function(match) {
                                if (match) {
                                    var node = "";
                                    if (typeof match === "string") node = dom.createText(match);
                                    else if (match instanceof jQuery) node = match[0];
                                    else if (match instanceof Node) node = match;
                                    if (!node) return;
                                    self.lastWord.insertNode(node);
                                    self.lastWord = null;
                                    self.context.invoke("editor.focus");
                                }
                            });
                        }
                    },
                    {
                        key: "handleKeydown",
                        value: function handleKeydown(e) {
                            // this forces it to remember the last whole word, even if multiple termination keys are pressed
                            // before the previous key is let go.
                            if (this.previousKeydownCode && lists.contains(this.keys, this.previousKeydownCode)) {
                                this.previousKeydownCode = e.keyCode;
                                return;
                            }
                            if (lists.contains(this.keys, e.keyCode)) {
                                var wordRange = this.context.invoke("editor.createRange").getWordRange();
                                this.lastWord = wordRange;
                            }
                            this.previousKeydownCode = e.keyCode;
                        }
                    },
                    {
                        key: "handleKeyup",
                        value: function handleKeyup(e) {
                            if (lists.contains(this.keys, e.keyCode)) this.replace();
                        }
                    }
                ]);
                return AutoReplace;
            }();
            // CONCATENATED MODULE: ./src/js/base/module/Placeholder.js
            function Placeholder_classCallCheck(instance, Constructor) {
                if (!(instance instanceof Constructor)) throw new TypeError("Cannot call a class as a function");
            }
            function Placeholder_defineProperties(target, props) {
                for(var i = 0; i < props.length; i++){
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    descriptor.configurable = true;
                    if ("value" in descriptor) descriptor.writable = true;
                    Object.defineProperty(target, descriptor.key, descriptor);
                }
            }
            function Placeholder_createClass(Constructor, protoProps, staticProps) {
                if (protoProps) Placeholder_defineProperties(Constructor.prototype, protoProps);
                if (staticProps) Placeholder_defineProperties(Constructor, staticProps);
                return Constructor;
            }
            var Placeholder_Placeholder = /*#__PURE__*/ function() {
                function Placeholder(context) {
                    var _this = this;
                    Placeholder_classCallCheck(this, Placeholder);
                    this.context = context;
                    this.$editingArea = context.layoutInfo.editingArea;
                    this.options = context.options;
                    if (this.options.inheritPlaceholder === true) // get placeholder value from the original element
                    this.options.placeholder = this.context.$note.attr("placeholder") || this.options.placeholder;
                    this.events = {
                        "summernote.init summernote.change": function summernoteInitSummernoteChange() {
                            _this.update();
                        },
                        "summernote.codeview.toggled": function summernoteCodeviewToggled() {
                            _this.update();
                        }
                    };
                }
                Placeholder_createClass(Placeholder, [
                    {
                        key: "shouldInitialize",
                        value: function shouldInitialize() {
                            return !!this.options.placeholder;
                        }
                    },
                    {
                        key: "initialize",
                        value: function initialize() {
                            var _this2 = this;
                            this.$placeholder = external_root_jQuery_commonjs2_jquery_commonjs_jquery_amd_jquery_default()('<div class="note-placeholder">');
                            this.$placeholder.on("click", function() {
                                _this2.context.invoke("focus");
                            }).html(this.options.placeholder).prependTo(this.$editingArea);
                            this.update();
                        }
                    },
                    {
                        key: "destroy",
                        value: function destroy() {
                            this.$placeholder.remove();
                        }
                    },
                    {
                        key: "update",
                        value: function update() {
                            var isShow = !this.context.invoke("codeview.isActivated") && this.context.invoke("editor.isEmpty");
                            this.$placeholder.toggle(isShow);
                        }
                    }
                ]);
                return Placeholder;
            }();
            // CONCATENATED MODULE: ./src/js/base/module/Buttons.js
            function Buttons_classCallCheck(instance, Constructor) {
                if (!(instance instanceof Constructor)) throw new TypeError("Cannot call a class as a function");
            }
            function Buttons_defineProperties(target, props) {
                for(var i = 0; i < props.length; i++){
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    descriptor.configurable = true;
                    if ("value" in descriptor) descriptor.writable = true;
                    Object.defineProperty(target, descriptor.key, descriptor);
                }
            }
            function Buttons_createClass(Constructor, protoProps, staticProps) {
                if (protoProps) Buttons_defineProperties(Constructor.prototype, protoProps);
                if (staticProps) Buttons_defineProperties(Constructor, staticProps);
                return Constructor;
            }
            var Buttons_Buttons = /*#__PURE__*/ function() {
                function Buttons(context) {
                    Buttons_classCallCheck(this, Buttons);
                    this.ui = external_root_jQuery_commonjs2_jquery_commonjs_jquery_amd_jquery_default.a.summernote.ui;
                    this.context = context;
                    this.$toolbar = context.layoutInfo.toolbar;
                    this.options = context.options;
                    this.lang = this.options.langInfo;
                    this.invertedKeyMap = func.invertObject(this.options.keyMap[env.isMac ? "mac" : "pc"]);
                }
                Buttons_createClass(Buttons, [
                    {
                        key: "representShortcut",
                        value: function representShortcut(editorMethod) {
                            var shortcut = this.invertedKeyMap[editorMethod];
                            if (!this.options.shortcuts || !shortcut) return "";
                            if (env.isMac) shortcut = shortcut.replace("CMD", "⌘").replace("SHIFT", "⇧");
                            shortcut = shortcut.replace("BACKSLASH", "\\").replace("SLASH", "/").replace("LEFTBRACKET", "[").replace("RIGHTBRACKET", "]");
                            return " (" + shortcut + ")";
                        }
                    },
                    {
                        key: "button",
                        value: function button(o) {
                            if (!this.options.tooltip && o.tooltip) delete o.tooltip;
                            o.container = this.options.container;
                            return this.ui.button(o);
                        }
                    },
                    {
                        key: "initialize",
                        value: function initialize() {
                            this.addToolbarButtons();
                            this.addImagePopoverButtons();
                            this.addLinkPopoverButtons();
                            this.addTablePopoverButtons();
                            this.fontInstalledMap = {};
                        }
                    },
                    {
                        key: "destroy",
                        value: function destroy() {
                            delete this.fontInstalledMap;
                        }
                    },
                    {
                        key: "isFontInstalled",
                        value: function isFontInstalled(name) {
                            if (!Object.prototype.hasOwnProperty.call(this.fontInstalledMap, name)) this.fontInstalledMap[name] = env.isFontInstalled(name) || lists.contains(this.options.fontNamesIgnoreCheck, name);
                            return this.fontInstalledMap[name];
                        }
                    },
                    {
                        key: "isFontDeservedToAdd",
                        value: function isFontDeservedToAdd(name) {
                            name = name.toLowerCase();
                            return name !== "" && this.isFontInstalled(name) && env.genericFontFamilies.indexOf(name) === -1;
                        }
                    },
                    {
                        key: "colorPalette",
                        value: function colorPalette(className, tooltip, backColor, foreColor) {
                            var _this = this;
                            return this.ui.buttonGroup({
                                className: "note-color " + className,
                                children: [
                                    this.button({
                                        className: "note-current-color-button",
                                        contents: this.ui.icon(this.options.icons.font + " note-recent-color"),
                                        tooltip: tooltip,
                                        click: function click(e) {
                                            var $button = external_root_jQuery_commonjs2_jquery_commonjs_jquery_amd_jquery_default()(e.currentTarget);
                                            if (backColor && foreColor) _this.context.invoke("editor.color", {
                                                backColor: $button.attr("data-backColor"),
                                                foreColor: $button.attr("data-foreColor")
                                            });
                                            else if (backColor) _this.context.invoke("editor.color", {
                                                backColor: $button.attr("data-backColor")
                                            });
                                            else if (foreColor) _this.context.invoke("editor.color", {
                                                foreColor: $button.attr("data-foreColor")
                                            });
                                        },
                                        callback: function callback($button) {
                                            var $recentColor = $button.find(".note-recent-color");
                                            if (backColor) {
                                                $recentColor.css("background-color", _this.options.colorButton.backColor);
                                                $button.attr("data-backColor", _this.options.colorButton.backColor);
                                            }
                                            if (foreColor) {
                                                $recentColor.css("color", _this.options.colorButton.foreColor);
                                                $button.attr("data-foreColor", _this.options.colorButton.foreColor);
                                            } else $recentColor.css("color", "transparent");
                                        }
                                    }),
                                    this.button({
                                        className: "dropdown-toggle",
                                        contents: this.ui.dropdownButtonContents("", this.options),
                                        tooltip: this.lang.color.more,
                                        data: {
                                            toggle: "dropdown"
                                        }
                                    }),
                                    this.ui.dropdown({
                                        items: (backColor ? [
                                            '<div class="note-palette">',
                                            '<div class="note-palette-title">' + this.lang.color.background + "</div>",
                                            "<div>",
                                            '<button type="button" class="note-color-reset btn btn-light" data-event="backColor" data-value="inherit">',
                                            this.lang.color.transparent,
                                            "</button>",
                                            "</div>",
                                            '<div class="note-holder" data-event="backColor"/>',
                                            "<div>",
                                            '<button type="button" class="note-color-select btn btn-light" data-event="openPalette" data-value="backColorPicker">',
                                            this.lang.color.cpSelect,
                                            "</button>",
                                            '<input type="color" id="backColorPicker" class="note-btn note-color-select-btn" value="' + this.options.colorButton.backColor + '" data-event="backColorPalette">',
                                            "</div>",
                                            '<div class="note-holder-custom" id="backColorPalette" data-event="backColor"/>',
                                            "</div>"
                                        ].join("") : "") + (foreColor ? [
                                            '<div class="note-palette">',
                                            '<div class="note-palette-title">' + this.lang.color.foreground + "</div>",
                                            "<div>",
                                            '<button type="button" class="note-color-reset btn btn-light" data-event="removeFormat" data-value="foreColor">',
                                            this.lang.color.resetToDefault,
                                            "</button>",
                                            "</div>",
                                            '<div class="note-holder" data-event="foreColor"/>',
                                            "<div>",
                                            '<button type="button" class="note-color-select btn btn-light" data-event="openPalette" data-value="foreColorPicker">',
                                            this.lang.color.cpSelect,
                                            "</button>",
                                            '<input type="color" id="foreColorPicker" class="note-btn note-color-select-btn" value="' + this.options.colorButton.foreColor + '" data-event="foreColorPalette">',
                                            "</div>",
                                            '<div class="note-holder-custom" id="foreColorPalette" data-event="foreColor"/>',
                                            "</div>"
                                        ].join("") : ""),
                                        callback: function callback($dropdown) {
                                            $dropdown.find(".note-holder").each(function(idx, item) {
                                                var $holder = external_root_jQuery_commonjs2_jquery_commonjs_jquery_amd_jquery_default()(item);
                                                $holder.append(_this.ui.palette({
                                                    colors: _this.options.colors,
                                                    colorsName: _this.options.colorsName,
                                                    eventName: $holder.data("event"),
                                                    container: _this.options.container,
                                                    tooltip: _this.options.tooltip
                                                }).render());
                                            });
                                            /* TODO: do we have to record recent custom colors within cookies? */ var customColors = [
                                                [
                                                    "#FFFFFF",
                                                    "#FFFFFF",
                                                    "#FFFFFF",
                                                    "#FFFFFF",
                                                    "#FFFFFF",
                                                    "#FFFFFF",
                                                    "#FFFFFF",
                                                    "#FFFFFF"
                                                ]
                                            ];
                                            $dropdown.find(".note-holder-custom").each(function(idx, item) {
                                                var $holder = external_root_jQuery_commonjs2_jquery_commonjs_jquery_amd_jquery_default()(item);
                                                $holder.append(_this.ui.palette({
                                                    colors: customColors,
                                                    colorsName: customColors,
                                                    eventName: $holder.data("event"),
                                                    container: _this.options.container,
                                                    tooltip: _this.options.tooltip
                                                }).render());
                                            });
                                            $dropdown.find("input[type=color]").each(function(idx, item) {
                                                external_root_jQuery_commonjs2_jquery_commonjs_jquery_amd_jquery_default()(item).change(function() {
                                                    var $chip = $dropdown.find("#" + external_root_jQuery_commonjs2_jquery_commonjs_jquery_amd_jquery_default()(this).data("event")).find(".note-color-btn").first();
                                                    var color = this.value.toUpperCase();
                                                    $chip.css("background-color", color).attr("aria-label", color).attr("data-value", color).attr("data-original-title", color);
                                                    $chip.click();
                                                });
                                            });
                                        },
                                        click: function click(event) {
                                            event.stopPropagation();
                                            var $parent = external_root_jQuery_commonjs2_jquery_commonjs_jquery_amd_jquery_default()("." + className).find(".note-dropdown-menu");
                                            var $button = external_root_jQuery_commonjs2_jquery_commonjs_jquery_amd_jquery_default()(event.target);
                                            var eventName = $button.data("event");
                                            var value = $button.attr("data-value");
                                            if (eventName === "openPalette") {
                                                var $picker = $parent.find("#" + value);
                                                var $palette = external_root_jQuery_commonjs2_jquery_commonjs_jquery_amd_jquery_default()($parent.find("#" + $picker.data("event")).find(".note-color-row")[0]); // Shift palette chips
                                                var $chip = $palette.find(".note-color-btn").last().detach(); // Set chip attributes
                                                var color = $picker.val();
                                                $chip.css("background-color", color).attr("aria-label", color).attr("data-value", color).attr("data-original-title", color);
                                                $palette.prepend($chip);
                                                $picker.click();
                                            } else {
                                                if (lists.contains([
                                                    "backColor",
                                                    "foreColor"
                                                ], eventName)) {
                                                    var key = eventName === "backColor" ? "background-color" : "color";
                                                    var $color = $button.closest(".note-color").find(".note-recent-color");
                                                    var $currentButton = $button.closest(".note-color").find(".note-current-color-button");
                                                    $color.css(key, value);
                                                    $currentButton.attr("data-" + eventName, value);
                                                }
                                                _this.context.invoke("editor." + eventName, value);
                                            }
                                        }
                                    })
                                ]
                            }).render();
                        }
                    },
                    {
                        key: "addToolbarButtons",
                        value: function addToolbarButtons() {
                            var _this2 = this;
                            this.context.memo("button.style", function() {
                                return _this2.ui.buttonGroup([
                                    _this2.button({
                                        className: "dropdown-toggle",
                                        contents: _this2.ui.dropdownButtonContents(_this2.ui.icon(_this2.options.icons.magic), _this2.options),
                                        tooltip: _this2.lang.style.style,
                                        data: {
                                            toggle: "dropdown"
                                        }
                                    }),
                                    _this2.ui.dropdown({
                                        className: "dropdown-style",
                                        items: _this2.options.styleTags,
                                        title: _this2.lang.style.style,
                                        template: function template(item) {
                                            // TBD: need to be simplified
                                            if (typeof item === "string") item = {
                                                tag: item,
                                                title: Object.prototype.hasOwnProperty.call(_this2.lang.style, item) ? _this2.lang.style[item] : item
                                            };
                                            var tag = item.tag;
                                            var title = item.title;
                                            var style = item.style ? ' style="' + item.style + '" ' : "";
                                            var className = item.className ? ' class="' + item.className + '"' : "";
                                            return "<" + tag + style + className + ">" + title + "</" + tag + ">";
                                        },
                                        click: _this2.context.createInvokeHandler("editor.formatBlock")
                                    })
                                ]).render();
                            });
                            var _loop = function _loop(styleIdx, styleLen) {
                                var item = _this2.options.styleTags[styleIdx];
                                _this2.context.memo("button.style." + item, function() {
                                    return _this2.button({
                                        className: "note-btn-style-" + item,
                                        contents: '<div data-value="' + item + '">' + item.toUpperCase() + "</div>",
                                        tooltip: _this2.lang.style[item],
                                        click: _this2.context.createInvokeHandler("editor.formatBlock")
                                    }).render();
                                });
                            };
                            for(var styleIdx = 0, styleLen = this.options.styleTags.length; styleIdx < styleLen; styleIdx++)_loop(styleIdx, styleLen);
                            this.context.memo("button.bold", function() {
                                return _this2.button({
                                    className: "note-btn-bold",
                                    contents: _this2.ui.icon(_this2.options.icons.bold),
                                    tooltip: _this2.lang.font.bold + _this2.representShortcut("bold"),
                                    click: _this2.context.createInvokeHandlerAndUpdateState("editor.bold")
                                }).render();
                            });
                            this.context.memo("button.italic", function() {
                                return _this2.button({
                                    className: "note-btn-italic",
                                    contents: _this2.ui.icon(_this2.options.icons.italic),
                                    tooltip: _this2.lang.font.italic + _this2.representShortcut("italic"),
                                    click: _this2.context.createInvokeHandlerAndUpdateState("editor.italic")
                                }).render();
                            });
                            this.context.memo("button.underline", function() {
                                return _this2.button({
                                    className: "note-btn-underline",
                                    contents: _this2.ui.icon(_this2.options.icons.underline),
                                    tooltip: _this2.lang.font.underline + _this2.representShortcut("underline"),
                                    click: _this2.context.createInvokeHandlerAndUpdateState("editor.underline")
                                }).render();
                            });
                            this.context.memo("button.clear", function() {
                                return _this2.button({
                                    contents: _this2.ui.icon(_this2.options.icons.eraser),
                                    tooltip: _this2.lang.font.clear + _this2.representShortcut("removeFormat"),
                                    click: _this2.context.createInvokeHandler("editor.removeFormat")
                                }).render();
                            });
                            this.context.memo("button.strikethrough", function() {
                                return _this2.button({
                                    className: "note-btn-strikethrough",
                                    contents: _this2.ui.icon(_this2.options.icons.strikethrough),
                                    tooltip: _this2.lang.font.strikethrough + _this2.representShortcut("strikethrough"),
                                    click: _this2.context.createInvokeHandlerAndUpdateState("editor.strikethrough")
                                }).render();
                            });
                            this.context.memo("button.superscript", function() {
                                return _this2.button({
                                    className: "note-btn-superscript",
                                    contents: _this2.ui.icon(_this2.options.icons.superscript),
                                    tooltip: _this2.lang.font.superscript,
                                    click: _this2.context.createInvokeHandlerAndUpdateState("editor.superscript")
                                }).render();
                            });
                            this.context.memo("button.subscript", function() {
                                return _this2.button({
                                    className: "note-btn-subscript",
                                    contents: _this2.ui.icon(_this2.options.icons.subscript),
                                    tooltip: _this2.lang.font.subscript,
                                    click: _this2.context.createInvokeHandlerAndUpdateState("editor.subscript")
                                }).render();
                            });
                            this.context.memo("button.fontname", function() {
                                var styleInfo = _this2.context.invoke("editor.currentStyle");
                                if (_this2.options.addDefaultFonts) // Add 'default' fonts into the fontnames array if not exist
                                external_root_jQuery_commonjs2_jquery_commonjs_jquery_amd_jquery_default.a.each(styleInfo["font-family"].split(","), function(idx, fontname) {
                                    fontname = fontname.trim().replace(/['"]+/g, "");
                                    if (_this2.isFontDeservedToAdd(fontname)) {
                                        if (_this2.options.fontNames.indexOf(fontname) === -1) _this2.options.fontNames.push(fontname);
                                    }
                                });
                                return _this2.ui.buttonGroup([
                                    _this2.button({
                                        className: "dropdown-toggle",
                                        contents: _this2.ui.dropdownButtonContents('<span class="note-current-fontname"/>', _this2.options),
                                        tooltip: _this2.lang.font.name,
                                        data: {
                                            toggle: "dropdown"
                                        }
                                    }),
                                    _this2.ui.dropdownCheck({
                                        className: "dropdown-fontname",
                                        checkClassName: _this2.options.icons.menuCheck,
                                        items: _this2.options.fontNames.filter(_this2.isFontInstalled.bind(_this2)),
                                        title: _this2.lang.font.name,
                                        template: function template(item) {
                                            return '<span style="font-family: ' + env.validFontName(item) + '">' + item + "</span>";
                                        },
                                        click: _this2.context.createInvokeHandlerAndUpdateState("editor.fontName")
                                    })
                                ]).render();
                            });
                            this.context.memo("button.fontsize", function() {
                                return _this2.ui.buttonGroup([
                                    _this2.button({
                                        className: "dropdown-toggle",
                                        contents: _this2.ui.dropdownButtonContents('<span class="note-current-fontsize"/>', _this2.options),
                                        tooltip: _this2.lang.font.size,
                                        data: {
                                            toggle: "dropdown"
                                        }
                                    }),
                                    _this2.ui.dropdownCheck({
                                        className: "dropdown-fontsize",
                                        checkClassName: _this2.options.icons.menuCheck,
                                        items: _this2.options.fontSizes,
                                        title: _this2.lang.font.size,
                                        click: _this2.context.createInvokeHandlerAndUpdateState("editor.fontSize")
                                    })
                                ]).render();
                            });
                            this.context.memo("button.fontsizeunit", function() {
                                return _this2.ui.buttonGroup([
                                    _this2.button({
                                        className: "dropdown-toggle",
                                        contents: _this2.ui.dropdownButtonContents('<span class="note-current-fontsizeunit"/>', _this2.options),
                                        tooltip: _this2.lang.font.sizeunit,
                                        data: {
                                            toggle: "dropdown"
                                        }
                                    }),
                                    _this2.ui.dropdownCheck({
                                        className: "dropdown-fontsizeunit",
                                        checkClassName: _this2.options.icons.menuCheck,
                                        items: _this2.options.fontSizeUnits,
                                        title: _this2.lang.font.sizeunit,
                                        click: _this2.context.createInvokeHandlerAndUpdateState("editor.fontSizeUnit")
                                    })
                                ]).render();
                            });
                            this.context.memo("button.color", function() {
                                return _this2.colorPalette("note-color-all", _this2.lang.color.recent, true, true);
                            });
                            this.context.memo("button.forecolor", function() {
                                return _this2.colorPalette("note-color-fore", _this2.lang.color.foreground, false, true);
                            });
                            this.context.memo("button.backcolor", function() {
                                return _this2.colorPalette("note-color-back", _this2.lang.color.background, true, false);
                            });
                            this.context.memo("button.ul", function() {
                                return _this2.button({
                                    contents: _this2.ui.icon(_this2.options.icons.unorderedlist),
                                    tooltip: _this2.lang.lists.unordered + _this2.representShortcut("insertUnorderedList"),
                                    click: _this2.context.createInvokeHandler("editor.insertUnorderedList")
                                }).render();
                            });
                            this.context.memo("button.ol", function() {
                                return _this2.button({
                                    contents: _this2.ui.icon(_this2.options.icons.orderedlist),
                                    tooltip: _this2.lang.lists.ordered + _this2.representShortcut("insertOrderedList"),
                                    click: _this2.context.createInvokeHandler("editor.insertOrderedList")
                                }).render();
                            });
                            var justifyLeft = this.button({
                                contents: this.ui.icon(this.options.icons.alignLeft),
                                tooltip: this.lang.paragraph.left + this.representShortcut("justifyLeft"),
                                click: this.context.createInvokeHandler("editor.justifyLeft")
                            });
                            var justifyCenter = this.button({
                                contents: this.ui.icon(this.options.icons.alignCenter),
                                tooltip: this.lang.paragraph.center + this.representShortcut("justifyCenter"),
                                click: this.context.createInvokeHandler("editor.justifyCenter")
                            });
                            var justifyRight = this.button({
                                contents: this.ui.icon(this.options.icons.alignRight),
                                tooltip: this.lang.paragraph.right + this.representShortcut("justifyRight"),
                                click: this.context.createInvokeHandler("editor.justifyRight")
                            });
                            var justifyFull = this.button({
                                contents: this.ui.icon(this.options.icons.alignJustify),
                                tooltip: this.lang.paragraph.justify + this.representShortcut("justifyFull"),
                                click: this.context.createInvokeHandler("editor.justifyFull")
                            });
                            var outdent = this.button({
                                contents: this.ui.icon(this.options.icons.outdent),
                                tooltip: this.lang.paragraph.outdent + this.representShortcut("outdent"),
                                click: this.context.createInvokeHandler("editor.outdent")
                            });
                            var indent = this.button({
                                contents: this.ui.icon(this.options.icons.indent),
                                tooltip: this.lang.paragraph.indent + this.representShortcut("indent"),
                                click: this.context.createInvokeHandler("editor.indent")
                            });
                            this.context.memo("button.justifyLeft", func.invoke(justifyLeft, "render"));
                            this.context.memo("button.justifyCenter", func.invoke(justifyCenter, "render"));
                            this.context.memo("button.justifyRight", func.invoke(justifyRight, "render"));
                            this.context.memo("button.justifyFull", func.invoke(justifyFull, "render"));
                            this.context.memo("button.outdent", func.invoke(outdent, "render"));
                            this.context.memo("button.indent", func.invoke(indent, "render"));
                            this.context.memo("button.paragraph", function() {
                                return _this2.ui.buttonGroup([
                                    _this2.button({
                                        className: "dropdown-toggle",
                                        contents: _this2.ui.dropdownButtonContents(_this2.ui.icon(_this2.options.icons.alignLeft), _this2.options),
                                        tooltip: _this2.lang.paragraph.paragraph,
                                        data: {
                                            toggle: "dropdown"
                                        }
                                    }),
                                    _this2.ui.dropdown([
                                        _this2.ui.buttonGroup({
                                            className: "note-align",
                                            children: [
                                                justifyLeft,
                                                justifyCenter,
                                                justifyRight,
                                                justifyFull
                                            ]
                                        }),
                                        _this2.ui.buttonGroup({
                                            className: "note-list",
                                            children: [
                                                outdent,
                                                indent
                                            ]
                                        })
                                    ])
                                ]).render();
                            });
                            this.context.memo("button.height", function() {
                                return _this2.ui.buttonGroup([
                                    _this2.button({
                                        className: "dropdown-toggle",
                                        contents: _this2.ui.dropdownButtonContents(_this2.ui.icon(_this2.options.icons.textHeight), _this2.options),
                                        tooltip: _this2.lang.font.height,
                                        data: {
                                            toggle: "dropdown"
                                        }
                                    }),
                                    _this2.ui.dropdownCheck({
                                        items: _this2.options.lineHeights,
                                        checkClassName: _this2.options.icons.menuCheck,
                                        className: "dropdown-line-height",
                                        title: _this2.lang.font.height,
                                        click: _this2.context.createInvokeHandler("editor.lineHeight")
                                    })
                                ]).render();
                            });
                            this.context.memo("button.table", function() {
                                return _this2.ui.buttonGroup([
                                    _this2.button({
                                        className: "dropdown-toggle",
                                        contents: _this2.ui.dropdownButtonContents(_this2.ui.icon(_this2.options.icons.table), _this2.options),
                                        tooltip: _this2.lang.table.table,
                                        data: {
                                            toggle: "dropdown"
                                        }
                                    }),
                                    _this2.ui.dropdown({
                                        title: _this2.lang.table.table,
                                        className: "note-table",
                                        items: [
                                            '<div class="note-dimension-picker">',
                                            '<div class="note-dimension-picker-mousecatcher" data-event="insertTable" data-value="1x1"/>',
                                            '<div class="note-dimension-picker-highlighted"/>',
                                            '<div class="note-dimension-picker-unhighlighted"/>',
                                            "</div>",
                                            '<div class="note-dimension-display">1 x 1</div>'
                                        ].join("")
                                    })
                                ], {
                                    callback: function callback($node) {
                                        var $catcher = $node.find(".note-dimension-picker-mousecatcher");
                                        $catcher.css({
                                            width: _this2.options.insertTableMaxSize.col + "em",
                                            height: _this2.options.insertTableMaxSize.row + "em"
                                        }).mousedown(_this2.context.createInvokeHandler("editor.insertTable")).on("mousemove", _this2.tableMoveHandler.bind(_this2));
                                    }
                                }).render();
                            });
                            this.context.memo("button.link", function() {
                                return _this2.button({
                                    contents: _this2.ui.icon(_this2.options.icons.link),
                                    tooltip: _this2.lang.link.link + _this2.representShortcut("linkDialog.show"),
                                    click: _this2.context.createInvokeHandler("linkDialog.show")
                                }).render();
                            });
                            this.context.memo("button.picture", function() {
                                return _this2.button({
                                    contents: _this2.ui.icon(_this2.options.icons.picture),
                                    tooltip: _this2.lang.image.image,
                                    click: _this2.context.createInvokeHandler("imageDialog.show")
                                }).render();
                            });
                            this.context.memo("button.video", function() {
                                return _this2.button({
                                    contents: _this2.ui.icon(_this2.options.icons.video),
                                    tooltip: _this2.lang.video.video,
                                    click: _this2.context.createInvokeHandler("videoDialog.show")
                                }).render();
                            });
                            this.context.memo("button.hr", function() {
                                return _this2.button({
                                    contents: _this2.ui.icon(_this2.options.icons.minus),
                                    tooltip: _this2.lang.hr.insert + _this2.representShortcut("insertHorizontalRule"),
                                    click: _this2.context.createInvokeHandler("editor.insertHorizontalRule")
                                }).render();
                            });
                            this.context.memo("button.fullscreen", function() {
                                return _this2.button({
                                    className: "btn-fullscreen",
                                    contents: _this2.ui.icon(_this2.options.icons.arrowsAlt),
                                    tooltip: _this2.lang.options.fullscreen,
                                    click: _this2.context.createInvokeHandler("fullscreen.toggle")
                                }).render();
                            });
                            this.context.memo("button.codeview", function() {
                                return _this2.button({
                                    className: "btn-codeview",
                                    contents: _this2.ui.icon(_this2.options.icons.code),
                                    tooltip: _this2.lang.options.codeview,
                                    click: _this2.context.createInvokeHandler("codeview.toggle")
                                }).render();
                            });
                            this.context.memo("button.redo", function() {
                                return _this2.button({
                                    contents: _this2.ui.icon(_this2.options.icons.redo),
                                    tooltip: _this2.lang.history.redo + _this2.representShortcut("redo"),
                                    click: _this2.context.createInvokeHandler("editor.redo")
                                }).render();
                            });
                            this.context.memo("button.undo", function() {
                                return _this2.button({
                                    contents: _this2.ui.icon(_this2.options.icons.undo),
                                    tooltip: _this2.lang.history.undo + _this2.representShortcut("undo"),
                                    click: _this2.context.createInvokeHandler("editor.undo")
                                }).render();
                            });
                            this.context.memo("button.help", function() {
                                return _this2.button({
                                    contents: _this2.ui.icon(_this2.options.icons.question),
                                    tooltip: _this2.lang.options.help,
                                    click: _this2.context.createInvokeHandler("helpDialog.show")
                                }).render();
                            });
                        }
                    },
                    {
                        key: "addImagePopoverButtons",
                        value: function addImagePopoverButtons() {
                            var _this3 = this;
                            // Image Size Buttons
                            this.context.memo("button.resizeFull", function() {
                                return _this3.button({
                                    contents: '<span class="note-fontsize-10">100%</span>',
                                    tooltip: _this3.lang.image.resizeFull,
                                    click: _this3.context.createInvokeHandler("editor.resize", "1")
                                }).render();
                            });
                            this.context.memo("button.resizeHalf", function() {
                                return _this3.button({
                                    contents: '<span class="note-fontsize-10">50%</span>',
                                    tooltip: _this3.lang.image.resizeHalf,
                                    click: _this3.context.createInvokeHandler("editor.resize", "0.5")
                                }).render();
                            });
                            this.context.memo("button.resizeQuarter", function() {
                                return _this3.button({
                                    contents: '<span class="note-fontsize-10">25%</span>',
                                    tooltip: _this3.lang.image.resizeQuarter,
                                    click: _this3.context.createInvokeHandler("editor.resize", "0.25")
                                }).render();
                            });
                            this.context.memo("button.resizeNone", function() {
                                return _this3.button({
                                    contents: _this3.ui.icon(_this3.options.icons.rollback),
                                    tooltip: _this3.lang.image.resizeNone,
                                    click: _this3.context.createInvokeHandler("editor.resize", "0")
                                }).render();
                            }); // Float Buttons
                            this.context.memo("button.floatLeft", function() {
                                return _this3.button({
                                    contents: _this3.ui.icon(_this3.options.icons.floatLeft),
                                    tooltip: _this3.lang.image.floatLeft,
                                    click: _this3.context.createInvokeHandler("editor.floatMe", "left")
                                }).render();
                            });
                            this.context.memo("button.floatRight", function() {
                                return _this3.button({
                                    contents: _this3.ui.icon(_this3.options.icons.floatRight),
                                    tooltip: _this3.lang.image.floatRight,
                                    click: _this3.context.createInvokeHandler("editor.floatMe", "right")
                                }).render();
                            });
                            this.context.memo("button.floatNone", function() {
                                return _this3.button({
                                    contents: _this3.ui.icon(_this3.options.icons.rollback),
                                    tooltip: _this3.lang.image.floatNone,
                                    click: _this3.context.createInvokeHandler("editor.floatMe", "none")
                                }).render();
                            }); // Remove Buttons
                            this.context.memo("button.removeMedia", function() {
                                return _this3.button({
                                    contents: _this3.ui.icon(_this3.options.icons.trash),
                                    tooltip: _this3.lang.image.remove,
                                    click: _this3.context.createInvokeHandler("editor.removeMedia")
                                }).render();
                            });
                        }
                    },
                    {
                        key: "addLinkPopoverButtons",
                        value: function addLinkPopoverButtons() {
                            var _this4 = this;
                            this.context.memo("button.linkDialogShow", function() {
                                return _this4.button({
                                    contents: _this4.ui.icon(_this4.options.icons.link),
                                    tooltip: _this4.lang.link.edit,
                                    click: _this4.context.createInvokeHandler("linkDialog.show")
                                }).render();
                            });
                            this.context.memo("button.unlink", function() {
                                return _this4.button({
                                    contents: _this4.ui.icon(_this4.options.icons.unlink),
                                    tooltip: _this4.lang.link.unlink,
                                    click: _this4.context.createInvokeHandler("editor.unlink")
                                }).render();
                            });
                        }
                    },
                    {
                        key: "addTablePopoverButtons",
                        value: function addTablePopoverButtons() {
                            var _this5 = this;
                            this.context.memo("button.addRowUp", function() {
                                return _this5.button({
                                    className: "btn-md",
                                    contents: _this5.ui.icon(_this5.options.icons.rowAbove),
                                    tooltip: _this5.lang.table.addRowAbove,
                                    click: _this5.context.createInvokeHandler("editor.addRow", "top")
                                }).render();
                            });
                            this.context.memo("button.addRowDown", function() {
                                return _this5.button({
                                    className: "btn-md",
                                    contents: _this5.ui.icon(_this5.options.icons.rowBelow),
                                    tooltip: _this5.lang.table.addRowBelow,
                                    click: _this5.context.createInvokeHandler("editor.addRow", "bottom")
                                }).render();
                            });
                            this.context.memo("button.addColLeft", function() {
                                return _this5.button({
                                    className: "btn-md",
                                    contents: _this5.ui.icon(_this5.options.icons.colBefore),
                                    tooltip: _this5.lang.table.addColLeft,
                                    click: _this5.context.createInvokeHandler("editor.addCol", "left")
                                }).render();
                            });
                            this.context.memo("button.addColRight", function() {
                                return _this5.button({
                                    className: "btn-md",
                                    contents: _this5.ui.icon(_this5.options.icons.colAfter),
                                    tooltip: _this5.lang.table.addColRight,
                                    click: _this5.context.createInvokeHandler("editor.addCol", "right")
                                }).render();
                            });
                            this.context.memo("button.deleteRow", function() {
                                return _this5.button({
                                    className: "btn-md",
                                    contents: _this5.ui.icon(_this5.options.icons.rowRemove),
                                    tooltip: _this5.lang.table.delRow,
                                    click: _this5.context.createInvokeHandler("editor.deleteRow")
                                }).render();
                            });
                            this.context.memo("button.deleteCol", function() {
                                return _this5.button({
                                    className: "btn-md",
                                    contents: _this5.ui.icon(_this5.options.icons.colRemove),
                                    tooltip: _this5.lang.table.delCol,
                                    click: _this5.context.createInvokeHandler("editor.deleteCol")
                                }).render();
                            });
                            this.context.memo("button.deleteTable", function() {
                                return _this5.button({
                                    className: "btn-md",
                                    contents: _this5.ui.icon(_this5.options.icons.trash),
                                    tooltip: _this5.lang.table.delTable,
                                    click: _this5.context.createInvokeHandler("editor.deleteTable")
                                }).render();
                            });
                        }
                    },
                    {
                        key: "build",
                        value: function build($container, groups) {
                            for(var groupIdx = 0, groupLen = groups.length; groupIdx < groupLen; groupIdx++){
                                var group = groups[groupIdx];
                                var groupName = Array.isArray(group) ? group[0] : group;
                                var buttons = Array.isArray(group) ? group.length === 1 ? [
                                    group[0]
                                ] : group[1] : [
                                    group
                                ];
                                var $group = this.ui.buttonGroup({
                                    className: "note-" + groupName
                                }).render();
                                for(var idx = 0, len = buttons.length; idx < len; idx++){
                                    var btn = this.context.memo("button." + buttons[idx]);
                                    if (btn) $group.append(typeof btn === "function" ? btn(this.context) : btn);
                                }
                                $group.appendTo($container);
                            }
                        }
                    },
                    {
                        key: "updateCurrentStyle",
                        value: function updateCurrentStyle($container) {
                            var _this6 = this;
                            var $cont = $container || this.$toolbar;
                            var styleInfo = this.context.invoke("editor.currentStyle");
                            this.updateBtnStates($cont, {
                                ".note-btn-bold": function noteBtnBold() {
                                    return styleInfo["font-bold"] === "bold";
                                },
                                ".note-btn-italic": function noteBtnItalic() {
                                    return styleInfo["font-italic"] === "italic";
                                },
                                ".note-btn-underline": function noteBtnUnderline() {
                                    return styleInfo["font-underline"] === "underline";
                                },
                                ".note-btn-subscript": function noteBtnSubscript() {
                                    return styleInfo["font-subscript"] === "subscript";
                                },
                                ".note-btn-superscript": function noteBtnSuperscript() {
                                    return styleInfo["font-superscript"] === "superscript";
                                },
                                ".note-btn-strikethrough": function noteBtnStrikethrough() {
                                    return styleInfo["font-strikethrough"] === "strikethrough";
                                }
                            });
                            if (styleInfo["font-family"]) {
                                var fontNames = styleInfo["font-family"].split(",").map(function(name) {
                                    return name.replace(/[\'\"]/g, "").replace(/\s+$/, "").replace(/^\s+/, "");
                                });
                                var fontName = lists.find(fontNames, this.isFontInstalled.bind(this));
                                $cont.find(".dropdown-fontname a").each(function(idx, item) {
                                    var $item = external_root_jQuery_commonjs2_jquery_commonjs_jquery_amd_jquery_default()(item); // always compare string to avoid creating another func.
                                    var isChecked = $item.data("value") + "" === fontName + "";
                                    $item.toggleClass("checked", isChecked);
                                });
                                $cont.find(".note-current-fontname").text(fontName).css("font-family", fontName);
                            }
                            if (styleInfo["font-size"]) {
                                var fontSize = styleInfo["font-size"];
                                $cont.find(".dropdown-fontsize a").each(function(idx, item) {
                                    var $item = external_root_jQuery_commonjs2_jquery_commonjs_jquery_amd_jquery_default()(item); // always compare with string to avoid creating another func.
                                    var isChecked = $item.data("value") + "" === fontSize + "";
                                    $item.toggleClass("checked", isChecked);
                                });
                                $cont.find(".note-current-fontsize").text(fontSize);
                                var fontSizeUnit = styleInfo["font-size-unit"];
                                $cont.find(".dropdown-fontsizeunit a").each(function(idx, item) {
                                    var $item = external_root_jQuery_commonjs2_jquery_commonjs_jquery_amd_jquery_default()(item);
                                    var isChecked = $item.data("value") + "" === fontSizeUnit + "";
                                    $item.toggleClass("checked", isChecked);
                                });
                                $cont.find(".note-current-fontsizeunit").text(fontSizeUnit);
                            }
                            if (styleInfo["line-height"]) {
                                var lineHeight = styleInfo["line-height"];
                                $cont.find(".dropdown-line-height li a").each(function(idx, item) {
                                    // always compare with string to avoid creating another func.
                                    var isChecked = external_root_jQuery_commonjs2_jquery_commonjs_jquery_amd_jquery_default()(item).data("value") + "" === lineHeight + "";
                                    _this6.className = isChecked ? "checked" : "";
                                });
                            }
                        }
                    },
                    {
                        key: "updateBtnStates",
                        value: function updateBtnStates($container, infos) {
                            var _this7 = this;
                            external_root_jQuery_commonjs2_jquery_commonjs_jquery_amd_jquery_default.a.each(infos, function(selector, pred) {
                                _this7.ui.toggleBtnActive($container.find(selector), pred());
                            });
                        }
                    },
                    {
                        key: "tableMoveHandler",
                        value: function tableMoveHandler(event) {
                            var PX_PER_EM = 18;
                            var $picker = external_root_jQuery_commonjs2_jquery_commonjs_jquery_amd_jquery_default()(event.target.parentNode); // target is mousecatcher
                            var $dimensionDisplay = $picker.next();
                            var $catcher = $picker.find(".note-dimension-picker-mousecatcher");
                            var $highlighted = $picker.find(".note-dimension-picker-highlighted");
                            var $unhighlighted = $picker.find(".note-dimension-picker-unhighlighted");
                            var posOffset; // HTML5 with jQuery - e.offsetX is undefined in Firefox
                            if (event.offsetX === undefined) {
                                var posCatcher = external_root_jQuery_commonjs2_jquery_commonjs_jquery_amd_jquery_default()(event.target).offset();
                                posOffset = {
                                    x: event.pageX - posCatcher.left,
                                    y: event.pageY - posCatcher.top
                                };
                            } else posOffset = {
                                x: event.offsetX,
                                y: event.offsetY
                            };
                            var dim = {
                                c: Math.ceil(posOffset.x / PX_PER_EM) || 1,
                                r: Math.ceil(posOffset.y / PX_PER_EM) || 1
                            };
                            $highlighted.css({
                                width: dim.c + "em",
                                height: dim.r + "em"
                            });
                            $catcher.data("value", dim.c + "x" + dim.r);
                            if (dim.c > 3 && dim.c < this.options.insertTableMaxSize.col) $unhighlighted.css({
                                width: dim.c + 1 + "em"
                            });
                            if (dim.r > 3 && dim.r < this.options.insertTableMaxSize.row) $unhighlighted.css({
                                height: dim.r + 1 + "em"
                            });
                            $dimensionDisplay.html(dim.c + " x " + dim.r);
                        }
                    }
                ]);
                return Buttons;
            }();
            // CONCATENATED MODULE: ./src/js/base/module/Toolbar.js
            function Toolbar_classCallCheck(instance, Constructor) {
                if (!(instance instanceof Constructor)) throw new TypeError("Cannot call a class as a function");
            }
            function Toolbar_defineProperties(target, props) {
                for(var i = 0; i < props.length; i++){
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    descriptor.configurable = true;
                    if ("value" in descriptor) descriptor.writable = true;
                    Object.defineProperty(target, descriptor.key, descriptor);
                }
            }
            function Toolbar_createClass(Constructor, protoProps, staticProps) {
                if (protoProps) Toolbar_defineProperties(Constructor.prototype, protoProps);
                if (staticProps) Toolbar_defineProperties(Constructor, staticProps);
                return Constructor;
            }
            var Toolbar_Toolbar = /*#__PURE__*/ function() {
                function Toolbar(context) {
                    Toolbar_classCallCheck(this, Toolbar);
                    this.context = context;
                    this.$window = external_root_jQuery_commonjs2_jquery_commonjs_jquery_amd_jquery_default()(window);
                    this.$document = external_root_jQuery_commonjs2_jquery_commonjs_jquery_amd_jquery_default()(document);
                    this.ui = external_root_jQuery_commonjs2_jquery_commonjs_jquery_amd_jquery_default.a.summernote.ui;
                    this.$note = context.layoutInfo.note;
                    this.$editor = context.layoutInfo.editor;
                    this.$toolbar = context.layoutInfo.toolbar;
                    this.$editable = context.layoutInfo.editable;
                    this.$statusbar = context.layoutInfo.statusbar;
                    this.options = context.options;
                    this.isFollowing = false;
                    this.followScroll = this.followScroll.bind(this);
                }
                Toolbar_createClass(Toolbar, [
                    {
                        key: "shouldInitialize",
                        value: function shouldInitialize() {
                            return !this.options.airMode;
                        }
                    },
                    {
                        key: "initialize",
                        value: function initialize() {
                            var _this = this;
                            this.options.toolbar = this.options.toolbar || [];
                            if (!this.options.toolbar.length) this.$toolbar.hide();
                            else this.context.invoke("buttons.build", this.$toolbar, this.options.toolbar);
                            if (this.options.toolbarContainer) this.$toolbar.appendTo(this.options.toolbarContainer);
                            this.changeContainer(false);
                            this.$note.on("summernote.keyup summernote.mouseup summernote.change", function() {
                                _this.context.invoke("buttons.updateCurrentStyle");
                            });
                            this.context.invoke("buttons.updateCurrentStyle");
                            if (this.options.followingToolbar) this.$window.on("scroll resize", this.followScroll);
                        }
                    },
                    {
                        key: "destroy",
                        value: function destroy() {
                            this.$toolbar.children().remove();
                            if (this.options.followingToolbar) this.$window.off("scroll resize", this.followScroll);
                        }
                    },
                    {
                        key: "followScroll",
                        value: function followScroll() {
                            if (this.$editor.hasClass("fullscreen")) return false;
                            var editorHeight = this.$editor.outerHeight();
                            var editorWidth = this.$editor.width();
                            var toolbarHeight = this.$toolbar.height();
                            var statusbarHeight = this.$statusbar.height(); // check if the web app is currently using another static bar
                            var otherBarHeight = 0;
                            if (this.options.otherStaticBar) otherBarHeight = external_root_jQuery_commonjs2_jquery_commonjs_jquery_amd_jquery_default()(this.options.otherStaticBar).outerHeight();
                            var currentOffset = this.$document.scrollTop();
                            var editorOffsetTop = this.$editor.offset().top;
                            var editorOffsetBottom = editorOffsetTop + editorHeight;
                            var activateOffset = editorOffsetTop - otherBarHeight;
                            var deactivateOffsetBottom = editorOffsetBottom - otherBarHeight - toolbarHeight - statusbarHeight;
                            if (!this.isFollowing && currentOffset > activateOffset && currentOffset < deactivateOffsetBottom - toolbarHeight) {
                                this.isFollowing = true;
                                this.$editable.css({
                                    marginTop: this.$toolbar.outerHeight()
                                });
                                this.$toolbar.css({
                                    position: "fixed",
                                    top: otherBarHeight,
                                    width: editorWidth,
                                    zIndex: 1000
                                });
                            } else if (this.isFollowing && (currentOffset < activateOffset || currentOffset > deactivateOffsetBottom)) {
                                this.isFollowing = false;
                                this.$toolbar.css({
                                    position: "relative",
                                    top: 0,
                                    width: "100%",
                                    zIndex: "auto"
                                });
                                this.$editable.css({
                                    marginTop: ""
                                });
                            }
                        }
                    },
                    {
                        key: "changeContainer",
                        value: function changeContainer(isFullscreen) {
                            if (isFullscreen) this.$toolbar.prependTo(this.$editor);
                            else if (this.options.toolbarContainer) this.$toolbar.appendTo(this.options.toolbarContainer);
                            if (this.options.followingToolbar) this.followScroll();
                        }
                    },
                    {
                        key: "updateFullscreen",
                        value: function updateFullscreen(isFullscreen) {
                            this.ui.toggleBtnActive(this.$toolbar.find(".btn-fullscreen"), isFullscreen);
                            this.changeContainer(isFullscreen);
                        }
                    },
                    {
                        key: "updateCodeview",
                        value: function updateCodeview(isCodeview) {
                            this.ui.toggleBtnActive(this.$toolbar.find(".btn-codeview"), isCodeview);
                            if (isCodeview) this.deactivate();
                            else this.activate();
                        }
                    },
                    {
                        key: "activate",
                        value: function activate(isIncludeCodeview) {
                            var $btn = this.$toolbar.find("button");
                            if (!isIncludeCodeview) $btn = $btn.not(".btn-codeview").not(".btn-fullscreen");
                            this.ui.toggleBtn($btn, true);
                        }
                    },
                    {
                        key: "deactivate",
                        value: function deactivate(isIncludeCodeview) {
                            var $btn = this.$toolbar.find("button");
                            if (!isIncludeCodeview) $btn = $btn.not(".btn-codeview").not(".btn-fullscreen");
                            this.ui.toggleBtn($btn, false);
                        }
                    }
                ]);
                return Toolbar;
            }();
            // CONCATENATED MODULE: ./src/js/base/module/LinkDialog.js
            function LinkDialog_classCallCheck(instance, Constructor) {
                if (!(instance instanceof Constructor)) throw new TypeError("Cannot call a class as a function");
            }
            function LinkDialog_defineProperties(target, props) {
                for(var i = 0; i < props.length; i++){
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    descriptor.configurable = true;
                    if ("value" in descriptor) descriptor.writable = true;
                    Object.defineProperty(target, descriptor.key, descriptor);
                }
            }
            function LinkDialog_createClass(Constructor, protoProps, staticProps) {
                if (protoProps) LinkDialog_defineProperties(Constructor.prototype, protoProps);
                if (staticProps) LinkDialog_defineProperties(Constructor, staticProps);
                return Constructor;
            }
            var LinkDialog_LinkDialog = /*#__PURE__*/ function() {
                function LinkDialog(context) {
                    LinkDialog_classCallCheck(this, LinkDialog);
                    this.context = context;
                    this.ui = external_root_jQuery_commonjs2_jquery_commonjs_jquery_amd_jquery_default.a.summernote.ui;
                    this.$body = external_root_jQuery_commonjs2_jquery_commonjs_jquery_amd_jquery_default()(document.body);
                    this.$editor = context.layoutInfo.editor;
                    this.options = context.options;
                    this.lang = this.options.langInfo;
                    context.memo("help.linkDialog.show", this.options.langInfo.help["linkDialog.show"]);
                }
                LinkDialog_createClass(LinkDialog, [
                    {
                        key: "initialize",
                        value: function initialize() {
                            var $container = this.options.dialogsInBody ? this.$body : this.options.container;
                            var body = [
                                '<div class="form-group note-form-group">',
                                '<label for="note-dialog-link-txt-'.concat(this.options.id, '" class="note-form-label">').concat(this.lang.link.textToDisplay, "</label>"),
                                '<input id="note-dialog-link-txt-'.concat(this.options.id, '" class="note-link-text form-control note-form-control note-input" type="text"/>'),
                                "</div>",
                                '<div class="form-group note-form-group">',
                                '<label for="note-dialog-link-url-'.concat(this.options.id, '" class="note-form-label">').concat(this.lang.link.url, "</label>"),
                                '<input id="note-dialog-link-url-'.concat(this.options.id, '" class="note-link-url form-control note-form-control note-input" type="text" value="http://"/>'),
                                "</div>",
                                !this.options.disableLinkTarget ? external_root_jQuery_commonjs2_jquery_commonjs_jquery_amd_jquery_default()("<div/>").append(this.ui.checkbox({
                                    className: "sn-checkbox-open-in-new-window",
                                    text: this.lang.link.openInNewWindow,
                                    checked: true
                                }).render()).html() : "",
                                external_root_jQuery_commonjs2_jquery_commonjs_jquery_amd_jquery_default()("<div/>").append(this.ui.checkbox({
                                    className: "sn-checkbox-use-protocol",
                                    text: this.lang.link.useProtocol,
                                    checked: true
                                }).render()).html()
                            ].join("");
                            var buttonClass = "btn btn-primary note-btn note-btn-primary note-link-btn";
                            var footer = '<input type="button" href="#" class="'.concat(buttonClass, '" value="').concat(this.lang.link.insert, '" disabled>');
                            this.$dialog = this.ui.dialog({
                                className: "link-dialog",
                                title: this.lang.link.insert,
                                fade: this.options.dialogsFade,
                                body: body,
                                footer: footer
                            }).render().appendTo($container);
                        }
                    },
                    {
                        key: "destroy",
                        value: function destroy() {
                            this.ui.hideDialog(this.$dialog);
                            this.$dialog.remove();
                        }
                    },
                    {
                        key: "bindEnterKey",
                        value: function bindEnterKey($input, $btn) {
                            $input.on("keypress", function(event) {
                                if (event.keyCode === core_key.code.ENTER) {
                                    event.preventDefault();
                                    $btn.trigger("click");
                                }
                            });
                        }
                    },
                    {
                        key: "toggleLinkBtn",
                        value: function toggleLinkBtn($linkBtn, $linkText, $linkUrl) {
                            this.ui.toggleBtn($linkBtn, $linkText.val() && $linkUrl.val());
                        }
                    },
                    {
                        key: "showLinkDialog",
                        value: function showLinkDialog(linkInfo) {
                            var _this = this;
                            return external_root_jQuery_commonjs2_jquery_commonjs_jquery_amd_jquery_default.a.Deferred(function(deferred) {
                                var $linkText = _this.$dialog.find(".note-link-text");
                                var $linkUrl = _this.$dialog.find(".note-link-url");
                                var $linkBtn = _this.$dialog.find(".note-link-btn");
                                var $openInNewWindow = _this.$dialog.find(".sn-checkbox-open-in-new-window input[type=checkbox]");
                                var $useProtocol = _this.$dialog.find(".sn-checkbox-use-protocol input[type=checkbox]");
                                _this.ui.onDialogShown(_this.$dialog, function() {
                                    _this.context.triggerEvent("dialog.shown"); // If no url was given and given text is valid URL then copy that into URL Field
                                    if (!linkInfo.url && func.isValidUrl(linkInfo.text)) linkInfo.url = linkInfo.text;
                                    $linkText.on("input paste propertychange", function() {
                                        // If linktext was modified by input events,
                                        // cloning text from linkUrl will be stopped.
                                        linkInfo.text = $linkText.val();
                                        _this.toggleLinkBtn($linkBtn, $linkText, $linkUrl);
                                    }).val(linkInfo.text);
                                    $linkUrl.on("input paste propertychange", function() {
                                        // Display same text on `Text to display` as default
                                        // when linktext has no text
                                        if (!linkInfo.text) $linkText.val($linkUrl.val());
                                        _this.toggleLinkBtn($linkBtn, $linkText, $linkUrl);
                                    }).val(linkInfo.url);
                                    if (!env.isSupportTouch) $linkUrl.trigger("focus");
                                    _this.toggleLinkBtn($linkBtn, $linkText, $linkUrl);
                                    _this.bindEnterKey($linkUrl, $linkBtn);
                                    _this.bindEnterKey($linkText, $linkBtn);
                                    var isNewWindowChecked = linkInfo.isNewWindow !== undefined ? linkInfo.isNewWindow : _this.context.options.linkTargetBlank;
                                    $openInNewWindow.prop("checked", isNewWindowChecked);
                                    var useProtocolChecked = linkInfo.url ? false : _this.context.options.useProtocol;
                                    $useProtocol.prop("checked", useProtocolChecked);
                                    $linkBtn.one("click", function(event) {
                                        event.preventDefault();
                                        deferred.resolve({
                                            range: linkInfo.range,
                                            url: $linkUrl.val(),
                                            text: $linkText.val(),
                                            isNewWindow: $openInNewWindow.is(":checked"),
                                            checkProtocol: $useProtocol.is(":checked")
                                        });
                                        _this.ui.hideDialog(_this.$dialog);
                                    });
                                });
                                _this.ui.onDialogHidden(_this.$dialog, function() {
                                    // detach events
                                    $linkText.off();
                                    $linkUrl.off();
                                    $linkBtn.off();
                                    if (deferred.state() === "pending") deferred.reject();
                                });
                                _this.ui.showDialog(_this.$dialog);
                            }).promise();
                        }
                    },
                    {
                        key: "show",
                        value: function show() {
                            var _this2 = this;
                            var linkInfo = this.context.invoke("editor.getLinkInfo");
                            this.context.invoke("editor.saveRange");
                            this.showLinkDialog(linkInfo).then(function(linkInfo) {
                                _this2.context.invoke("editor.restoreRange");
                                _this2.context.invoke("editor.createLink", linkInfo);
                            }).fail(function() {
                                _this2.context.invoke("editor.restoreRange");
                            });
                        }
                    }
                ]);
                return LinkDialog;
            }();
            // CONCATENATED MODULE: ./src/js/base/module/LinkPopover.js
            function LinkPopover_classCallCheck(instance, Constructor) {
                if (!(instance instanceof Constructor)) throw new TypeError("Cannot call a class as a function");
            }
            function LinkPopover_defineProperties(target, props) {
                for(var i = 0; i < props.length; i++){
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    descriptor.configurable = true;
                    if ("value" in descriptor) descriptor.writable = true;
                    Object.defineProperty(target, descriptor.key, descriptor);
                }
            }
            function LinkPopover_createClass(Constructor, protoProps, staticProps) {
                if (protoProps) LinkPopover_defineProperties(Constructor.prototype, protoProps);
                if (staticProps) LinkPopover_defineProperties(Constructor, staticProps);
                return Constructor;
            }
            var LinkPopover_LinkPopover = /*#__PURE__*/ function() {
                function LinkPopover(context) {
                    var _this = this;
                    LinkPopover_classCallCheck(this, LinkPopover);
                    this.context = context;
                    this.ui = external_root_jQuery_commonjs2_jquery_commonjs_jquery_amd_jquery_default.a.summernote.ui;
                    this.options = context.options;
                    this.events = {
                        "summernote.keyup summernote.mouseup summernote.change summernote.scroll": function summernoteKeyupSummernoteMouseupSummernoteChangeSummernoteScroll() {
                            _this.update();
                        },
                        "summernote.disable summernote.dialog.shown summernote.blur": function summernoteDisableSummernoteDialogShownSummernoteBlur() {
                            _this.hide();
                        }
                    };
                }
                LinkPopover_createClass(LinkPopover, [
                    {
                        key: "shouldInitialize",
                        value: function shouldInitialize() {
                            return !lists.isEmpty(this.options.popover.link);
                        }
                    },
                    {
                        key: "initialize",
                        value: function initialize() {
                            this.$popover = this.ui.popover({
                                className: "note-link-popover",
                                callback: function callback($node) {
                                    var $content = $node.find(".popover-content,.note-popover-content");
                                    $content.prepend('<span><a target="_blank"></a>&nbsp;</span>');
                                }
                            }).render().appendTo(this.options.container);
                            var $content = this.$popover.find(".popover-content,.note-popover-content");
                            this.context.invoke("buttons.build", $content, this.options.popover.link);
                            this.$popover.on("mousedown", function(e) {
                                e.preventDefault();
                            });
                        }
                    },
                    {
                        key: "destroy",
                        value: function destroy() {
                            this.$popover.remove();
                        }
                    },
                    {
                        key: "update",
                        value: function update() {
                            // Prevent focusing on editable when invoke('code') is executed
                            if (!this.context.invoke("editor.hasFocus")) {
                                this.hide();
                                return;
                            }
                            var rng = this.context.invoke("editor.getLastRange");
                            if (rng.isCollapsed() && rng.isOnAnchor()) {
                                var anchor = dom.ancestor(rng.sc, dom.isAnchor);
                                var href = external_root_jQuery_commonjs2_jquery_commonjs_jquery_amd_jquery_default()(anchor).attr("href");
                                this.$popover.find("a").attr("href", href).text(href);
                                var pos = dom.posFromPlaceholder(anchor);
                                var containerOffset = external_root_jQuery_commonjs2_jquery_commonjs_jquery_amd_jquery_default()(this.options.container).offset();
                                pos.top -= containerOffset.top;
                                pos.left -= containerOffset.left;
                                this.$popover.css({
                                    display: "block",
                                    left: pos.left,
                                    top: pos.top
                                });
                            } else this.hide();
                        }
                    },
                    {
                        key: "hide",
                        value: function hide() {
                            this.$popover.hide();
                        }
                    }
                ]);
                return LinkPopover;
            }();
            // CONCATENATED MODULE: ./src/js/base/module/ImageDialog.js
            function ImageDialog_classCallCheck(instance, Constructor) {
                if (!(instance instanceof Constructor)) throw new TypeError("Cannot call a class as a function");
            }
            function ImageDialog_defineProperties(target, props) {
                for(var i = 0; i < props.length; i++){
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    descriptor.configurable = true;
                    if ("value" in descriptor) descriptor.writable = true;
                    Object.defineProperty(target, descriptor.key, descriptor);
                }
            }
            function ImageDialog_createClass(Constructor, protoProps, staticProps) {
                if (protoProps) ImageDialog_defineProperties(Constructor.prototype, protoProps);
                if (staticProps) ImageDialog_defineProperties(Constructor, staticProps);
                return Constructor;
            }
            var ImageDialog_ImageDialog = /*#__PURE__*/ function() {
                function ImageDialog(context) {
                    ImageDialog_classCallCheck(this, ImageDialog);
                    this.context = context;
                    this.ui = external_root_jQuery_commonjs2_jquery_commonjs_jquery_amd_jquery_default.a.summernote.ui;
                    this.$body = external_root_jQuery_commonjs2_jquery_commonjs_jquery_amd_jquery_default()(document.body);
                    this.$editor = context.layoutInfo.editor;
                    this.options = context.options;
                    this.lang = this.options.langInfo;
                }
                ImageDialog_createClass(ImageDialog, [
                    {
                        key: "initialize",
                        value: function initialize() {
                            var imageLimitation = "";
                            if (this.options.maximumImageFileSize) {
                                var unit = Math.floor(Math.log(this.options.maximumImageFileSize) / Math.log(1024));
                                var readableSize = (this.options.maximumImageFileSize / Math.pow(1024, unit)).toFixed(2) * 1 + " " + " KMGTP"[unit] + "B";
                                imageLimitation = "<small>".concat(this.lang.image.maximumFileSize + " : " + readableSize, "</small>");
                            }
                            var $container = this.options.dialogsInBody ? this.$body : this.options.container;
                            var body = [
                                '<div class="form-group note-form-group note-group-select-from-files">',
                                '<label for="note-dialog-image-file-' + this.options.id + '" class="note-form-label">' + this.lang.image.selectFromFiles + "</label>",
                                '<input id="note-dialog-image-file-' + this.options.id + '" class="note-image-input form-control-file note-form-control note-input" ',
                                ' type="file" name="files" accept="image/*" multiple="multiple"/>',
                                imageLimitation,
                                "</div>",
                                '<div class="form-group note-group-image-url">',
                                '<label for="note-dialog-image-url-' + this.options.id + '" class="note-form-label">' + this.lang.image.url + "</label>",
                                '<input id="note-dialog-image-url-' + this.options.id + '" class="note-image-url form-control note-form-control note-input" type="text"/>',
                                "</div>"
                            ].join("");
                            var buttonClass = "btn btn-primary note-btn note-btn-primary note-image-btn";
                            var footer = '<input type="button" href="#" class="'.concat(buttonClass, '" value="').concat(this.lang.image.insert, '" disabled>');
                            this.$dialog = this.ui.dialog({
                                title: this.lang.image.insert,
                                fade: this.options.dialogsFade,
                                body: body,
                                footer: footer
                            }).render().appendTo($container);
                        }
                    },
                    {
                        key: "destroy",
                        value: function destroy() {
                            this.ui.hideDialog(this.$dialog);
                            this.$dialog.remove();
                        }
                    },
                    {
                        key: "bindEnterKey",
                        value: function bindEnterKey($input, $btn) {
                            $input.on("keypress", function(event) {
                                if (event.keyCode === core_key.code.ENTER) {
                                    event.preventDefault();
                                    $btn.trigger("click");
                                }
                            });
                        }
                    },
                    {
                        key: "show",
                        value: function show() {
                            var _this = this;
                            this.context.invoke("editor.saveRange");
                            this.showImageDialog().then(function(data) {
                                // [workaround] hide dialog before restore range for IE range focus
                                _this.ui.hideDialog(_this.$dialog);
                                _this.context.invoke("editor.restoreRange");
                                if (typeof data === "string") {
                                    // image url
                                    // If onImageLinkInsert set,
                                    if (_this.options.callbacks.onImageLinkInsert) _this.context.triggerEvent("image.link.insert", data);
                                    else _this.context.invoke("editor.insertImage", data);
                                } else // array of files
                                _this.context.invoke("editor.insertImagesOrCallback", data);
                            }).fail(function() {
                                _this.context.invoke("editor.restoreRange");
                            });
                        }
                    },
                    {
                        key: "showImageDialog",
                        value: function showImageDialog() {
                            var _this2 = this;
                            return external_root_jQuery_commonjs2_jquery_commonjs_jquery_amd_jquery_default.a.Deferred(function(deferred) {
                                var $imageInput = _this2.$dialog.find(".note-image-input");
                                var $imageUrl = _this2.$dialog.find(".note-image-url");
                                var $imageBtn = _this2.$dialog.find(".note-image-btn");
                                _this2.ui.onDialogShown(_this2.$dialog, function() {
                                    _this2.context.triggerEvent("dialog.shown"); // Cloning imageInput to clear element.
                                    $imageInput.replaceWith($imageInput.clone().on("change", function(event) {
                                        deferred.resolve(event.target.files || event.target.value);
                                    }).val(""));
                                    $imageUrl.on("input paste propertychange", function() {
                                        _this2.ui.toggleBtn($imageBtn, $imageUrl.val());
                                    }).val("");
                                    if (!env.isSupportTouch) $imageUrl.trigger("focus");
                                    $imageBtn.click(function(event) {
                                        event.preventDefault();
                                        deferred.resolve($imageUrl.val());
                                    });
                                    _this2.bindEnterKey($imageUrl, $imageBtn);
                                });
                                _this2.ui.onDialogHidden(_this2.$dialog, function() {
                                    $imageInput.off();
                                    $imageUrl.off();
                                    $imageBtn.off();
                                    if (deferred.state() === "pending") deferred.reject();
                                });
                                _this2.ui.showDialog(_this2.$dialog);
                            });
                        }
                    }
                ]);
                return ImageDialog;
            }();
            // CONCATENATED MODULE: ./src/js/base/module/ImagePopover.js
            function ImagePopover_classCallCheck(instance, Constructor) {
                if (!(instance instanceof Constructor)) throw new TypeError("Cannot call a class as a function");
            }
            function ImagePopover_defineProperties(target, props) {
                for(var i = 0; i < props.length; i++){
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    descriptor.configurable = true;
                    if ("value" in descriptor) descriptor.writable = true;
                    Object.defineProperty(target, descriptor.key, descriptor);
                }
            }
            function ImagePopover_createClass(Constructor, protoProps, staticProps) {
                if (protoProps) ImagePopover_defineProperties(Constructor.prototype, protoProps);
                if (staticProps) ImagePopover_defineProperties(Constructor, staticProps);
                return Constructor;
            }
            /**
 * Image popover module
 *  mouse events that show/hide popover will be handled by Handle.js.
 *  Handle.js will receive the events and invoke 'imagePopover.update'.
 */ var ImagePopover_ImagePopover = /*#__PURE__*/ function() {
                function ImagePopover(context) {
                    var _this = this;
                    ImagePopover_classCallCheck(this, ImagePopover);
                    this.context = context;
                    this.ui = external_root_jQuery_commonjs2_jquery_commonjs_jquery_amd_jquery_default.a.summernote.ui;
                    this.editable = context.layoutInfo.editable[0];
                    this.options = context.options;
                    this.events = {
                        "summernote.disable summernote.blur": function summernoteDisableSummernoteBlur() {
                            _this.hide();
                        }
                    };
                }
                ImagePopover_createClass(ImagePopover, [
                    {
                        key: "shouldInitialize",
                        value: function shouldInitialize() {
                            return !lists.isEmpty(this.options.popover.image);
                        }
                    },
                    {
                        key: "initialize",
                        value: function initialize() {
                            this.$popover = this.ui.popover({
                                className: "note-image-popover"
                            }).render().appendTo(this.options.container);
                            var $content = this.$popover.find(".popover-content,.note-popover-content");
                            this.context.invoke("buttons.build", $content, this.options.popover.image);
                            this.$popover.on("mousedown", function(e) {
                                e.preventDefault();
                            });
                        }
                    },
                    {
                        key: "destroy",
                        value: function destroy() {
                            this.$popover.remove();
                        }
                    },
                    {
                        key: "update",
                        value: function update(target, event) {
                            if (dom.isImg(target)) {
                                var position = external_root_jQuery_commonjs2_jquery_commonjs_jquery_amd_jquery_default()(target).offset();
                                var containerOffset = external_root_jQuery_commonjs2_jquery_commonjs_jquery_amd_jquery_default()(this.options.container).offset();
                                var pos = {};
                                if (this.options.popatmouse) {
                                    pos.left = event.pageX - 20;
                                    pos.top = event.pageY;
                                } else pos = position;
                                pos.top -= containerOffset.top;
                                pos.left -= containerOffset.left;
                                this.$popover.css({
                                    display: "block",
                                    left: pos.left,
                                    top: pos.top
                                });
                            } else this.hide();
                        }
                    },
                    {
                        key: "hide",
                        value: function hide() {
                            this.$popover.hide();
                        }
                    }
                ]);
                return ImagePopover;
            }();
            // CONCATENATED MODULE: ./src/js/base/module/TablePopover.js
            function TablePopover_classCallCheck(instance, Constructor) {
                if (!(instance instanceof Constructor)) throw new TypeError("Cannot call a class as a function");
            }
            function TablePopover_defineProperties(target, props) {
                for(var i = 0; i < props.length; i++){
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    descriptor.configurable = true;
                    if ("value" in descriptor) descriptor.writable = true;
                    Object.defineProperty(target, descriptor.key, descriptor);
                }
            }
            function TablePopover_createClass(Constructor, protoProps, staticProps) {
                if (protoProps) TablePopover_defineProperties(Constructor.prototype, protoProps);
                if (staticProps) TablePopover_defineProperties(Constructor, staticProps);
                return Constructor;
            }
            var TablePopover_TablePopover = /*#__PURE__*/ function() {
                function TablePopover(context) {
                    var _this = this;
                    TablePopover_classCallCheck(this, TablePopover);
                    this.context = context;
                    this.ui = external_root_jQuery_commonjs2_jquery_commonjs_jquery_amd_jquery_default.a.summernote.ui;
                    this.options = context.options;
                    this.events = {
                        "summernote.mousedown": function summernoteMousedown(we, e) {
                            _this.update(e.target);
                        },
                        "summernote.keyup summernote.scroll summernote.change": function summernoteKeyupSummernoteScrollSummernoteChange() {
                            _this.update();
                        },
                        "summernote.disable summernote.blur": function summernoteDisableSummernoteBlur() {
                            _this.hide();
                        }
                    };
                }
                TablePopover_createClass(TablePopover, [
                    {
                        key: "shouldInitialize",
                        value: function shouldInitialize() {
                            return !lists.isEmpty(this.options.popover.table);
                        }
                    },
                    {
                        key: "initialize",
                        value: function initialize() {
                            this.$popover = this.ui.popover({
                                className: "note-table-popover"
                            }).render().appendTo(this.options.container);
                            var $content = this.$popover.find(".popover-content,.note-popover-content");
                            this.context.invoke("buttons.build", $content, this.options.popover.table); // [workaround] Disable Firefox's default table editor
                            if (env.isFF) document.execCommand("enableInlineTableEditing", false, false);
                            this.$popover.on("mousedown", function(e) {
                                e.preventDefault();
                            });
                        }
                    },
                    {
                        key: "destroy",
                        value: function destroy() {
                            this.$popover.remove();
                        }
                    },
                    {
                        key: "update",
                        value: function update(target) {
                            if (this.context.isDisabled()) return false;
                            var isCell = dom.isCell(target);
                            if (isCell) {
                                var pos = dom.posFromPlaceholder(target);
                                var containerOffset = external_root_jQuery_commonjs2_jquery_commonjs_jquery_amd_jquery_default()(this.options.container).offset();
                                pos.top -= containerOffset.top;
                                pos.left -= containerOffset.left;
                                this.$popover.css({
                                    display: "block",
                                    left: pos.left,
                                    top: pos.top
                                });
                            } else this.hide();
                            return isCell;
                        }
                    },
                    {
                        key: "hide",
                        value: function hide() {
                            this.$popover.hide();
                        }
                    }
                ]);
                return TablePopover;
            }();
            // CONCATENATED MODULE: ./src/js/base/module/VideoDialog.js
            function VideoDialog_classCallCheck(instance, Constructor) {
                if (!(instance instanceof Constructor)) throw new TypeError("Cannot call a class as a function");
            }
            function VideoDialog_defineProperties(target, props) {
                for(var i = 0; i < props.length; i++){
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    descriptor.configurable = true;
                    if ("value" in descriptor) descriptor.writable = true;
                    Object.defineProperty(target, descriptor.key, descriptor);
                }
            }
            function VideoDialog_createClass(Constructor, protoProps, staticProps) {
                if (protoProps) VideoDialog_defineProperties(Constructor.prototype, protoProps);
                if (staticProps) VideoDialog_defineProperties(Constructor, staticProps);
                return Constructor;
            }
            var VideoDialog_VideoDialog = /*#__PURE__*/ function() {
                function VideoDialog(context) {
                    VideoDialog_classCallCheck(this, VideoDialog);
                    this.context = context;
                    this.ui = external_root_jQuery_commonjs2_jquery_commonjs_jquery_amd_jquery_default.a.summernote.ui;
                    this.$body = external_root_jQuery_commonjs2_jquery_commonjs_jquery_amd_jquery_default()(document.body);
                    this.$editor = context.layoutInfo.editor;
                    this.options = context.options;
                    this.lang = this.options.langInfo;
                }
                VideoDialog_createClass(VideoDialog, [
                    {
                        key: "initialize",
                        value: function initialize() {
                            var $container = this.options.dialogsInBody ? this.$body : this.options.container;
                            var body = [
                                '<div class="form-group note-form-group row-fluid">',
                                '<label for="note-dialog-video-url-'.concat(this.options.id, '" class="note-form-label">').concat(this.lang.video.url, ' <small class="text-muted">').concat(this.lang.video.providers, "</small></label>"),
                                '<input id="note-dialog-video-url-'.concat(this.options.id, '" class="note-video-url form-control note-form-control note-input" type="text"/>'),
                                "</div>"
                            ].join("");
                            var buttonClass = "btn btn-primary note-btn note-btn-primary note-video-btn";
                            var footer = '<input type="button" href="#" class="'.concat(buttonClass, '" value="').concat(this.lang.video.insert, '" disabled>');
                            this.$dialog = this.ui.dialog({
                                title: this.lang.video.insert,
                                fade: this.options.dialogsFade,
                                body: body,
                                footer: footer
                            }).render().appendTo($container);
                        }
                    },
                    {
                        key: "destroy",
                        value: function destroy() {
                            this.ui.hideDialog(this.$dialog);
                            this.$dialog.remove();
                        }
                    },
                    {
                        key: "bindEnterKey",
                        value: function bindEnterKey($input, $btn) {
                            $input.on("keypress", function(event) {
                                if (event.keyCode === core_key.code.ENTER) {
                                    event.preventDefault();
                                    $btn.trigger("click");
                                }
                            });
                        }
                    },
                    {
                        key: "createVideoNode",
                        value: function createVideoNode(url) {
                            // video url patterns(youtube, instagram, vimeo, dailymotion, youku, mp4, ogg, webm)
                            var ytRegExp = /\/\/(?:www\.)?(?:youtu\.be\/|youtube\.com\/(?:embed\/|v\/|watch\?v=|watch\?.+&v=))([\w|-]{11})(?:(?:[\?&]t=)(\S+))?$/;
                            var ytRegExpForStart = /^(?:(\d+)h)?(?:(\d+)m)?(?:(\d+)s)?$/;
                            var ytMatch = url.match(ytRegExp);
                            var igRegExp = /(?:www\.|\/\/)instagram\.com\/p\/(.[a-zA-Z0-9_-]*)/;
                            var igMatch = url.match(igRegExp);
                            var vRegExp = /\/\/vine\.co\/v\/([a-zA-Z0-9]+)/;
                            var vMatch = url.match(vRegExp);
                            var vimRegExp = /\/\/(player\.)?vimeo\.com\/([a-z]*\/)*(\d+)[?]?.*/;
                            var vimMatch = url.match(vimRegExp);
                            var dmRegExp = /.+dailymotion.com\/(video|hub)\/([^_]+)[^#]*(#video=([^_&]+))?/;
                            var dmMatch = url.match(dmRegExp);
                            var youkuRegExp = /\/\/v\.youku\.com\/v_show\/id_(\w+)=*\.html/;
                            var youkuMatch = url.match(youkuRegExp);
                            var qqRegExp = /\/\/v\.qq\.com.*?vid=(.+)/;
                            var qqMatch = url.match(qqRegExp);
                            var qqRegExp2 = /\/\/v\.qq\.com\/x?\/?(page|cover).*?\/([^\/]+)\.html\??.*/;
                            var qqMatch2 = url.match(qqRegExp2);
                            var mp4RegExp = /^.+.(mp4|m4v)$/;
                            var mp4Match = url.match(mp4RegExp);
                            var oggRegExp = /^.+.(ogg|ogv)$/;
                            var oggMatch = url.match(oggRegExp);
                            var webmRegExp = /^.+.(webm)$/;
                            var webmMatch = url.match(webmRegExp);
                            var fbRegExp = /(?:www\.|\/\/)facebook\.com\/([^\/]+)\/videos\/([0-9]+)/;
                            var fbMatch = url.match(fbRegExp);
                            var $video;
                            if (ytMatch && ytMatch[1].length === 11) {
                                var youtubeId = ytMatch[1];
                                var start = 0;
                                if (typeof ytMatch[2] !== "undefined") {
                                    var ytMatchForStart = ytMatch[2].match(ytRegExpForStart);
                                    if (ytMatchForStart) for(var n = [
                                        3600,
                                        60,
                                        1
                                    ], i = 0, r = n.length; i < r; i++)start += typeof ytMatchForStart[i + 1] !== "undefined" ? n[i] * parseInt(ytMatchForStart[i + 1], 10) : 0;
                                }
                                $video = external_root_jQuery_commonjs2_jquery_commonjs_jquery_amd_jquery_default()("<iframe>").attr("frameborder", 0).attr("src", "//www.youtube.com/embed/" + youtubeId + (start > 0 ? "?start=" + start : "")).attr("width", "640").attr("height", "360");
                            } else if (igMatch && igMatch[0].length) $video = external_root_jQuery_commonjs2_jquery_commonjs_jquery_amd_jquery_default()("<iframe>").attr("frameborder", 0).attr("src", "https://instagram.com/p/" + igMatch[1] + "/embed/").attr("width", "612").attr("height", "710").attr("scrolling", "no").attr("allowtransparency", "true");
                            else if (vMatch && vMatch[0].length) $video = external_root_jQuery_commonjs2_jquery_commonjs_jquery_amd_jquery_default()("<iframe>").attr("frameborder", 0).attr("src", vMatch[0] + "/embed/simple").attr("width", "600").attr("height", "600").attr("class", "vine-embed");
                            else if (vimMatch && vimMatch[3].length) $video = external_root_jQuery_commonjs2_jquery_commonjs_jquery_amd_jquery_default()("<iframe webkitallowfullscreen mozallowfullscreen allowfullscreen>").attr("frameborder", 0).attr("src", "//player.vimeo.com/video/" + vimMatch[3]).attr("width", "640").attr("height", "360");
                            else if (dmMatch && dmMatch[2].length) $video = external_root_jQuery_commonjs2_jquery_commonjs_jquery_amd_jquery_default()("<iframe>").attr("frameborder", 0).attr("src", "//www.dailymotion.com/embed/video/" + dmMatch[2]).attr("width", "640").attr("height", "360");
                            else if (youkuMatch && youkuMatch[1].length) $video = external_root_jQuery_commonjs2_jquery_commonjs_jquery_amd_jquery_default()("<iframe webkitallowfullscreen mozallowfullscreen allowfullscreen>").attr("frameborder", 0).attr("height", "498").attr("width", "510").attr("src", "//player.youku.com/embed/" + youkuMatch[1]);
                            else if (qqMatch && qqMatch[1].length || qqMatch2 && qqMatch2[2].length) {
                                var vid = qqMatch && qqMatch[1].length ? qqMatch[1] : qqMatch2[2];
                                $video = external_root_jQuery_commonjs2_jquery_commonjs_jquery_amd_jquery_default()("<iframe webkitallowfullscreen mozallowfullscreen allowfullscreen>").attr("frameborder", 0).attr("height", "310").attr("width", "500").attr("src", "https://v.qq.com/iframe/player.html?vid=" + vid + "&amp;auto=0");
                            } else if (mp4Match || oggMatch || webmMatch) $video = external_root_jQuery_commonjs2_jquery_commonjs_jquery_amd_jquery_default()("<video controls>").attr("src", url).attr("width", "640").attr("height", "360");
                            else if (fbMatch && fbMatch[0].length) $video = external_root_jQuery_commonjs2_jquery_commonjs_jquery_amd_jquery_default()("<iframe>").attr("frameborder", 0).attr("src", "https://www.facebook.com/plugins/video.php?href=" + encodeURIComponent(fbMatch[0]) + "&show_text=0&width=560").attr("width", "560").attr("height", "301").attr("scrolling", "no").attr("allowtransparency", "true");
                            else // this is not a known video link. Now what, Cat? Now what?
                            return false;
                            $video.addClass("note-video-clip");
                            return $video[0];
                        }
                    },
                    {
                        key: "show",
                        value: function show() {
                            var _this = this;
                            var text = this.context.invoke("editor.getSelectedText");
                            this.context.invoke("editor.saveRange");
                            this.showVideoDialog(text).then(function(url) {
                                // [workaround] hide dialog before restore range for IE range focus
                                _this.ui.hideDialog(_this.$dialog);
                                _this.context.invoke("editor.restoreRange"); // build node
                                var $node = _this.createVideoNode(url);
                                if ($node) // insert video node
                                _this.context.invoke("editor.insertNode", $node);
                            }).fail(function() {
                                _this.context.invoke("editor.restoreRange");
                            });
                        }
                    },
                    {
                        key: "showVideoDialog",
                        value: function showVideoDialog() /* text */ {
                            var _this2 = this;
                            return external_root_jQuery_commonjs2_jquery_commonjs_jquery_amd_jquery_default.a.Deferred(function(deferred) {
                                var $videoUrl = _this2.$dialog.find(".note-video-url");
                                var $videoBtn = _this2.$dialog.find(".note-video-btn");
                                _this2.ui.onDialogShown(_this2.$dialog, function() {
                                    _this2.context.triggerEvent("dialog.shown");
                                    $videoUrl.on("input paste propertychange", function() {
                                        _this2.ui.toggleBtn($videoBtn, $videoUrl.val());
                                    });
                                    if (!env.isSupportTouch) $videoUrl.trigger("focus");
                                    $videoBtn.click(function(event) {
                                        event.preventDefault();
                                        deferred.resolve($videoUrl.val());
                                    });
                                    _this2.bindEnterKey($videoUrl, $videoBtn);
                                });
                                _this2.ui.onDialogHidden(_this2.$dialog, function() {
                                    $videoUrl.off();
                                    $videoBtn.off();
                                    if (deferred.state() === "pending") deferred.reject();
                                });
                                _this2.ui.showDialog(_this2.$dialog);
                            });
                        }
                    }
                ]);
                return VideoDialog;
            }();
            // CONCATENATED MODULE: ./src/js/base/module/HelpDialog.js
            function HelpDialog_classCallCheck(instance, Constructor) {
                if (!(instance instanceof Constructor)) throw new TypeError("Cannot call a class as a function");
            }
            function HelpDialog_defineProperties(target, props) {
                for(var i = 0; i < props.length; i++){
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    descriptor.configurable = true;
                    if ("value" in descriptor) descriptor.writable = true;
                    Object.defineProperty(target, descriptor.key, descriptor);
                }
            }
            function HelpDialog_createClass(Constructor, protoProps, staticProps) {
                if (protoProps) HelpDialog_defineProperties(Constructor.prototype, protoProps);
                if (staticProps) HelpDialog_defineProperties(Constructor, staticProps);
                return Constructor;
            }
            var HelpDialog_HelpDialog = /*#__PURE__*/ function() {
                function HelpDialog(context) {
                    HelpDialog_classCallCheck(this, HelpDialog);
                    this.context = context;
                    this.ui = external_root_jQuery_commonjs2_jquery_commonjs_jquery_amd_jquery_default.a.summernote.ui;
                    this.$body = external_root_jQuery_commonjs2_jquery_commonjs_jquery_amd_jquery_default()(document.body);
                    this.$editor = context.layoutInfo.editor;
                    this.options = context.options;
                    this.lang = this.options.langInfo;
                }
                HelpDialog_createClass(HelpDialog, [
                    {
                        key: "initialize",
                        value: function initialize() {
                            var $container = this.options.dialogsInBody ? this.$body : this.options.container;
                            var body = [
                                '<p class="text-center">',
                                '<a href="http://summernote.org/" target="_blank">Summernote 0.8.16</a> \xb7 ',
                                '<a href="https://github.com/summernote/summernote" target="_blank">Project</a> \xb7 ',
                                '<a href="https://github.com/summernote/summernote/issues" target="_blank">Issues</a>',
                                "</p>"
                            ].join("");
                            this.$dialog = this.ui.dialog({
                                title: this.lang.options.help,
                                fade: this.options.dialogsFade,
                                body: this.createShortcutList(),
                                footer: body,
                                callback: function callback($node) {
                                    $node.find(".modal-body,.note-modal-body").css({
                                        "max-height": 300,
                                        "overflow": "scroll"
                                    });
                                }
                            }).render().appendTo($container);
                        }
                    },
                    {
                        key: "destroy",
                        value: function destroy() {
                            this.ui.hideDialog(this.$dialog);
                            this.$dialog.remove();
                        }
                    },
                    {
                        key: "createShortcutList",
                        value: function createShortcutList() {
                            var _this = this;
                            var keyMap = this.options.keyMap[env.isMac ? "mac" : "pc"];
                            return Object.keys(keyMap).map(function(key) {
                                var command = keyMap[key];
                                var $row = external_root_jQuery_commonjs2_jquery_commonjs_jquery_amd_jquery_default()('<div><div class="help-list-item"/></div>');
                                $row.append(external_root_jQuery_commonjs2_jquery_commonjs_jquery_amd_jquery_default()("<label><kbd>" + key + "</kdb></label>").css({
                                    "width": 180,
                                    "margin-right": 10
                                })).append(external_root_jQuery_commonjs2_jquery_commonjs_jquery_amd_jquery_default()("<span/>").html(_this.context.memo("help." + command) || command));
                                return $row.html();
                            }).join("");
                        }
                    },
                    {
                        key: "showHelpDialog",
                        value: function showHelpDialog() {
                            var _this2 = this;
                            return external_root_jQuery_commonjs2_jquery_commonjs_jquery_amd_jquery_default.a.Deferred(function(deferred) {
                                _this2.ui.onDialogShown(_this2.$dialog, function() {
                                    _this2.context.triggerEvent("dialog.shown");
                                    deferred.resolve();
                                });
                                _this2.ui.showDialog(_this2.$dialog);
                            }).promise();
                        }
                    },
                    {
                        key: "show",
                        value: function show() {
                            var _this3 = this;
                            this.context.invoke("editor.saveRange");
                            this.showHelpDialog().then(function() {
                                _this3.context.invoke("editor.restoreRange");
                            });
                        }
                    }
                ]);
                return HelpDialog;
            }();
            // CONCATENATED MODULE: ./src/js/base/module/AirPopover.js
            function AirPopover_classCallCheck(instance, Constructor) {
                if (!(instance instanceof Constructor)) throw new TypeError("Cannot call a class as a function");
            }
            function AirPopover_defineProperties(target, props) {
                for(var i = 0; i < props.length; i++){
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    descriptor.configurable = true;
                    if ("value" in descriptor) descriptor.writable = true;
                    Object.defineProperty(target, descriptor.key, descriptor);
                }
            }
            function AirPopover_createClass(Constructor, protoProps, staticProps) {
                if (protoProps) AirPopover_defineProperties(Constructor.prototype, protoProps);
                if (staticProps) AirPopover_defineProperties(Constructor, staticProps);
                return Constructor;
            }
            var AIRMODE_POPOVER_X_OFFSET = -5;
            var AIRMODE_POPOVER_Y_OFFSET = 5;
            var AirPopover_AirPopover = /*#__PURE__*/ function() {
                function AirPopover(context) {
                    var _this = this;
                    AirPopover_classCallCheck(this, AirPopover);
                    this.context = context;
                    this.ui = external_root_jQuery_commonjs2_jquery_commonjs_jquery_amd_jquery_default.a.summernote.ui;
                    this.options = context.options;
                    this.hidable = true;
                    this.onContextmenu = false;
                    this.pageX = null;
                    this.pageY = null;
                    this.events = {
                        "summernote.contextmenu": function summernoteContextmenu(e) {
                            if (_this.options.editing) {
                                e.preventDefault();
                                e.stopPropagation();
                                _this.onContextmenu = true;
                                _this.update(true);
                            }
                        },
                        "summernote.mousedown": function summernoteMousedown(we, e) {
                            _this.pageX = e.pageX;
                            _this.pageY = e.pageY;
                        },
                        "summernote.keyup summernote.mouseup summernote.scroll": function summernoteKeyupSummernoteMouseupSummernoteScroll(we, e) {
                            if (_this.options.editing && !_this.onContextmenu) {
                                _this.pageX = e.pageX;
                                _this.pageY = e.pageY;
                                _this.update();
                            }
                            _this.onContextmenu = false;
                        },
                        "summernote.disable summernote.change summernote.dialog.shown summernote.blur": function summernoteDisableSummernoteChangeSummernoteDialogShownSummernoteBlur() {
                            _this.hide();
                        },
                        "summernote.focusout": function summernoteFocusout() {
                            if (!_this.$popover.is(":active,:focus")) _this.hide();
                        }
                    };
                }
                AirPopover_createClass(AirPopover, [
                    {
                        key: "shouldInitialize",
                        value: function shouldInitialize() {
                            return this.options.airMode && !lists.isEmpty(this.options.popover.air);
                        }
                    },
                    {
                        key: "initialize",
                        value: function initialize() {
                            var _this2 = this;
                            this.$popover = this.ui.popover({
                                className: "note-air-popover"
                            }).render().appendTo(this.options.container);
                            var $content = this.$popover.find(".popover-content");
                            this.context.invoke("buttons.build", $content, this.options.popover.air); // disable hiding this popover preemptively by 'summernote.blur' event.
                            this.$popover.on("mousedown", function() {
                                _this2.hidable = false;
                            }); // (re-)enable hiding after 'summernote.blur' has been handled (aka. ignored).
                            this.$popover.on("mouseup", function() {
                                _this2.hidable = true;
                            });
                        }
                    },
                    {
                        key: "destroy",
                        value: function destroy() {
                            this.$popover.remove();
                        }
                    },
                    {
                        key: "update",
                        value: function update(forcelyOpen) {
                            var styleInfo = this.context.invoke("editor.currentStyle");
                            if (styleInfo.range && (!styleInfo.range.isCollapsed() || forcelyOpen)) {
                                var rect = {
                                    left: this.pageX,
                                    top: this.pageY
                                };
                                var containerOffset = external_root_jQuery_commonjs2_jquery_commonjs_jquery_amd_jquery_default()(this.options.container).offset();
                                rect.top -= containerOffset.top;
                                rect.left -= containerOffset.left;
                                this.$popover.css({
                                    display: "block",
                                    left: Math.max(rect.left, 0) + AIRMODE_POPOVER_X_OFFSET,
                                    top: rect.top + AIRMODE_POPOVER_Y_OFFSET
                                });
                                this.context.invoke("buttons.updateCurrentStyle", this.$popover);
                            } else this.hide();
                        }
                    },
                    {
                        key: "hide",
                        value: function hide() {
                            if (this.hidable) this.$popover.hide();
                        }
                    }
                ]);
                return AirPopover;
            }();
            // CONCATENATED MODULE: ./src/js/base/module/HintPopover.js
            function HintPopover_classCallCheck(instance, Constructor) {
                if (!(instance instanceof Constructor)) throw new TypeError("Cannot call a class as a function");
            }
            function HintPopover_defineProperties(target, props) {
                for(var i = 0; i < props.length; i++){
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    descriptor.configurable = true;
                    if ("value" in descriptor) descriptor.writable = true;
                    Object.defineProperty(target, descriptor.key, descriptor);
                }
            }
            function HintPopover_createClass(Constructor, protoProps, staticProps) {
                if (protoProps) HintPopover_defineProperties(Constructor.prototype, protoProps);
                if (staticProps) HintPopover_defineProperties(Constructor, staticProps);
                return Constructor;
            }
            var POPOVER_DIST = 5;
            var HintPopover_HintPopover = /*#__PURE__*/ function() {
                function HintPopover(context) {
                    var _this = this;
                    HintPopover_classCallCheck(this, HintPopover);
                    this.context = context;
                    this.ui = external_root_jQuery_commonjs2_jquery_commonjs_jquery_amd_jquery_default.a.summernote.ui;
                    this.$editable = context.layoutInfo.editable;
                    this.options = context.options;
                    this.hint = this.options.hint || [];
                    this.direction = this.options.hintDirection || "bottom";
                    this.hints = Array.isArray(this.hint) ? this.hint : [
                        this.hint
                    ];
                    this.events = {
                        "summernote.keyup": function summernoteKeyup(we, e) {
                            if (!e.isDefaultPrevented()) _this.handleKeyup(e);
                        },
                        "summernote.keydown": function summernoteKeydown(we, e) {
                            _this.handleKeydown(e);
                        },
                        "summernote.disable summernote.dialog.shown summernote.blur": function summernoteDisableSummernoteDialogShownSummernoteBlur() {
                            _this.hide();
                        }
                    };
                }
                HintPopover_createClass(HintPopover, [
                    {
                        key: "shouldInitialize",
                        value: function shouldInitialize() {
                            return this.hints.length > 0;
                        }
                    },
                    {
                        key: "initialize",
                        value: function initialize() {
                            var _this2 = this;
                            this.lastWordRange = null;
                            this.matchingWord = null;
                            this.$popover = this.ui.popover({
                                className: "note-hint-popover",
                                hideArrow: true,
                                direction: ""
                            }).render().appendTo(this.options.container);
                            this.$popover.hide();
                            this.$content = this.$popover.find(".popover-content,.note-popover-content");
                            this.$content.on("click", ".note-hint-item", function(e) {
                                _this2.$content.find(".active").removeClass("active");
                                external_root_jQuery_commonjs2_jquery_commonjs_jquery_amd_jquery_default()(e.currentTarget).addClass("active");
                                _this2.replace();
                            });
                            this.$popover.on("mousedown", function(e) {
                                e.preventDefault();
                            });
                        }
                    },
                    {
                        key: "destroy",
                        value: function destroy() {
                            this.$popover.remove();
                        }
                    },
                    {
                        key: "selectItem",
                        value: function selectItem($item) {
                            this.$content.find(".active").removeClass("active");
                            $item.addClass("active");
                            this.$content[0].scrollTop = $item[0].offsetTop - this.$content.innerHeight() / 2;
                        }
                    },
                    {
                        key: "moveDown",
                        value: function moveDown() {
                            var $current = this.$content.find(".note-hint-item.active");
                            var $next = $current.next();
                            if ($next.length) this.selectItem($next);
                            else {
                                var $nextGroup = $current.parent().next();
                                if (!$nextGroup.length) $nextGroup = this.$content.find(".note-hint-group").first();
                                this.selectItem($nextGroup.find(".note-hint-item").first());
                            }
                        }
                    },
                    {
                        key: "moveUp",
                        value: function moveUp() {
                            var $current = this.$content.find(".note-hint-item.active");
                            var $prev = $current.prev();
                            if ($prev.length) this.selectItem($prev);
                            else {
                                var $prevGroup = $current.parent().prev();
                                if (!$prevGroup.length) $prevGroup = this.$content.find(".note-hint-group").last();
                                this.selectItem($prevGroup.find(".note-hint-item").last());
                            }
                        }
                    },
                    {
                        key: "replace",
                        value: function replace() {
                            var $item = this.$content.find(".note-hint-item.active");
                            if ($item.length) {
                                var node = this.nodeFromItem($item); // If matchingWord length = 0 -> capture OK / open hint / but as mention capture "" (\w*)
                                if (this.matchingWord !== null && this.matchingWord.length === 0) this.lastWordRange.so = this.lastWordRange.eo; // Else si > 0 and normal case -> adjust range "before" for correct position of insertion
                                else if (this.matchingWord !== null && this.matchingWord.length > 0 && !this.lastWordRange.isCollapsed()) {
                                    var rangeCompute = this.lastWordRange.eo - this.lastWordRange.so - this.matchingWord.length;
                                    if (rangeCompute > 0) this.lastWordRange.so += rangeCompute;
                                }
                                this.lastWordRange.insertNode(node);
                                if (this.options.hintSelect === "next") {
                                    var blank = document.createTextNode("");
                                    external_root_jQuery_commonjs2_jquery_commonjs_jquery_amd_jquery_default()(node).after(blank);
                                    range.createFromNodeBefore(blank).select();
                                } else range.createFromNodeAfter(node).select();
                                this.lastWordRange = null;
                                this.hide();
                                this.context.invoke("editor.focus");
                            }
                        }
                    },
                    {
                        key: "nodeFromItem",
                        value: function nodeFromItem($item) {
                            var hint = this.hints[$item.data("index")];
                            var item = $item.data("item");
                            var node = hint.content ? hint.content(item) : item;
                            if (typeof node === "string") node = dom.createText(node);
                            return node;
                        }
                    },
                    {
                        key: "createItemTemplates",
                        value: function createItemTemplates(hintIdx, items) {
                            var hint = this.hints[hintIdx];
                            return items.map(function(item) {
                                var $item = external_root_jQuery_commonjs2_jquery_commonjs_jquery_amd_jquery_default()('<div class="note-hint-item"/>');
                                $item.append(hint.template ? hint.template(item) : item + "");
                                $item.data({
                                    "index": hintIdx,
                                    "item": item
                                });
                                return $item;
                            });
                        }
                    },
                    {
                        key: "handleKeydown",
                        value: function handleKeydown(e) {
                            if (!this.$popover.is(":visible")) return;
                            if (e.keyCode === core_key.code.ENTER) {
                                e.preventDefault();
                                this.replace();
                            } else if (e.keyCode === core_key.code.UP) {
                                e.preventDefault();
                                this.moveUp();
                            } else if (e.keyCode === core_key.code.DOWN) {
                                e.preventDefault();
                                this.moveDown();
                            }
                        }
                    },
                    {
                        key: "searchKeyword",
                        value: function searchKeyword(index, keyword, callback) {
                            var hint = this.hints[index];
                            if (hint && hint.match.test(keyword) && hint.search) {
                                var matches = hint.match.exec(keyword);
                                this.matchingWord = matches[0];
                                hint.search(matches[1], callback);
                            } else callback();
                        }
                    },
                    {
                        key: "createGroup",
                        value: function createGroup(idx, keyword) {
                            var _this3 = this;
                            var $group = external_root_jQuery_commonjs2_jquery_commonjs_jquery_amd_jquery_default()('<div class="note-hint-group note-hint-group-' + idx + '"/>');
                            this.searchKeyword(idx, keyword, function(items) {
                                items = items || [];
                                if (items.length) {
                                    $group.html(_this3.createItemTemplates(idx, items));
                                    _this3.show();
                                }
                            });
                            return $group;
                        }
                    },
                    {
                        key: "handleKeyup",
                        value: function handleKeyup(e) {
                            var _this4 = this;
                            if (!lists.contains([
                                core_key.code.ENTER,
                                core_key.code.UP,
                                core_key.code.DOWN
                            ], e.keyCode)) {
                                var _range = this.context.invoke("editor.getLastRange");
                                var wordRange, keyword;
                                if (this.options.hintMode === "words") {
                                    wordRange = _range.getWordsRange(_range);
                                    keyword = wordRange.toString();
                                    this.hints.forEach(function(hint) {
                                        if (hint.match.test(keyword)) {
                                            wordRange = _range.getWordsMatchRange(hint.match);
                                            return false;
                                        }
                                    });
                                    if (!wordRange) {
                                        this.hide();
                                        return;
                                    }
                                    keyword = wordRange.toString();
                                } else {
                                    wordRange = _range.getWordRange();
                                    keyword = wordRange.toString();
                                }
                                if (this.hints.length && keyword) {
                                    this.$content.empty();
                                    var bnd = func.rect2bnd(lists.last(wordRange.getClientRects()));
                                    var containerOffset = external_root_jQuery_commonjs2_jquery_commonjs_jquery_amd_jquery_default()(this.options.container).offset();
                                    if (bnd) {
                                        bnd.top -= containerOffset.top;
                                        bnd.left -= containerOffset.left;
                                        this.$popover.hide();
                                        this.lastWordRange = wordRange;
                                        this.hints.forEach(function(hint, idx) {
                                            if (hint.match.test(keyword)) _this4.createGroup(idx, keyword).appendTo(_this4.$content);
                                        }); // select first .note-hint-item
                                        this.$content.find(".note-hint-item:first").addClass("active"); // set position for popover after group is created
                                        if (this.direction === "top") this.$popover.css({
                                            left: bnd.left,
                                            top: bnd.top - this.$popover.outerHeight() - POPOVER_DIST
                                        });
                                        else this.$popover.css({
                                            left: bnd.left,
                                            top: bnd.top + bnd.height + POPOVER_DIST
                                        });
                                    }
                                } else this.hide();
                            }
                        }
                    },
                    {
                        key: "show",
                        value: function show() {
                            this.$popover.show();
                        }
                    },
                    {
                        key: "hide",
                        value: function hide() {
                            this.$popover.hide();
                        }
                    }
                ]);
                return HintPopover;
            }();
            // CONCATENATED MODULE: ./src/js/base/settings.js
            external_root_jQuery_commonjs2_jquery_commonjs_jquery_amd_jquery_default.a.summernote = external_root_jQuery_commonjs2_jquery_commonjs_jquery_amd_jquery_default.a.extend(external_root_jQuery_commonjs2_jquery_commonjs_jquery_amd_jquery_default.a.summernote, {
                version: "0.8.16",
                plugins: {},
                dom: dom,
                range: range,
                lists: lists,
                options: {
                    langInfo: external_root_jQuery_commonjs2_jquery_commonjs_jquery_amd_jquery_default.a.summernote.lang["en-US"],
                    editing: true,
                    modules: {
                        "editor": Editor_Editor,
                        "clipboard": Clipboard_Clipboard,
                        "dropzone": Dropzone_Dropzone,
                        "codeview": Codeview_CodeView,
                        "statusbar": Statusbar_Statusbar,
                        "fullscreen": Fullscreen_Fullscreen,
                        "handle": Handle_Handle,
                        // FIXME: HintPopover must be front of autolink
                        //  - Script error about range when Enter key is pressed on hint popover
                        "hintPopover": HintPopover_HintPopover,
                        "autoLink": AutoLink_AutoLink,
                        "autoSync": AutoSync_AutoSync,
                        "autoReplace": AutoReplace_AutoReplace,
                        "placeholder": Placeholder_Placeholder,
                        "buttons": Buttons_Buttons,
                        "toolbar": Toolbar_Toolbar,
                        "linkDialog": LinkDialog_LinkDialog,
                        "linkPopover": LinkPopover_LinkPopover,
                        "imageDialog": ImageDialog_ImageDialog,
                        "imagePopover": ImagePopover_ImagePopover,
                        "tablePopover": TablePopover_TablePopover,
                        "videoDialog": VideoDialog_VideoDialog,
                        "helpDialog": HelpDialog_HelpDialog,
                        "airPopover": AirPopover_AirPopover
                    },
                    buttons: {},
                    lang: "en-US",
                    followingToolbar: false,
                    toolbarPosition: "top",
                    otherStaticBar: "",
                    // toolbar
                    toolbar: [
                        [
                            "style",
                            [
                                "style"
                            ]
                        ],
                        [
                            "font",
                            [
                                "bold",
                                "underline",
                                "clear"
                            ]
                        ],
                        [
                            "fontname",
                            [
                                "fontname"
                            ]
                        ],
                        [
                            "color",
                            [
                                "color"
                            ]
                        ],
                        [
                            "para",
                            [
                                "ul",
                                "ol",
                                "paragraph"
                            ]
                        ],
                        [
                            "table",
                            [
                                "table"
                            ]
                        ],
                        [
                            "insert",
                            [
                                "link",
                                "picture",
                                "video"
                            ]
                        ],
                        [
                            "view",
                            [
                                "fullscreen",
                                "codeview",
                                "help"
                            ]
                        ]
                    ],
                    // popover
                    popatmouse: true,
                    popover: {
                        image: [
                            [
                                "resize",
                                [
                                    "resizeFull",
                                    "resizeHalf",
                                    "resizeQuarter",
                                    "resizeNone"
                                ]
                            ],
                            [
                                "float",
                                [
                                    "floatLeft",
                                    "floatRight",
                                    "floatNone"
                                ]
                            ],
                            [
                                "remove",
                                [
                                    "removeMedia"
                                ]
                            ]
                        ],
                        link: [
                            [
                                "link",
                                [
                                    "linkDialogShow",
                                    "unlink"
                                ]
                            ]
                        ],
                        table: [
                            [
                                "add",
                                [
                                    "addRowDown",
                                    "addRowUp",
                                    "addColLeft",
                                    "addColRight"
                                ]
                            ],
                            [
                                "delete",
                                [
                                    "deleteRow",
                                    "deleteCol",
                                    "deleteTable"
                                ]
                            ]
                        ],
                        air: [
                            [
                                "color",
                                [
                                    "color"
                                ]
                            ],
                            [
                                "font",
                                [
                                    "bold",
                                    "underline",
                                    "clear"
                                ]
                            ],
                            [
                                "para",
                                [
                                    "ul",
                                    "paragraph"
                                ]
                            ],
                            [
                                "table",
                                [
                                    "table"
                                ]
                            ],
                            [
                                "insert",
                                [
                                    "link",
                                    "picture"
                                ]
                            ],
                            [
                                "view",
                                [
                                    "fullscreen",
                                    "codeview"
                                ]
                            ]
                        ]
                    },
                    // air mode: inline editor
                    airMode: false,
                    overrideContextMenu: false,
                    // TBD
                    width: null,
                    height: null,
                    linkTargetBlank: true,
                    useProtocol: true,
                    defaultProtocol: "http://",
                    focus: false,
                    tabDisabled: false,
                    tabSize: 4,
                    styleWithCSS: false,
                    shortcuts: true,
                    textareaAutoSync: true,
                    tooltip: "auto",
                    container: null,
                    maxTextLength: 0,
                    blockquoteBreakingLevel: 2,
                    spellCheck: true,
                    disableGrammar: false,
                    placeholder: null,
                    inheritPlaceholder: false,
                    // TODO: need to be documented
                    recordEveryKeystroke: false,
                    historyLimit: 200,
                    // TODO: need to be documented
                    hintMode: "word",
                    hintSelect: "after",
                    hintDirection: "bottom",
                    styleTags: [
                        "p",
                        "blockquote",
                        "pre",
                        "h1",
                        "h2",
                        "h3",
                        "h4",
                        "h5",
                        "h6"
                    ],
                    fontNames: [
                        "Arial",
                        "Arial Black",
                        "Comic Sans MS",
                        "Courier New",
                        "Helvetica Neue",
                        "Helvetica",
                        "Impact",
                        "Lucida Grande",
                        "Tahoma",
                        "Times New Roman",
                        "Verdana"
                    ],
                    fontNamesIgnoreCheck: [],
                    addDefaultFonts: true,
                    fontSizes: [
                        "8",
                        "9",
                        "10",
                        "11",
                        "12",
                        "14",
                        "18",
                        "24",
                        "36"
                    ],
                    fontSizeUnits: [
                        "px",
                        "pt"
                    ],
                    // pallete colors(n x n)
                    colors: [
                        [
                            "#000000",
                            "#424242",
                            "#636363",
                            "#9C9C94",
                            "#CEC6CE",
                            "#EFEFEF",
                            "#F7F7F7",
                            "#FFFFFF"
                        ],
                        [
                            "#FF0000",
                            "#FF9C00",
                            "#FFFF00",
                            "#00FF00",
                            "#00FFFF",
                            "#0000FF",
                            "#9C00FF",
                            "#FF00FF"
                        ],
                        [
                            "#F7C6CE",
                            "#FFE7CE",
                            "#FFEFC6",
                            "#D6EFD6",
                            "#CEDEE7",
                            "#CEE7F7",
                            "#D6D6E7",
                            "#E7D6DE"
                        ],
                        [
                            "#E79C9C",
                            "#FFC69C",
                            "#FFE79C",
                            "#B5D6A5",
                            "#A5C6CE",
                            "#9CC6EF",
                            "#B5A5D6",
                            "#D6A5BD"
                        ],
                        [
                            "#E76363",
                            "#F7AD6B",
                            "#FFD663",
                            "#94BD7B",
                            "#73A5AD",
                            "#6BADDE",
                            "#8C7BC6",
                            "#C67BA5"
                        ],
                        [
                            "#CE0000",
                            "#E79439",
                            "#EFC631",
                            "#6BA54A",
                            "#4A7B8C",
                            "#3984C6",
                            "#634AA5",
                            "#A54A7B"
                        ],
                        [
                            "#9C0000",
                            "#B56308",
                            "#BD9400",
                            "#397B21",
                            "#104A5A",
                            "#085294",
                            "#311873",
                            "#731842"
                        ],
                        [
                            "#630000",
                            "#7B3900",
                            "#846300",
                            "#295218",
                            "#083139",
                            "#003163",
                            "#21104A",
                            "#4A1031"
                        ]
                    ],
                    // http://chir.ag/projects/name-that-color/
                    colorsName: [
                        [
                            "Black",
                            "Tundora",
                            "Dove Gray",
                            "Star Dust",
                            "Pale Slate",
                            "Gallery",
                            "Alabaster",
                            "White"
                        ],
                        [
                            "Red",
                            "Orange Peel",
                            "Yellow",
                            "Green",
                            "Cyan",
                            "Blue",
                            "Electric Violet",
                            "Magenta"
                        ],
                        [
                            "Azalea",
                            "Karry",
                            "Egg White",
                            "Zanah",
                            "Botticelli",
                            "Tropical Blue",
                            "Mischka",
                            "Twilight"
                        ],
                        [
                            "Tonys Pink",
                            "Peach Orange",
                            "Cream Brulee",
                            "Sprout",
                            "Casper",
                            "Perano",
                            "Cold Purple",
                            "Careys Pink"
                        ],
                        [
                            "Mandy",
                            "Rajah",
                            "Dandelion",
                            "Olivine",
                            "Gulf Stream",
                            "Viking",
                            "Blue Marguerite",
                            "Puce"
                        ],
                        [
                            "Guardsman Red",
                            "Fire Bush",
                            "Golden Dream",
                            "Chelsea Cucumber",
                            "Smalt Blue",
                            "Boston Blue",
                            "Butterfly Bush",
                            "Cadillac"
                        ],
                        [
                            "Sangria",
                            "Mai Tai",
                            "Buddha Gold",
                            "Forest Green",
                            "Eden",
                            "Venice Blue",
                            "Meteorite",
                            "Claret"
                        ],
                        [
                            "Rosewood",
                            "Cinnamon",
                            "Olive",
                            "Parsley",
                            "Tiber",
                            "Midnight Blue",
                            "Valentino",
                            "Loulou"
                        ]
                    ],
                    colorButton: {
                        foreColor: "#000000",
                        backColor: "#FFFF00"
                    },
                    lineHeights: [
                        "1.0",
                        "1.2",
                        "1.4",
                        "1.5",
                        "1.6",
                        "1.8",
                        "2.0",
                        "3.0"
                    ],
                    tableClassName: "table table-bordered",
                    insertTableMaxSize: {
                        col: 10,
                        row: 10
                    },
                    // By default, dialogs are attached in container.
                    dialogsInBody: false,
                    dialogsFade: false,
                    maximumImageFileSize: null,
                    callbacks: {
                        onBeforeCommand: null,
                        onBlur: null,
                        onBlurCodeview: null,
                        onChange: null,
                        onChangeCodeview: null,
                        onDialogShown: null,
                        onEnter: null,
                        onFocus: null,
                        onImageLinkInsert: null,
                        onImageUpload: null,
                        onImageUploadError: null,
                        onInit: null,
                        onKeydown: null,
                        onKeyup: null,
                        onMousedown: null,
                        onMouseup: null,
                        onPaste: null,
                        onScroll: null
                    },
                    codemirror: {
                        mode: "text/html",
                        htmlMode: true,
                        lineNumbers: true
                    },
                    codeviewFilter: false,
                    codeviewFilterRegex: /<\/*(?:applet|b(?:ase|gsound|link)|embed|frame(?:set)?|ilayer|l(?:ayer|ink)|meta|object|s(?:cript|tyle)|t(?:itle|extarea)|xml)[^>]*?>/gi,
                    codeviewIframeFilter: true,
                    codeviewIframeWhitelistSrc: [],
                    codeviewIframeWhitelistSrcBase: [
                        "www.youtube.com",
                        "www.youtube-nocookie.com",
                        "www.facebook.com",
                        "vine.co",
                        "instagram.com",
                        "player.vimeo.com",
                        "www.dailymotion.com",
                        "player.youku.com",
                        "v.qq.com"
                    ],
                    keyMap: {
                        pc: {
                            "ENTER": "insertParagraph",
                            "CTRL+Z": "undo",
                            "CTRL+Y": "redo",
                            "TAB": "tab",
                            "SHIFT+TAB": "untab",
                            "CTRL+B": "bold",
                            "CTRL+I": "italic",
                            "CTRL+U": "underline",
                            "CTRL+SHIFT+S": "strikethrough",
                            "CTRL+BACKSLASH": "removeFormat",
                            "CTRL+SHIFT+L": "justifyLeft",
                            "CTRL+SHIFT+E": "justifyCenter",
                            "CTRL+SHIFT+R": "justifyRight",
                            "CTRL+SHIFT+J": "justifyFull",
                            "CTRL+SHIFT+NUM7": "insertUnorderedList",
                            "CTRL+SHIFT+NUM8": "insertOrderedList",
                            "CTRL+LEFTBRACKET": "outdent",
                            "CTRL+RIGHTBRACKET": "indent",
                            "CTRL+NUM0": "formatPara",
                            "CTRL+NUM1": "formatH1",
                            "CTRL+NUM2": "formatH2",
                            "CTRL+NUM3": "formatH3",
                            "CTRL+NUM4": "formatH4",
                            "CTRL+NUM5": "formatH5",
                            "CTRL+NUM6": "formatH6",
                            "CTRL+ENTER": "insertHorizontalRule",
                            "CTRL+K": "linkDialog.show"
                        },
                        mac: {
                            "ENTER": "insertParagraph",
                            "CMD+Z": "undo",
                            "CMD+SHIFT+Z": "redo",
                            "TAB": "tab",
                            "SHIFT+TAB": "untab",
                            "CMD+B": "bold",
                            "CMD+I": "italic",
                            "CMD+U": "underline",
                            "CMD+SHIFT+S": "strikethrough",
                            "CMD+BACKSLASH": "removeFormat",
                            "CMD+SHIFT+L": "justifyLeft",
                            "CMD+SHIFT+E": "justifyCenter",
                            "CMD+SHIFT+R": "justifyRight",
                            "CMD+SHIFT+J": "justifyFull",
                            "CMD+SHIFT+NUM7": "insertUnorderedList",
                            "CMD+SHIFT+NUM8": "insertOrderedList",
                            "CMD+LEFTBRACKET": "outdent",
                            "CMD+RIGHTBRACKET": "indent",
                            "CMD+NUM0": "formatPara",
                            "CMD+NUM1": "formatH1",
                            "CMD+NUM2": "formatH2",
                            "CMD+NUM3": "formatH3",
                            "CMD+NUM4": "formatH4",
                            "CMD+NUM5": "formatH5",
                            "CMD+NUM6": "formatH6",
                            "CMD+ENTER": "insertHorizontalRule",
                            "CMD+K": "linkDialog.show"
                        }
                    },
                    icons: {
                        "align": "note-icon-align",
                        "alignCenter": "note-icon-align-center",
                        "alignJustify": "note-icon-align-justify",
                        "alignLeft": "note-icon-align-left",
                        "alignRight": "note-icon-align-right",
                        "rowBelow": "note-icon-row-below",
                        "colBefore": "note-icon-col-before",
                        "colAfter": "note-icon-col-after",
                        "rowAbove": "note-icon-row-above",
                        "rowRemove": "note-icon-row-remove",
                        "colRemove": "note-icon-col-remove",
                        "indent": "note-icon-align-indent",
                        "outdent": "note-icon-align-outdent",
                        "arrowsAlt": "note-icon-arrows-alt",
                        "bold": "note-icon-bold",
                        "caret": "note-icon-caret",
                        "circle": "note-icon-circle",
                        "close": "note-icon-close",
                        "code": "note-icon-code",
                        "eraser": "note-icon-eraser",
                        "floatLeft": "note-icon-float-left",
                        "floatRight": "note-icon-float-right",
                        "font": "note-icon-font",
                        "frame": "note-icon-frame",
                        "italic": "note-icon-italic",
                        "link": "note-icon-link",
                        "unlink": "note-icon-chain-broken",
                        "magic": "note-icon-magic",
                        "menuCheck": "note-icon-menu-check",
                        "minus": "note-icon-minus",
                        "orderedlist": "note-icon-orderedlist",
                        "pencil": "note-icon-pencil",
                        "picture": "note-icon-picture",
                        "question": "note-icon-question",
                        "redo": "note-icon-redo",
                        "rollback": "note-icon-rollback",
                        "square": "note-icon-square",
                        "strikethrough": "note-icon-strikethrough",
                        "subscript": "note-icon-subscript",
                        "superscript": "note-icon-superscript",
                        "table": "note-icon-table",
                        "textHeight": "note-icon-text-height",
                        "trash": "note-icon-trash",
                        "underline": "note-icon-underline",
                        "undo": "note-icon-undo",
                        "unorderedlist": "note-icon-unorderedlist",
                        "video": "note-icon-video"
                    }
                }
            });
        /***/ },
        /***/ 51: /***/ function(module1, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            // EXTERNAL MODULE: external {"root":"jQuery","commonjs2":"jquery","commonjs":"jquery","amd":"jquery"}
            var external_root_jQuery_commonjs2_jquery_commonjs_jquery_amd_jquery_ = __webpack_require__(0);
            var external_root_jQuery_commonjs2_jquery_commonjs_jquery_amd_jquery_default = /*#__PURE__*/ __webpack_require__.n(external_root_jQuery_commonjs2_jquery_commonjs_jquery_amd_jquery_);
            // EXTERNAL MODULE: ./src/js/base/renderer.js
            var renderer = __webpack_require__(1);
            // CONCATENATED MODULE: ./src/js/lite/ui/TooltipUI.js
            function _classCallCheck(instance, Constructor) {
                if (!(instance instanceof Constructor)) throw new TypeError("Cannot call a class as a function");
            }
            function _defineProperties(target, props) {
                for(var i = 0; i < props.length; i++){
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    descriptor.configurable = true;
                    if ("value" in descriptor) descriptor.writable = true;
                    Object.defineProperty(target, descriptor.key, descriptor);
                }
            }
            function _createClass(Constructor, protoProps, staticProps) {
                if (protoProps) _defineProperties(Constructor.prototype, protoProps);
                if (staticProps) _defineProperties(Constructor, staticProps);
                return Constructor;
            }
            var TooltipUI_TooltipUI = /*#__PURE__*/ function() {
                function TooltipUI($node, options) {
                    _classCallCheck(this, TooltipUI);
                    this.$node = $node;
                    this.options = external_root_jQuery_commonjs2_jquery_commonjs_jquery_amd_jquery_default.a.extend({}, {
                        title: "",
                        target: options.container,
                        trigger: "hover focus",
                        placement: "bottom"
                    }, options); // create tooltip node
                    this.$tooltip = external_root_jQuery_commonjs2_jquery_commonjs_jquery_amd_jquery_default()([
                        '<div class="note-tooltip">',
                        '<div class="note-tooltip-arrow"/>',
                        '<div class="note-tooltip-content"/>',
                        "</div>"
                    ].join("")); // define event
                    if (this.options.trigger !== "manual") {
                        var showCallback = this.show.bind(this);
                        var hideCallback = this.hide.bind(this);
                        var toggleCallback = this.toggle.bind(this);
                        this.options.trigger.split(" ").forEach(function(eventName) {
                            if (eventName === "hover") {
                                $node.off("mouseenter mouseleave");
                                $node.on("mouseenter", showCallback).on("mouseleave", hideCallback);
                            } else if (eventName === "click") $node.on("click", toggleCallback);
                            else if (eventName === "focus") $node.on("focus", showCallback).on("blur", hideCallback);
                        });
                    }
                }
                _createClass(TooltipUI, [
                    {
                        key: "show",
                        value: function show() {
                            var $node = this.$node;
                            var offset = $node.offset();
                            var targetOffset = external_root_jQuery_commonjs2_jquery_commonjs_jquery_amd_jquery_default()(this.options.target).offset();
                            offset.top -= targetOffset.top;
                            offset.left -= targetOffset.left;
                            var $tooltip = this.$tooltip;
                            var title = this.options.title || $node.attr("title") || $node.data("title");
                            var placement = this.options.placement || $node.data("placement");
                            $tooltip.addClass(placement);
                            $tooltip.find(".note-tooltip-content").text(title);
                            $tooltip.appendTo(this.options.target);
                            var nodeWidth = $node.outerWidth();
                            var nodeHeight = $node.outerHeight();
                            var tooltipWidth = $tooltip.outerWidth();
                            var tooltipHeight = $tooltip.outerHeight();
                            if (placement === "bottom") $tooltip.css({
                                top: offset.top + nodeHeight,
                                left: offset.left + (nodeWidth / 2 - tooltipWidth / 2)
                            });
                            else if (placement === "top") $tooltip.css({
                                top: offset.top - tooltipHeight,
                                left: offset.left + (nodeWidth / 2 - tooltipWidth / 2)
                            });
                            else if (placement === "left") $tooltip.css({
                                top: offset.top + (nodeHeight / 2 - tooltipHeight / 2),
                                left: offset.left - tooltipWidth
                            });
                            else if (placement === "right") $tooltip.css({
                                top: offset.top + (nodeHeight / 2 - tooltipHeight / 2),
                                left: offset.left + nodeWidth
                            });
                            $tooltip.addClass("in");
                        }
                    },
                    {
                        key: "hide",
                        value: function hide() {
                            var _this = this;
                            this.$tooltip.removeClass("in");
                            setTimeout(function() {
                                _this.$tooltip.remove();
                            }, 200);
                        }
                    },
                    {
                        key: "toggle",
                        value: function toggle() {
                            if (this.$tooltip.hasClass("in")) this.hide();
                            else this.show();
                        }
                    }
                ]);
                return TooltipUI;
            }();
            /* harmony default export */ var ui_TooltipUI = TooltipUI_TooltipUI;
            // CONCATENATED MODULE: ./src/js/lite/ui/DropdownUI.js
            function DropdownUI_classCallCheck(instance, Constructor) {
                if (!(instance instanceof Constructor)) throw new TypeError("Cannot call a class as a function");
            }
            function DropdownUI_defineProperties(target, props) {
                for(var i = 0; i < props.length; i++){
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    descriptor.configurable = true;
                    if ("value" in descriptor) descriptor.writable = true;
                    Object.defineProperty(target, descriptor.key, descriptor);
                }
            }
            function DropdownUI_createClass(Constructor, protoProps, staticProps) {
                if (protoProps) DropdownUI_defineProperties(Constructor.prototype, protoProps);
                if (staticProps) DropdownUI_defineProperties(Constructor, staticProps);
                return Constructor;
            }
            var DropdownUI_DropdownUI = /*#__PURE__*/ function() {
                function DropdownUI($node, options) {
                    DropdownUI_classCallCheck(this, DropdownUI);
                    this.$button = $node;
                    this.options = external_root_jQuery_commonjs2_jquery_commonjs_jquery_amd_jquery_default.a.extend({}, {
                        target: options.container
                    }, options);
                    this.setEvent();
                }
                DropdownUI_createClass(DropdownUI, [
                    {
                        key: "setEvent",
                        value: function setEvent() {
                            var _this = this;
                            this.$button.on("click", function(e) {
                                _this.toggle();
                                e.stopImmediatePropagation();
                            });
                        }
                    },
                    {
                        key: "clear",
                        value: function clear() {
                            var $parent = external_root_jQuery_commonjs2_jquery_commonjs_jquery_amd_jquery_default()(".note-btn-group.open");
                            $parent.find(".note-btn.active").removeClass("active");
                            $parent.removeClass("open");
                        }
                    },
                    {
                        key: "show",
                        value: function show() {
                            this.$button.addClass("active");
                            this.$button.parent().addClass("open");
                            var $dropdown = this.$button.next();
                            var offset = $dropdown.offset();
                            var width = $dropdown.outerWidth();
                            var windowWidth = external_root_jQuery_commonjs2_jquery_commonjs_jquery_amd_jquery_default()(window).width();
                            var targetMarginRight = parseFloat(external_root_jQuery_commonjs2_jquery_commonjs_jquery_amd_jquery_default()(this.options.target).css("margin-right"));
                            if (offset.left + width > windowWidth - targetMarginRight) $dropdown.css("margin-left", windowWidth - targetMarginRight - (offset.left + width));
                            else $dropdown.css("margin-left", "");
                        }
                    },
                    {
                        key: "hide",
                        value: function hide() {
                            this.$button.removeClass("active");
                            this.$button.parent().removeClass("open");
                        }
                    },
                    {
                        key: "toggle",
                        value: function toggle() {
                            var isOpened = this.$button.parent().hasClass("open");
                            this.clear();
                            if (isOpened) this.hide();
                            else this.show();
                        }
                    }
                ]);
                return DropdownUI;
            }();
            external_root_jQuery_commonjs2_jquery_commonjs_jquery_amd_jquery_default()(document).on("click", function(e) {
                if (!external_root_jQuery_commonjs2_jquery_commonjs_jquery_amd_jquery_default()(e.target).closest(".note-btn-group").length) {
                    external_root_jQuery_commonjs2_jquery_commonjs_jquery_amd_jquery_default()(".note-btn-group.open").removeClass("open");
                    external_root_jQuery_commonjs2_jquery_commonjs_jquery_amd_jquery_default()(".note-btn-group .note-btn.active").removeClass("active");
                }
            });
            external_root_jQuery_commonjs2_jquery_commonjs_jquery_amd_jquery_default()(document).on("click.note-dropdown-menu", function(e) {
                external_root_jQuery_commonjs2_jquery_commonjs_jquery_amd_jquery_default()(e.target).closest(".note-dropdown-menu").parent().removeClass("open");
                external_root_jQuery_commonjs2_jquery_commonjs_jquery_amd_jquery_default()(e.target).closest(".note-dropdown-menu").parent().find(".note-btn.active").removeClass("active");
            });
            /* harmony default export */ var ui_DropdownUI = DropdownUI_DropdownUI;
            // CONCATENATED MODULE: ./src/js/lite/ui/ModalUI.js
            function ModalUI_classCallCheck(instance, Constructor) {
                if (!(instance instanceof Constructor)) throw new TypeError("Cannot call a class as a function");
            }
            function ModalUI_defineProperties(target, props) {
                for(var i = 0; i < props.length; i++){
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    descriptor.configurable = true;
                    if ("value" in descriptor) descriptor.writable = true;
                    Object.defineProperty(target, descriptor.key, descriptor);
                }
            }
            function ModalUI_createClass(Constructor, protoProps, staticProps) {
                if (protoProps) ModalUI_defineProperties(Constructor.prototype, protoProps);
                if (staticProps) ModalUI_defineProperties(Constructor, staticProps);
                return Constructor;
            }
            var ModalUI_ModalUI = /*#__PURE__*/ function() {
                function ModalUI($node) {
                    ModalUI_classCallCheck(this, ModalUI);
                    this.$modal = $node;
                    this.$backdrop = external_root_jQuery_commonjs2_jquery_commonjs_jquery_amd_jquery_default()('<div class="note-modal-backdrop"/>');
                }
                ModalUI_createClass(ModalUI, [
                    {
                        key: "show",
                        value: function show() {
                            var _this = this;
                            this.$backdrop.appendTo(document.body).show();
                            this.$modal.addClass("open").show();
                            this.$modal.trigger("note.modal.show");
                            this.$modal.off("click", ".close").on("click", ".close", this.hide.bind(this));
                            this.$modal.on("keydown", function(event) {
                                if (event.which === 27) {
                                    event.preventDefault();
                                    _this.hide();
                                }
                            });
                        }
                    },
                    {
                        key: "hide",
                        value: function hide() {
                            this.$modal.removeClass("open").hide();
                            this.$backdrop.hide();
                            this.$modal.trigger("note.modal.hide");
                            this.$modal.off("keydown");
                        }
                    }
                ]);
                return ModalUI;
            }();
            /* harmony default export */ var ui_ModalUI = ModalUI_ModalUI;
            // CONCATENATED MODULE: ./src/js/lite/ui.js
            var editor = renderer["a" /* default */ ].create('<div class="note-editor note-frame"/>');
            var toolbar = renderer["a" /* default */ ].create('<div class="note-toolbar" role="toolbar"/>');
            var editingArea = renderer["a" /* default */ ].create('<div class="note-editing-area"/>');
            var codable = renderer["a" /* default */ ].create('<textarea class="note-codable" aria-multiline="true"/>');
            var editable = renderer["a" /* default */ ].create('<div class="note-editable" contentEditable="true" role="textbox" aria-multiline="true"/>');
            var statusbar = renderer["a" /* default */ ].create([
                '<output class="note-status-output" role="status" aria-live="polite"/>',
                '<div class="note-statusbar" role="status">',
                '<div class="note-resizebar" aria-label="resize">',
                '<div class="note-icon-bar"/>',
                '<div class="note-icon-bar"/>',
                '<div class="note-icon-bar"/>',
                "</div>",
                "</div>"
            ].join(""));
            var airEditor = renderer["a" /* default */ ].create('<div class="note-editor note-airframe"/>');
            var airEditable = renderer["a" /* default */ ].create([
                '<div class="note-editable" contentEditable="true" role="textbox" aria-multiline="true"/>',
                '<output class="note-status-output" role="status" aria-live="polite"/>'
            ].join(""));
            var buttonGroup = renderer["a" /* default */ ].create('<div class="note-btn-group">');
            var ui_button = renderer["a" /* default */ ].create('<button type="button" class="note-btn" tabindex="-1">', function($node, options) {
                // set button type
                if (options && options.tooltip) {
                    $node.attr({
                        "aria-label": options.tooltip
                    });
                    $node.data("_lite_tooltip", new ui_TooltipUI($node, {
                        title: options.tooltip,
                        container: options.container
                    })).on("click", function(e) {
                        external_root_jQuery_commonjs2_jquery_commonjs_jquery_amd_jquery_default()(e.currentTarget).data("_lite_tooltip").hide();
                    });
                }
                if (options.contents) $node.html(options.contents);
                if (options && options.data && options.data.toggle === "dropdown") $node.data("_lite_dropdown", new ui_DropdownUI($node, {
                    container: options.container
                }));
            });
            var dropdown = renderer["a" /* default */ ].create('<div class="note-dropdown-menu" role="list">', function($node, options) {
                var markup = Array.isArray(options.items) ? options.items.map(function(item) {
                    var value = typeof item === "string" ? item : item.value || "";
                    var content = options.template ? options.template(item) : item;
                    var $temp = external_root_jQuery_commonjs2_jquery_commonjs_jquery_amd_jquery_default()('<a class="note-dropdown-item" href="#" data-value="' + value + '" role="listitem" aria-label="' + value + '"></a>');
                    $temp.html(content).data("item", item);
                    return $temp;
                }) : options.items;
                $node.html(markup).attr({
                    "aria-label": options.title
                });
                $node.on("click", "> .note-dropdown-item", function(e) {
                    var $a = external_root_jQuery_commonjs2_jquery_commonjs_jquery_amd_jquery_default()(this);
                    var item = $a.data("item");
                    var value = $a.data("value");
                    if (item.click) item.click($a);
                    else if (options.itemClick) options.itemClick(e, item, value);
                });
            });
            var dropdownCheck = renderer["a" /* default */ ].create('<div class="note-dropdown-menu note-check" role="list">', function($node, options) {
                var markup = Array.isArray(options.items) ? options.items.map(function(item) {
                    var value = typeof item === "string" ? item : item.value || "";
                    var content = options.template ? options.template(item) : item;
                    var $temp = external_root_jQuery_commonjs2_jquery_commonjs_jquery_amd_jquery_default()('<a class="note-dropdown-item" href="#" data-value="' + value + '" role="listitem" aria-label="' + item + '"></a>');
                    $temp.html([
                        icon(options.checkClassName),
                        " ",
                        content
                    ]).data("item", item);
                    return $temp;
                }) : options.items;
                $node.html(markup).attr({
                    "aria-label": options.title
                });
                $node.on("click", "> .note-dropdown-item", function(e) {
                    var $a = external_root_jQuery_commonjs2_jquery_commonjs_jquery_amd_jquery_default()(this);
                    var item = $a.data("item");
                    var value = $a.data("value");
                    if (item.click) item.click($a);
                    else if (options.itemClick) options.itemClick(e, item, value);
                });
            });
            var dropdownButtonContents = function dropdownButtonContents(contents, options) {
                return contents + " " + icon(options.icons.caret, "span");
            };
            var dropdownButton = function dropdownButton(opt, callback) {
                return buttonGroup([
                    ui_button({
                        className: "dropdown-toggle",
                        contents: opt.title + " " + icon("note-icon-caret"),
                        tooltip: opt.tooltip,
                        data: {
                            toggle: "dropdown"
                        }
                    }),
                    dropdown({
                        className: opt.className,
                        items: opt.items,
                        template: opt.template,
                        itemClick: opt.itemClick
                    })
                ], {
                    callback: callback
                }).render();
            };
            var dropdownCheckButton = function dropdownCheckButton(opt, callback) {
                return buttonGroup([
                    ui_button({
                        className: "dropdown-toggle",
                        contents: opt.title + " " + icon("note-icon-caret"),
                        tooltip: opt.tooltip,
                        data: {
                            toggle: "dropdown"
                        }
                    }),
                    dropdownCheck({
                        className: opt.className,
                        checkClassName: opt.checkClassName,
                        items: opt.items,
                        template: opt.template,
                        itemClick: opt.itemClick
                    })
                ], {
                    callback: callback
                }).render();
            };
            var paragraphDropdownButton = function paragraphDropdownButton(opt) {
                return buttonGroup([
                    ui_button({
                        className: "dropdown-toggle",
                        contents: opt.title + " " + icon("note-icon-caret"),
                        tooltip: opt.tooltip,
                        data: {
                            toggle: "dropdown"
                        }
                    }),
                    dropdown([
                        buttonGroup({
                            className: "note-align",
                            children: opt.items[0]
                        }),
                        buttonGroup({
                            className: "note-list",
                            children: opt.items[1]
                        })
                    ])
                ]).render();
            };
            var ui_tableMoveHandler = function tableMoveHandler(event, col, row) {
                var PX_PER_EM = 18;
                var $picker = external_root_jQuery_commonjs2_jquery_commonjs_jquery_amd_jquery_default()(event.target.parentNode); // target is mousecatcher
                var $dimensionDisplay = $picker.next();
                var $catcher = $picker.find(".note-dimension-picker-mousecatcher");
                var $highlighted = $picker.find(".note-dimension-picker-highlighted");
                var $unhighlighted = $picker.find(".note-dimension-picker-unhighlighted");
                var posOffset; // HTML5 with jQuery - e.offsetX is undefined in Firefox
                if (event.offsetX === undefined) {
                    var posCatcher = external_root_jQuery_commonjs2_jquery_commonjs_jquery_amd_jquery_default()(event.target).offset();
                    posOffset = {
                        x: event.pageX - posCatcher.left,
                        y: event.pageY - posCatcher.top
                    };
                } else posOffset = {
                    x: event.offsetX,
                    y: event.offsetY
                };
                var dim = {
                    c: Math.ceil(posOffset.x / PX_PER_EM) || 1,
                    r: Math.ceil(posOffset.y / PX_PER_EM) || 1
                };
                $highlighted.css({
                    width: dim.c + "em",
                    height: dim.r + "em"
                });
                $catcher.data("value", dim.c + "x" + dim.r);
                if (dim.c > 3 && dim.c < col) $unhighlighted.css({
                    width: dim.c + 1 + "em"
                });
                if (dim.r > 3 && dim.r < row) $unhighlighted.css({
                    height: dim.r + 1 + "em"
                });
                $dimensionDisplay.html(dim.c + " x " + dim.r);
            };
            var tableDropdownButton = function tableDropdownButton(opt) {
                return buttonGroup([
                    ui_button({
                        className: "dropdown-toggle",
                        contents: opt.title + " " + icon("note-icon-caret"),
                        tooltip: opt.tooltip,
                        data: {
                            toggle: "dropdown"
                        }
                    }),
                    dropdown({
                        className: "note-table",
                        items: [
                            '<div class="note-dimension-picker">',
                            '<div class="note-dimension-picker-mousecatcher" data-event="insertTable" data-value="1x1"/>',
                            '<div class="note-dimension-picker-highlighted"/>',
                            '<div class="note-dimension-picker-unhighlighted"/>',
                            "</div>",
                            '<div class="note-dimension-display">1 x 1</div>'
                        ].join("")
                    })
                ], {
                    callback: function callback($node) {
                        var $catcher = $node.find(".note-dimension-picker-mousecatcher");
                        $catcher.css({
                            width: opt.col + "em",
                            height: opt.row + "em"
                        }).mousedown(opt.itemClick).mousemove(function(e) {
                            ui_tableMoveHandler(e, opt.col, opt.row);
                        });
                    }
                }).render();
            };
            var palette = renderer["a" /* default */ ].create('<div class="note-color-palette"/>', function($node, options) {
                var contents = [];
                for(var row = 0, rowSize = options.colors.length; row < rowSize; row++){
                    var eventName = options.eventName;
                    var colors = options.colors[row];
                    var colorsName = options.colorsName[row];
                    var buttons = [];
                    for(var col = 0, colSize = colors.length; col < colSize; col++){
                        var color = colors[col];
                        var colorName = colorsName[col];
                        buttons.push([
                            '<button type="button" class="note-btn note-color-btn"',
                            'style="background-color:',
                            color,
                            '" ',
                            'data-event="',
                            eventName,
                            '" ',
                            'data-value="',
                            color,
                            '" ',
                            'data-title="',
                            colorName,
                            '" ',
                            'aria-label="',
                            colorName,
                            '" ',
                            'data-toggle="button" tabindex="-1"></button>'
                        ].join(""));
                    }
                    contents.push('<div class="note-color-row">' + buttons.join("") + "</div>");
                }
                $node.html(contents.join(""));
                $node.find(".note-color-btn").each(function() {
                    external_root_jQuery_commonjs2_jquery_commonjs_jquery_amd_jquery_default()(this).data("_lite_tooltip", new ui_TooltipUI(external_root_jQuery_commonjs2_jquery_commonjs_jquery_amd_jquery_default()(this), {
                        container: options.container
                    }));
                });
            });
            var ui_colorDropdownButton = function colorDropdownButton(opt, type) {
                return buttonGroup({
                    className: "note-color",
                    children: [
                        ui_button({
                            className: "note-current-color-button",
                            contents: opt.title,
                            tooltip: opt.lang.color.recent,
                            click: opt.currentClick,
                            callback: function callback($button) {
                                var $recentColor = $button.find(".note-recent-color");
                                if (type !== "foreColor") {
                                    $recentColor.css("background-color", "#FFFF00");
                                    $button.attr("data-backColor", "#FFFF00");
                                }
                            }
                        }),
                        ui_button({
                            className: "dropdown-toggle",
                            contents: icon("note-icon-caret"),
                            tooltip: opt.lang.color.more,
                            data: {
                                toggle: "dropdown"
                            }
                        }),
                        dropdown({
                            items: [
                                "<div>",
                                '<div class="note-btn-group btn-background-color">',
                                '<div class="note-palette-title">' + opt.lang.color.background + "</div>",
                                "<div>",
                                '<button type="button" class="note-color-reset note-btn note-btn-block" data-event="backColor" data-value="inherit">',
                                opt.lang.color.transparent,
                                "</button>",
                                "</div>",
                                '<div class="note-holder" data-event="backColor"/>',
                                '<div class="btn-sm">',
                                '<input type="color" id="html5bcp" class="note-btn btn-default" value="#21104A" style="width:100%;" data-value="cp">',
                                '<button type="button" class="note-color-reset btn" data-event="backColor" data-value="cpbackColor">',
                                opt.lang.color.cpSelect,
                                "</button>",
                                "</div>",
                                "</div>",
                                '<div class="note-btn-group btn-foreground-color">',
                                '<div class="note-palette-title">' + opt.lang.color.foreground + "</div>",
                                "<div>",
                                '<button type="button" class="note-color-reset note-btn note-btn-block" data-event="removeFormat" data-value="foreColor">',
                                opt.lang.color.resetToDefault,
                                "</button>",
                                "</div>",
                                '<div class="note-holder" data-event="foreColor"/>',
                                '<div class="btn-sm">',
                                '<input type="color" id="html5fcp" class="note-btn btn-default" value="#21104A" style="width:100%;" data-value="cp">',
                                '<button type="button" class="note-color-reset btn" data-event="foreColor" data-value="cpforeColor">',
                                opt.lang.color.cpSelect,
                                "</button>",
                                "</div>",
                                "</div>",
                                "</div>"
                            ].join(""),
                            callback: function callback($dropdown) {
                                $dropdown.find(".note-holder").each(function() {
                                    var $holder = external_root_jQuery_commonjs2_jquery_commonjs_jquery_amd_jquery_default()(this);
                                    $holder.append(palette({
                                        colors: opt.colors,
                                        eventName: $holder.data("event")
                                    }).render());
                                });
                                if (type === "fore") {
                                    $dropdown.find(".btn-background-color").hide();
                                    $dropdown.css({
                                        "min-width": "210px"
                                    });
                                } else if (type === "back") {
                                    $dropdown.find(".btn-foreground-color").hide();
                                    $dropdown.css({
                                        "min-width": "210px"
                                    });
                                }
                            },
                            click: function click(event) {
                                var $button = external_root_jQuery_commonjs2_jquery_commonjs_jquery_amd_jquery_default()(event.target);
                                var eventName = $button.data("event");
                                var value = $button.data("value");
                                var foreinput = document.getElementById("html5fcp").value;
                                var backinput = document.getElementById("html5bcp").value;
                                if (value === "cp") event.stopPropagation();
                                else if (value === "cpbackColor") value = backinput;
                                else if (value === "cpforeColor") value = foreinput;
                                if (eventName && value) {
                                    var key = eventName === "backColor" ? "background-color" : "color";
                                    var $color = $button.closest(".note-color").find(".note-recent-color");
                                    var $currentButton = $button.closest(".note-color").find(".note-current-color-button");
                                    $color.css(key, value);
                                    $currentButton.attr("data-" + eventName, value);
                                    if (type === "fore") opt.itemClick("foreColor", value);
                                    else if (type === "back") opt.itemClick("backColor", value);
                                    else opt.itemClick(eventName, value);
                                }
                            }
                        })
                    ]
                }).render();
            };
            var dialog = renderer["a" /* default */ ].create('<div class="note-modal" aria-hidden="false" tabindex="-1" role="dialog"/>', function($node, options) {
                if (options.fade) $node.addClass("fade");
                $node.attr({
                    "aria-label": options.title
                });
                $node.html([
                    '<div class="note-modal-content">',
                    options.title ? '<div class="note-modal-header"><button type="button" class="close" aria-label="Close" aria-hidden="true"><i class="note-icon-close"></i></button><h4 class="note-modal-title">' + options.title + "</h4></div>" : "",
                    '<div class="note-modal-body">' + options.body + "</div>",
                    options.footer ? '<div class="note-modal-footer">' + options.footer + "</div>" : "",
                    "</div>"
                ].join(""));
                $node.data("modal", new ui_ModalUI($node, options));
            });
            var videoDialog = function videoDialog(opt) {
                var body = '<div class="note-form-group"><label for="note-dialog-video-url-' + opt.id + '" class="note-form-label">' + opt.lang.video.url + ' <small class="text-muted">' + opt.lang.video.providers + "</small></label>" + '<input id="note-dialog-video-url-' + opt.id + '" class="note-video-url note-input" type="text"/>' + "</div>";
                var footer = [
                    '<button type="button" href="#" class="note-btn note-btn-primary note-video-btn disabled" disabled>',
                    opt.lang.video.insert,
                    "</button>"
                ].join("");
                return dialog({
                    title: opt.lang.video.insert,
                    fade: opt.fade,
                    body: body,
                    footer: footer
                }).render();
            };
            var imageDialog = function imageDialog(opt) {
                var body = '<div class="note-form-group note-group-select-from-files"><label for="note-dialog-image-file-' + opt.id + '" class="note-form-label">' + opt.lang.image.selectFromFiles + "</label>" + '<input id="note-dialog-image-file-' + opt.id + '" class="note-note-image-input note-input" type="file" name="files" accept="image/*" multiple="multiple"/>' + opt.imageLimitation + "</div>" + '<div class="note-form-group">' + '<label for="note-dialog-image-url-' + opt.id + '" class="note-form-label">' + opt.lang.image.url + "</label>" + '<input id="note-dialog-image-url-' + opt.id + '" class="note-image-url note-input" type="text"/>' + "</div>";
                var footer = [
                    '<button href="#" type="button" class="note-btn note-btn-primary note-btn-large note-image-btn disabled" disabled>',
                    opt.lang.image.insert,
                    "</button>"
                ].join("");
                return dialog({
                    title: opt.lang.image.insert,
                    fade: opt.fade,
                    body: body,
                    footer: footer
                }).render();
            };
            var linkDialog = function linkDialog(opt) {
                var body = '<div class="note-form-group"><label for="note-dialog-link-txt-' + opt.id + '" class="note-form-label">' + opt.lang.link.textToDisplay + "</label>" + '<input id="note-dialog-link-txt-' + opt.id + '" class="note-link-text note-input" type="text"/>' + "</div>" + '<div class="note-form-group">' + '<label for="note-dialog-link-url-' + opt.id + '" class="note-form-label">' + opt.lang.link.url + "</label>" + '<input id="note-dialog-link-url-' + opt.id + '" class="note-link-url note-input" type="text" value="http://"/>' + "</div>" + (!opt.disableLinkTarget ? '<div class="checkbox"><label for="note-dialog-link-nw-' + opt.id + '"><input id="note-dialog-link-nw-' + opt.id + '" type="checkbox" checked> ' + opt.lang.link.openInNewWindow + "</label></div>" : "") + '<div class="checkbox"><label for="note-dialog-link-up-' + opt.id + '"><input id="note-dialog-link-up-' + opt.id + '" type="checkbox" checked> ' + opt.lang.link.useProtocol + "</label></div>";
                var footer = [
                    '<button href="#" type="button" class="note-btn note-btn-primary note-link-btn disabled" disabled>',
                    opt.lang.link.insert,
                    "</button>"
                ].join("");
                return dialog({
                    className: "link-dialog",
                    title: opt.lang.link.insert,
                    fade: opt.fade,
                    body: body,
                    footer: footer
                }).render();
            };
            var popover = renderer["a" /* default */ ].create([
                '<div class="note-popover bottom">',
                '<div class="note-popover-arrow"/>',
                '<div class="popover-content note-children-container"/>',
                "</div>"
            ].join(""), function($node, options) {
                var direction = typeof options.direction !== "undefined" ? options.direction : "bottom";
                $node.addClass(direction).hide();
                if (options.hideArrow) $node.find(".note-popover-arrow").hide();
            });
            var ui_checkbox = renderer["a" /* default */ ].create('<div class="checkbox"></div>', function($node, options) {
                $node.html([
                    "<label" + (options.id ? ' for="note-' + options.id + '"' : "") + ">",
                    '<input role="checkbox" type="checkbox"' + (options.id ? ' id="note-' + options.id + '"' : ""),
                    options.checked ? " checked" : "",
                    ' aria-checked="' + (options.checked ? "true" : "false") + '"/>',
                    options.text ? options.text : "",
                    "</label>"
                ].join(""));
            });
            var icon = function icon(iconClassName, tagName) {
                tagName = tagName || "i";
                return "<" + tagName + ' class="' + iconClassName + '"/>';
            };
            var ui = function ui(editorOptions) {
                return {
                    editor: editor,
                    toolbar: toolbar,
                    editingArea: editingArea,
                    codable: codable,
                    editable: editable,
                    statusbar: statusbar,
                    airEditor: airEditor,
                    airEditable: airEditable,
                    buttonGroup: buttonGroup,
                    button: ui_button,
                    dropdown: dropdown,
                    dropdownCheck: dropdownCheck,
                    dropdownButton: dropdownButton,
                    dropdownButtonContents: dropdownButtonContents,
                    dropdownCheckButton: dropdownCheckButton,
                    paragraphDropdownButton: paragraphDropdownButton,
                    tableDropdownButton: tableDropdownButton,
                    colorDropdownButton: ui_colorDropdownButton,
                    palette: palette,
                    dialog: dialog,
                    videoDialog: videoDialog,
                    imageDialog: imageDialog,
                    linkDialog: linkDialog,
                    popover: popover,
                    checkbox: ui_checkbox,
                    icon: icon,
                    options: editorOptions,
                    toggleBtn: function toggleBtn($btn, isEnable) {
                        $btn.toggleClass("disabled", !isEnable);
                        $btn.attr("disabled", !isEnable);
                    },
                    toggleBtnActive: function toggleBtnActive($btn, isActive) {
                        $btn.toggleClass("active", isActive);
                    },
                    check: function check($dom, value) {
                        $dom.find(".checked").removeClass("checked");
                        $dom.find('[data-value="' + value + '"]').addClass("checked");
                    },
                    onDialogShown: function onDialogShown($dialog, handler) {
                        $dialog.one("note.modal.show", handler);
                    },
                    onDialogHidden: function onDialogHidden($dialog, handler) {
                        $dialog.one("note.modal.hide", handler);
                    },
                    showDialog: function showDialog($dialog) {
                        $dialog.data("modal").show();
                    },
                    hideDialog: function hideDialog($dialog) {
                        $dialog.data("modal").hide();
                    },
                    /**
     * get popover content area
     *
     * @param $popover
     * @returns {*}
     */ getPopoverContent: function getPopoverContent($popover) {
                        return $popover.find(".note-popover-content");
                    },
                    /**
     * get dialog's body area
     *
     * @param $dialog
     * @returns {*}
     */ getDialogBody: function getDialogBody($dialog) {
                        return $dialog.find(".note-modal-body");
                    },
                    createLayout: function createLayout($note) {
                        var $editor = (editorOptions.airMode ? airEditor([
                            editingArea([
                                codable(),
                                airEditable()
                            ])
                        ]) : editorOptions.toolbarPosition === "bottom" ? editor([
                            editingArea([
                                codable(),
                                editable()
                            ]),
                            toolbar(),
                            statusbar()
                        ]) : editor([
                            toolbar(),
                            editingArea([
                                codable(),
                                editable()
                            ]),
                            statusbar()
                        ])).render();
                        $editor.insertAfter($note);
                        return {
                            note: $note,
                            editor: $editor,
                            toolbar: $editor.find(".note-toolbar"),
                            editingArea: $editor.find(".note-editing-area"),
                            editable: $editor.find(".note-editable"),
                            codable: $editor.find(".note-codable"),
                            statusbar: $editor.find(".note-statusbar")
                        };
                    },
                    removeLayout: function removeLayout($note, layoutInfo) {
                        $note.html(layoutInfo.editable.html());
                        layoutInfo.editor.remove();
                        $note.off("summernote"); // remove summernote custom event
                        $note.show();
                    }
                };
            };
            /* harmony default export */ var lite_ui = ui;
            // EXTERNAL MODULE: ./src/js/base/settings.js + 37 modules
            var settings = __webpack_require__(3);
            // EXTERNAL MODULE: ./src/styles/summernote-lite.scss
            var summernote_lite = __webpack_require__(6);
            // CONCATENATED MODULE: ./src/js/lite/settings.js
            external_root_jQuery_commonjs2_jquery_commonjs_jquery_amd_jquery_default.a.summernote = external_root_jQuery_commonjs2_jquery_commonjs_jquery_amd_jquery_default.a.extend(external_root_jQuery_commonjs2_jquery_commonjs_jquery_amd_jquery_default.a.summernote, {
                ui_template: lite_ui,
                "interface": "lite"
            });
        /***/ },
        /***/ 6: /***/ function(module1, exports, __webpack_require__) {
        // extracted by mini-css-extract-plugin
        /***/ }
    });
});

},{"8ea145335c4182e":"9o0Tu"}]},["lO5Qj"], "lO5Qj", "parcelRequire94c2")

